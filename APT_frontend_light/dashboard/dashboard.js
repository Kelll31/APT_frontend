/**
 * IP Roast Frontend - Dashboard Controller
 * –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 * –í–µ—Ä—Å–∏—è: Enterprise 1.0
 */

import { IPRoastAPI, ApiError } from '../shared/utils/api.js';
import {
    formatDate, formatFileSize, timeAgo, debounce, $, $$,
    addClass, removeClass, toggleClass, isValidIP, parsePortRange,
    Storage, generateUUID, deepClone
} from '../shared/utils/helpers.js';
import {
    SCAN_STATUS, DEVICE_STATUS, RISK_LEVELS, NOTIFICATION_TYPES,
    ERROR_MESSAGES, SUCCESS_MESSAGES, DEFAULT_UI_SETTINGS,
    ANIMATION_DURATION, THEMES, WEBSOCKET_CONFIG
} from '../shared/utils/constants.js';
import { OverviewWidget } from './overview.js';

/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –¥–∞—à–±–æ—Ä–¥–∞
 */
export class DashboardController {
    constructor(options = {}) {
        this.options = {
            container: '#dashboard-container',
            autoRefresh: true,
            refreshInterval: 30000,
            enableWebSocket: true,
            maxActivityItems: 50,
            chartAnimations: true,
            ...options
        };

        // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–∞—à–±–æ—Ä–¥–∞
        this.widgets = new Map();
        this.charts = new Map();
        this.intervals = new Map();

        // WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        this.websocket = null;
        this.wsReconnectAttempts = 0;

        // –î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.state = {
            isLoading: false,
            lastUpdate: null,
            stats: {},
            devices: [],
            scans: [],
            vulnerabilities: [],
            activityFeed: [],
            networkTopology: null,
            threatIntelligence: {}
        };

        // –ö—ç—à –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        this.cache = {
            stats: { data: null, timestamp: 0, ttl: 30000 },
            devices: { data: null, timestamp: 0, ttl: 60000 },
            topology: { data: null, timestamp: 0, ttl: 300000 }
        };

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.eventHandlers = new Map();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        this.notifications = {
            container: null,
            queue: [],
            maxVisible: 5
        };

        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞
     */
    async init() {
        try {
            this.showLoader();

            // –°–æ–∑–¥–∞–Ω–∏–µ DOM —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            await this.createDashboardStructure();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤
            await this.initializeWidgets();

            // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            await this.loadInitialData();

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            this.setupRealTimeUpdates();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket
            if (this.options.enableWebSocket) {
                this.initializeWebSocket();
            }

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
            this.setupEventHandlers();

            // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            if (this.options.autoRefresh) {
                this.startAutoRefresh();
            }

            this.hideLoader();
            this.showNotification('–î–∞—à–±–æ—Ä–¥ –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ', NOTIFICATION_TYPES.SUCCESS);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞:', error);
            this.hideLoader();
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞', NOTIFICATION_TYPES.ERROR);
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
     */
    setupRealTimeUpdates() {
        console.log('üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        if (this.options.enableWebSocket) {
            this.setupWebSocketConnection();
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        if (this.options.autoRefresh) {
            this.setupPeriodicUpdates();
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     */
    setupWebSocketConnection() {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è WebSocket
        console.log('üåê WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–¥–µ–º–æ —Ä–µ–∂–∏–º)');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
     */
    setupPeriodicUpdates() {
        if (this.intervals.has('autoRefresh')) return;

        const interval = setInterval(async () => {
            try {
                await this.refreshData();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
            }
        }, this.options.refreshInterval);

        this.intervals.set('autoRefresh', interval);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∏–¥–∂–µ—Ç–∞
     */
    handleWidgetError(error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∏–¥–∂–µ—Ç–∞:', error);
        this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–∂–µ—Ç–∞', NOTIFICATION_TYPES.ERROR);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
     */
    updateScansList(scans) {
        const scansList = document.querySelector('#scans-list');
        if (!scansList) return;

        if (!scans || scans.length === 0) {
            scansList.innerHTML = `
            <div class="empty-state">
                <i class="fas fa-search"></i>
                <p>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π</p>
                <button class="btn btn-primary" onclick="startNewScan()">
                    –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                </button>
            </div>
        `;
            return;
        }

        const scansHTML = scans.map(scan => `
        <div class="scan-item" data-scan-id="${scan.id}">
            <div class="scan-info">
                <h4>${scan.name || '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #' + scan.id}</h4>
                <p>${scan.target}</p>
            </div>
            <div class="scan-status">
                <span class="status ${scan.status}">${this.getStatusText(scan.status)}</span>
                <small>${scan.progress || 0}%</small>
            </div>
        </div>
    `).join('');

        scansList.innerHTML = scansHTML;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
     */
    getStatusText(status) {
        const statusMap = {
            'running': '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è',
            'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
            'failed': '–û—à–∏–±–∫–∞',
            'pending': '–û–∂–∏–¥–∞–Ω–∏–µ'
        };
        return statusMap[status] || status;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    showNotification(message, type = NOTIFICATION_TYPES.INFO) {
        console.log(`üì¢ ${type.toUpperCase()}: ${message}`);

        // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
        <div class="notification-content">
            <span class="notification-message">${message}</span>
            <button class="notification-close">&times;</button>
        </div>
    `;

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        let container = document.querySelector('#notifications-container');
        if (!container) {
            container = document.createElement('div');
            container.id = 'notifications-container';
            container.className = 'notifications-container';
            document.body.appendChild(container);
        }

        container.appendChild(notification);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 5000);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        notification.querySelector('.notification-close').addEventListener('click', () => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
     */
    async refreshData() {
        try {
            await Promise.allSettled([
                this.loadDashboardStats(),
                this.loadRecentScans()
            ]);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ DOM —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞—à–±–æ—Ä–¥–∞
     */
    async createDashboardStructure() {
        const container = $(this.options.container);
        if (!container) {
            throw new Error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–∞—à–±–æ—Ä–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        container.innerHTML = `
            <div class="dashboard-wrapper">
                <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞—à–±–æ—Ä–¥–∞ -->
                <div class="dashboard-header">
                    <div class="dashboard-title">
                        <div class="title-content">
                            <h1>–ü–∞–Ω–µ–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</h1>
                            <p class="subtitle">–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–µ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</p>
                        </div>
                        <div class="header-actions">
                            <div class="status-indicator" id="connection-status">
                                <i class="fas fa-circle"></i>
                                <span>–ü–æ–¥–∫–ª—é—á–µ–Ω–æ</span>
                            </div>
                            <button class="btn btn--secondary btn--sm" id="refresh-dashboard">
                                <i class="fas fa-sync-alt"></i>
                                –û–±–Ω–æ–≤–∏—Ç—å
                            </button>
                            <button class="btn btn--secondary btn--sm" id="dashboard-settings">
                                <i class="fas fa-cog"></i>
                                –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                            </button>
                        </div>
                    </div>
                    <div class="dashboard-tabs" id="dashboard-tabs">
                        <button class="tab-button active" data-tab="overview">
                            <i class="fas fa-tachometer-alt"></i>
                            –û–±–∑–æ—Ä
                        </button>
                        <button class="tab-button" data-tab="network">
                            <i class="fas fa-network-wired"></i>
                            –°–µ—Ç—å
                        </button>
                        <button class="tab-button" data-tab="security">
                            <i class="fas fa-shield-alt"></i>
                            –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
                        </button>
                        <button class="tab-button" data-tab="analytics">
                            <i class="fas fa-chart-line"></i>
                            –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
                        </button>
                    </div>
                </div>

                <!-- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç -->
                <div class="dashboard-content">
                    <!-- –í–∫–ª–∞–¥–∫–∞ –û–±–∑–æ—Ä -->
                    <div class="tab-content active" id="tab-overview">
                        <div id="overview-widget-container"></div>
                    </div>

                    <!-- –í–∫–ª–∞–¥–∫–∞ –°–µ—Ç—å -->
                    <div class="tab-content" id="tab-network">
                        <div class="dashboard-grid">
                            <div class="widget-container">
                                <div class="card widget-card">
                                    <div class="card-header">
                                        <h3><i class="fas fa-sitemap"></i> –¢–æ–ø–æ–ª–æ–≥–∏—è —Å–µ—Ç–∏</h3>
                                        <div class="card-actions">
                                            <button class="btn btn--sm btn--secondary" id="topology-fullscreen">
                                                <i class="fas fa-expand"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <div class="card-body">
                                        <div id="network-topology-chart" class="chart-container"></div>
                                    </div>
                                </div>
                            </div>

                            <div class="widget-container">
                                <div class="card widget-card">
                                    <div class="card-header">
                                        <h3><i class="fas fa-list"></i> –ê–∫—Ç–∏–≤–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</h3>
                                        <div class="live-indicator">
                                            <i class="fas fa-circle"></i>
                                            <span>–í —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</span>
                                        </div>
                                    </div>
                                    <div class="card-body">
                                        <div id="active-devices-list" class="device-list custom-scrollbar"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- –í–∫–ª–∞–¥–∫–∞ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å -->
                    <div class="tab-content" id="tab-security">
                        <div class="dashboard-grid">
                            <div class="widget-container">
                                <div class="card widget-card">
                                    <div class="card-header">
                                        <h3><i class="fas fa-exclamation-triangle"></i> –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏</h3>
                                        <div class="card-actions">
                                            <select class="form-control" id="vuln-filter">
                                                <option value="all">–í—Å–µ</option>
                                                <option value="critical">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ</option>
                                                <option value="high">–í—ã—Å–æ–∫–∏–µ</option>
                                                <option value="medium">–°—Ä–µ–¥–Ω–∏–µ</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="card-body">
                                        <div id="vulnerabilities-list" class="vulnerabilities-container custom-scrollbar"></div>
                                    </div>
                                </div>
                            </div>

                            <div class="widget-container">
                                <div class="card widget-card">
                                    <div class="card-header">
                                        <h3><i class="fas fa-chart-pie"></i> –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤</h3>
                                    </div>
                                    <div class="card-body">
                                        <div id="risk-distribution-chart" class="chart-container"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- –í–∫–ª–∞–¥–∫–∞ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ -->
                    <div class="tab-content" id="tab-analytics">
                        <div class="analytics-dashboard">
                            <div class="analytics-header">
                                <div class="time-range-selector">
                                    <label>–ü–µ—Ä–∏–æ–¥:</label>
                                    <select class="form-control" id="analytics-period">
                                        <option value="1h">–ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å</option>
                                        <option value="24h" selected>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞</option>
                                        <option value="7d">–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è</option>
                                        <option value="30d">–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü</option>
                                    </select>
                                </div>
                                <div class="export-actions">
                                    <button class="btn btn--secondary btn--sm" id="export-analytics">
                                        <i class="fas fa-download"></i>
                                        –≠–∫—Å–ø–æ—Ä—Ç
                                    </button>
                                </div>
                            </div>

                            <div class="analytics-grid">
                                <div class="chart-widget">
                                    <div class="card">
                                        <div class="card-header">
                                            <h3>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</h3>
                                        </div>
                                        <div class="card-body">
                                            <div id="scan-activity-chart" class="chart-container"></div>
                                        </div>
                                    </div>
                                </div>

                                <div class="chart-widget">
                                    <div class="card">
                                        <div class="card-header">
                                            <h3>–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É–≥—Ä–æ–∑</h3>
                                        </div>
                                        <div class="card-body">
                                            <div id="threat-detection-chart" class="chart-container"></div>
                                        </div>
                                    </div>
                                </div>

                                <div class="chart-widget full-width">
                                    <div class="card">
                                        <div class="card-header">
                                            <h3>–í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞ —Å–æ–±—ã—Ç–∏–π</h3>
                                        </div>
                                        <div class="card-body">
                                            <div id="events-timeline-chart" class="chart-container"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ -->
                <div class="dashboard-sidebar" id="dashboard-sidebar">
                    <div class="sidebar-header">
                        <h3><i class="fas fa-bell"></i> –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</h3>
                        <button class="btn btn--sm btn--secondary" id="clear-activity">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                    <div class="sidebar-content">
                        <div id="activity-feed" class="activity-feed custom-scrollbar"></div>
                    </div>
                </div>

                <!-- –ü–ª–∞–≤–∞—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã -->
                <div id="notifications-container" class="notifications-container"></div>

                <!-- –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ -->
                <div id="dashboard-modals"></div>
            </div>
        `;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        this.notifications.container = $('#notifications-container');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤ –¥–∞—à–±–æ—Ä–¥–∞
     */
    async initializeWidgets() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–∂–µ—Ç–∞ –æ–±–∑–æ—Ä–∞
        const overviewContainer = $('#overview-widget-container');
        if (overviewContainer) {
            this.widgets.set('overview', new OverviewWidget({
                container: overviewContainer,
                onStatsUpdate: (stats) => this.handleStatsUpdate(stats),
                onError: (error) => this.handleWidgetError('overview', error)
            }));
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä—É–≥–∏—Ö –≤–∏–¥–∂–µ—Ç–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
        console.log('–í–∏–¥–∂–µ—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async loadInitialData() {
        const loadingTasks = [
            this.loadDashboardStats(),
            this.loadDevices(),
            this.loadRecentScans(),
            this.loadVulnerabilities(),
            this.loadActivityFeed()
        ];

        try {
            await Promise.allSettled(loadingTasks);
            this.state.lastUpdate = new Date();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            throw error;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞
     */
    async loadDashboardStats() {
        try {
            const cached = this.getCachedData('stats');
            if (cached) {
                this.state.stats = cached;
                return;
            }

            const stats = await IPRoastAPI.analytics.getDashboardStats();
            this.state.stats = stats;
            this.setCachedData('stats', stats);

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ –æ–±–∑–æ—Ä–∞
            const overviewWidget = this.widgets.get('overview');
            if (overviewWidget) {
                overviewWidget.updateStats(stats);
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', NOTIFICATION_TYPES.ERROR);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
     */
    async loadDevices() {
        try {
            const cached = this.getCachedData('devices');
            if (cached) {
                this.state.devices = cached;
                this.updateDevicesList();
                return;
            }

            const devices = await IPRoastAPI.devices.getDevices({
                status: DEVICE_STATUS.ACTIVE,
                limit: 100
            });

            this.state.devices = devices.items || [];
            this.setCachedData('devices', this.state.devices);
            this.updateDevicesList();

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤', NOTIFICATION_TYPES.ERROR);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
     */
    async loadRecentScans() {
        try {
            const scans = await IPRoastAPI.scanning.getScans({
                limit: 10,
                sort: 'created_at',
                order: 'desc'
            });

            this.state.scans = scans.items || [];
            this.updateScansList();

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
     */
    async loadVulnerabilities() {
        try {
            const vulnerabilities = await IPRoastAPI.vulnerabilities.getVulnerabilities({
                severity: [RISK_LEVELS.CRITICAL, RISK_LEVELS.HIGH],
                limit: 50
            });

            this.state.vulnerabilities = vulnerabilities.items || [];
            this.updateVulnerabilitiesList();

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –ª–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    async loadActivityFeed() {
        try {
            const activity = await IPRoastAPI.analytics.getActivityFeed({
                limit: this.options.maxActivityItems
            });

            this.state.activityFeed = activity.items || [];
            this.updateActivityFeed();

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
     */
    updateDevicesList() {
        const container = $('#active-devices-list');
        if (!container) return;

        if (this.state.devices.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-server"></i>
                    <h4>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h4>
                    <p>–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤</p>
                </div>
            `;
            return;
        }

        const devicesHTML = this.state.devices.map(device => `
            <div class="device-item" data-device-id="${device.id}">
                <div class="device-status">
                    <div class="status-indicator status-${device.status}"></div>
                </div>
                <div class="device-info">
                    <div class="device-ip">${device.ip}</div>
                    <div class="device-hostname">${device.hostname || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</div>
                    <div class="device-os">${device.os || '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}</div>
                </div>
                <div class="device-stats">
                    <span class="ports-count">${device.open_ports || 0} –ø–æ—Ä—Ç–æ–≤</span>
                    <span class="last-seen">${timeAgo(device.last_seen)}</span>
                </div>
                <div class="device-actions">
                    <button class="btn btn--sm btn--secondary" onclick="dashboard.showDeviceDetails('${device.id}')">
                        <i class="fas fa-info-circle"></i>
                    </button>
                </div>
            </div>
        `).join('');

        container.innerHTML = devicesHTML;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
     */
    updateVulnerabilitiesList() {
        const container = $('#vulnerabilities-list');
        if (!container) return;

        if (this.state.vulnerabilities.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-shield-alt"></i>
                    <h4>–£—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h4>
                    <p>–°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞ –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</p>
                </div>
            `;
            return;
        }

        const vulnHTML = this.state.vulnerabilities.map(vuln => `
            <div class="vulnerability-item risk-${vuln.severity}">
                <div class="vuln-severity">
                    <span class="severity-badge severity-${vuln.severity}">
                        ${vuln.severity.toUpperCase()}
                    </span>
                </div>
                <div class="vuln-info">
                    <div class="vuln-title">${vuln.title}</div>
                    <div class="vuln-target">${vuln.target}</div>
                    <div class="vuln-cve">${vuln.cve || 'N/A'}</div>
                </div>
                <div class="vuln-score">
                    <span class="cvss-score">${vuln.cvss_score || 'N/A'}</span>
                </div>
                <div class="vuln-actions">
                    <button class="btn btn--sm btn--secondary" onclick="dashboard.showVulnerabilityDetails('${vuln.id}')">
                        <i class="fas fa-eye"></i>
                    </button>
                </div>
            </div>
        `).join('');

        container.innerHTML = vulnHTML;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    updateActivityFeed() {
        const container = $('#activity-feed');
        if (!container) return;

        if (this.state.activityFeed.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-history"></i>
                    <h4>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</h4>
                    <p>–°–æ–±—ã—Ç–∏—è –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –∑–¥–µ—Å—å</p>
                </div>
            `;
            return;
        }

        const activityHTML = this.state.activityFeed.map(item => `
            <div class="activity-item activity-${item.type}" data-activity-id="${item.id}">
                <div class="activity-icon">
                    <i class="${this.getActivityIcon(item.type)}"></i>
                </div>
                <div class="activity-content">
                    <div class="activity-title">${item.title}</div>
                    <div class="activity-description">${item.description}</div>
                    <div class="activity-time">${timeAgo(item.timestamp)}</div>
                </div>
                ${item.actionable ? `
                    <div class="activity-actions">
                        <button class="btn btn--sm btn--primary" onclick="dashboard.handleActivityAction('${item.id}')">
                            –î–µ–π—Å—Ç–≤–∏–µ
                        </button>
                    </div>
                ` : ''}
            </div>
        `).join('');

        container.innerHTML = activityHTML;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    getActivityIcon(type) {
        const icons = {
            'scan': 'fas fa-search',
            'vulnerability': 'fas fa-exclamation-triangle',
            'device': 'fas fa-server',
            'attack': 'fas fa-shield-alt',
            'system': 'fas fa-cog',
            'user': 'fas fa-user',
            'error': 'fas fa-times-circle',
            'success': 'fas fa-check-circle',
            'warning': 'fas fa-exclamation-triangle',
            'info': 'fas fa-info-circle'
        };
        return icons[type] || 'fas fa-circle';
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventHandlers() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const refreshBtn = $('#refresh-dashboard');
        if (refreshBtn) {
            refreshBtn.addEventListener('click', debounce(() => {
                this.refreshDashboard();
            }, 1000));
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–∫–ª–∞–¥–æ–∫
        const tabButtons = $$('.tab-button');
        tabButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                this.switchTab(e.target.dataset.tab);
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–ª—å—Ç—Ä–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        const vulnFilter = $('#vuln-filter');
        if (vulnFilter) {
            vulnFilter.addEventListener('change', (e) => {
                this.filterVulnerabilities(e.target.value);
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–∏–æ–¥–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        const analyticsFilter = $('#analytics-period');
        if (analyticsFilter) {
            analyticsFilter.addEventListener('change', (e) => {
                this.loadAnalytics(e.target.value);
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        const clearActivityBtn = $('#clear-activity');
        if (clearActivityBtn) {
            clearActivityBtn.addEventListener('click', () => {
                this.clearActivityFeed();
            });
        }

        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        document.addEventListener('visibilitychange', () => {
            if (document.hidden) {
                clearInterval(this.intervals.get('autoRefresh'));
            } else {
                this.setupPeriodicUpdates();
            }
        });
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
     */
    switchTab(tabId) {
        // –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
        $$('.tab-button').forEach(btn => removeClass(btn, 'active'));
        $$('.tab-content').forEach(content => removeClass(content, 'active'));

        // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
        const activeButton = $(`[data-tab="${tabId}"]`);
        const activeContent = $(`#tab-${tabId}`);

        if (activeButton && activeContent) {
            addClass(activeButton, 'active');
            addClass(activeContent, 'active');

            // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
            this.loadTabData(tabId);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
     */
    async loadTabData(tabId) {
        switch (tabId) {
            case 'network':
                await this.loadNetworkTopology();
                break;
            case 'security':
                await this.loadSecurityData();
                break;
            case 'analytics':
                await this.loadAnalytics('24h');
                break;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ø–æ–ª–æ–≥–∏–∏ —Å–µ—Ç–∏
     */
    async loadNetworkTopology() {
        try {
            const cached = this.getCachedData('topology');
            if (cached) {
                this.renderNetworkTopology(cached);
                return;
            }

            const topology = await IPRoastAPI.analytics.getNetworkTopology();
            this.state.networkTopology = topology;
            this.setCachedData('topology', topology);
            this.renderNetworkTopology(topology);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø–æ–ª–æ–≥–∏–∏:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø–æ–ª–æ–≥–∏–∏ —Å–µ—Ç–∏', NOTIFICATION_TYPES.ERROR);
        }
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–æ–ø–æ–ª–æ–≥–∏–∏ —Å–µ—Ç–∏
     */
    renderNetworkTopology(topology) {
        const container = $('#network-topology-chart');
        if (!container) return;

        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–ø–æ–ª–æ–≥–∏–∏
        // –ù–∞–ø—Ä–∏–º–µ—Ä, —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º D3.js –∏–ª–∏ –¥—Ä—É–≥–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        container.innerHTML = `
            <div class="topology-placeholder">
                <i class="fas fa-sitemap"></i>
                <h4>–¢–æ–ø–æ–ª–æ–≥–∏—è —Å–µ—Ç–∏</h4>
                <p>–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${topology.nodes?.length || 0} —É–∑–ª–æ–≤</p>
                <p>${topology.connections?.length || 0} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π</p>
            </div>
        `;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    initializeWebSocket() {
        if (!window.WebSocket) {
            console.warn('WebSocket –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º');
            return;
        }

        const wsUrl = `${window.location.protocol === 'https:' ? 'wss:' : 'ws:'}//${window.location.host}${WEBSOCKET_CONFIG.URL}`;

        try {
            this.websocket = new WebSocket(wsUrl);

            this.websocket.onopen = () => {
                console.log('WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                this.wsReconnectAttempts = 0;
                this.updateConnectionStatus(true);
            };

            this.websocket.onmessage = (event) => {
                this.handleWebSocketMessage(event);
            };

            this.websocket.onclose = () => {
                console.log('WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
                this.updateConnectionStatus(false);
                this.scheduleWebSocketReconnect();
            };

            this.websocket.onerror = (error) => {
                console.error('WebSocket –æ—à–∏–±–∫–∞:', error);
                this.updateConnectionStatus(false);
            };

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket:', error);
            this.updateConnectionStatus(false);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    handleWebSocketMessage(event) {
        try {
            console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ:', event.data);

            let data;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ JSON
            if (typeof event.data === 'string') {
                try {
                    data = JSON.parse(event.data);
                } catch (parseError) {
                    // –ï—Å–ª–∏ –Ω–µ JSON, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                    console.log('üìù –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', event.data);

                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    if (event.data === 'connected') {
                        console.log('‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ');
                        this.showNotification('WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω', NOTIFICATION_TYPES.SUCCESS);
                        return;
                    }

                    if (event.data === 'ping') {
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º pong –æ–±—Ä–∞—Ç–Ω–æ
                        if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {
                            this.websocket.send('pong');
                        }
                        return;
                    }

                    if (event.data === 'pong') {
                        console.log('üèì –ü–æ–ª—É—á–µ–Ω pong –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
                        return;
                    }

                    // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    console.warn('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', event.data);
                    return;
                }
            } else {
                data = event.data;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON –¥–∞–Ω–Ω—ã—Ö
            if (data && typeof data === 'object') {
                this.processWebSocketData(data);
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket –¥–∞–Ω–Ω—ã—Ö
     */
    processWebSocketData(data) {
        try {
            console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket –¥–∞–Ω–Ω—ã—Ö:', data);

            switch (data.type) {
                case 'stats_update':
                    this.updateDashboardStats(data.payload);
                    break;

                case 'scan_update':
                    this.updateScanStatus(data.payload);
                    break;

                case 'device_update':
                    this.updateDeviceStatus(data.payload);
                    break;

                case 'vulnerability_found':
                    this.handleNewVulnerability(data.payload);
                    break;

                case 'activity_event':
                    this.addActivityEvent(data.payload);
                    break;

                case 'notification':
                    this.showNotification(data.payload.message, data.payload.type || NOTIFICATION_TYPES.INFO);
                    break;

                default:
                    console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã WebSocket –¥–∞–Ω–Ω—ã–µ:', data);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞ —á–µ—Ä–µ–∑ WebSocket
     */
    updateDashboardStats(stats) {
        try {
            this.state.stats = { ...this.state.stats, ...stats };

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç—ã
            if (this.widgets.has('overview')) {
                const overviewWidget = this.widgets.get('overview');
                overviewWidget.updateStats(this.state.stats);
            }

            console.log('üìà WebSocket: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ WebSocket:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    updateScanStatus(scanData) {
        try {
            // –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ
            const scanIndex = this.state.scans.findIndex(scan => scan.id === scanData.id);
            if (scanIndex !== -1) {
                this.state.scans[scanIndex] = { ...this.state.scans[scanIndex], ...scanData };
            } else {
                this.state.scans.push(scanData);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.updateScansList(this.state.scans);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞–∂–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
            if (scanData.status === 'completed') {
                this.showNotification(`–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ${scanData.name || scanData.id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ`, NOTIFICATION_TYPES.SUCCESS);
            } else if (scanData.status === 'failed') {
                this.showNotification(`–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ${scanData.name || scanData.id} –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π`, NOTIFICATION_TYPES.ERROR);
            }

            console.log('üîç WebSocket: –°—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω:', scanData);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
     */
    updateDeviceStatus(deviceData) {
        try {
            // –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ —Å–ø–∏—Å–∫–µ
            const deviceIndex = this.state.devices.findIndex(device => device.ip === deviceData.ip);
            if (deviceIndex !== -1) {
                this.state.devices[deviceIndex] = { ...this.state.devices[deviceIndex], ...deviceData };
            } else {
                this.state.devices.push(deviceData);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.updateDevicesList(this.state.devices);

            console.log('üñ•Ô∏è WebSocket: –°—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω:', deviceData);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π —É—è–∑–≤–∏–º–æ—Å—Ç–∏
     */
    handleNewVulnerability(vulnData) {
        try {
            this.state.vulnerabilities.push(vulnData);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç—è—Ö
            if (vulnData.severity === 'critical') {
                this.showNotification(
                    `–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å: ${vulnData.name}`,
                    NOTIFICATION_TYPES.ERROR
                );
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            this.updateVulnerabilityStats();

            console.log('üö® WebSocket: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å:', vulnData);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–π —É—è–∑–≤–∏–º–æ—Å—Ç–∏:', error);
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –ª–µ–Ω—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    addActivityEvent(eventData) {
        try {
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
            this.state.activityFeed.unshift(eventData);

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            if (this.state.activityFeed.length > this.options.maxActivityItems) {
                this.state.activityFeed = this.state.activityFeed.slice(0, this.options.maxActivityItems);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.updateActivityFeed();

            console.log('üìù WebSocket: –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', eventData);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    updateConnectionStatus(connected) {
        const statusIndicator = document.querySelector('#connection-status');
        if (!statusIndicator) return;

        const icon = statusIndicator.querySelector('i');
        const text = statusIndicator.querySelector('span');
        if (!icon || !text) return;

        if (connected) {
            removeClass(statusIndicator, 'disconnected');
            addClass(statusIndicator, 'connected');
            icon.className = 'fas fa-circle';
            text.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
        } else {
            removeClass(statusIndicator, 'connected');
            addClass(statusIndicator, 'disconnected');
            icon.className = 'fas fa-exclamation-circle';
            text.textContent = '–û—Ç–∫–ª—é—á–µ–Ω–æ';
        }
    }


    /**
     * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket
     */
    scheduleWebSocketReconnect() {
        if (this.wsReconnectAttempts < WEBSOCKET_CONFIG.MAX_RECONNECT_ATTEMPTS) {
            setTimeout(() => {
                this.wsReconnectAttempts++;
                console.log(`–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket #${this.wsReconnectAttempts}`);
                this.initializeWebSocket();
            }, WEBSOCKET_CONFIG.RECONNECT_INTERVAL);
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    startAutoRefresh() {
        // –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        this.intervals.set('main', setInterval(() => {
            this.refreshDashboard();
        }, this.options.refreshInterval));

        // –ß–∞—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        this.intervals.set('activity', setInterval(() => {
            this.loadActivityFeed();
        }, 10000));
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    stopAutoRefresh() {
        this.intervals.forEach((interval, key) => {
            clearInterval(interval);
            this.intervals.delete(key);
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞
     */
    async refreshDashboard() {
        if (this.state.isLoading) return;

        this.state.isLoading = true;
        this.showRefreshIndicator();

        try {
            // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            this.clearCache();

            // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            await this.loadInitialData();

            this.showNotification('–î–∞—à–±–æ—Ä–¥ –æ–±–Ω–æ–≤–ª–µ–Ω', NOTIFICATION_TYPES.SUCCESS);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞', NOTIFICATION_TYPES.ERROR);
        } finally {
            this.state.isLoading = false;
            this.hideRefreshIndicator();
        }
    }

    /**
     * –ü–æ–∫–∞–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    showRefreshIndicator() {
        const refreshBtn = $('#refresh-dashboard');
        if (refreshBtn) {
            const icon = refreshBtn.querySelector('i');
            addClass(icon, 'fa-spin');
            refreshBtn.disabled = true;
        }
    }

    /**
     * –°–∫—Ä—ã—Ç–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    hideRefreshIndicator() {
        const refreshBtn = $('#refresh-dashboard');
        if (refreshBtn) {
            const icon = refreshBtn.querySelector('i');
            removeClass(icon, 'fa-spin');
            refreshBtn.disabled = false;
        }
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    showNotification(message, type = NOTIFICATION_TYPES.INFO, duration = 5000) {
        if (!this.notifications.container) return;

        const notification = document.createElement('div');
        notification.className = `notification notification--${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <i class="${this.getNotificationIcon(type)}"></i>
                <span>${message}</span>
            </div>
            <button class="notification-close">
                <i class="fas fa-times"></i>
            </button>
        `;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        notification.querySelector('.notification-close').addEventListener('click', () => {
            this.hideNotification(notification);
        });

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        this.notifications.container.appendChild(notification);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        if (duration > 0) {
            setTimeout(() => {
                this.hideNotification(notification);
            }, duration);
        }

        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∏–¥–∏–º—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const notifications = this.notifications.container.querySelectorAll('.notification');
        if (notifications.length > this.notifications.maxVisible) {
            this.hideNotification(notifications[0]);
        }
    }

    /**
     * –°–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    hideNotification(notification) {
        if (notification && notification.parentNode) {
            addClass(notification, 'notification--hiding');
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    getNotificationIcon(type) {
        const icons = {
            [NOTIFICATION_TYPES.SUCCESS]: 'fas fa-check-circle',
            [NOTIFICATION_TYPES.ERROR]: 'fas fa-exclamation-circle',
            [NOTIFICATION_TYPES.WARNING]: 'fas fa-exclamation-triangle',
            [NOTIFICATION_TYPES.INFO]: 'fas fa-info-circle'
        };
        return icons[type] || 'fas fa-bell';
    }

    /**
     * –†–∞–±–æ—Ç–∞ —Å –∫—ç—à–µ–º
     */
    getCachedData(key) {
        const cached = this.cache[key];
        if (cached && Date.now() - cached.timestamp < cached.ttl) {
            return cached.data;
        }
        return null;
    }

    setCachedData(key, data) {
        if (this.cache[key]) {
            this.cache[key].data = data;
            this.cache[key].timestamp = Date.now();
        }
    }

    clearCache() {
        Object.keys(this.cache).forEach(key => {
            this.cache[key].timestamp = 0;
        });
    }

    /**
     * –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
     */
    showLoader() {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
    }

    hideLoader() {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π WebSocket
     */
    handleStatsUpdate(stats) {
        this.state.stats = { ...this.state.stats, ...stats };
        const overviewWidget = this.widgets.get('overview');
        if (overviewWidget) {
            overviewWidget.updateStats(this.state.stats);
        }
    }

    handleNewDevice(device) {
        this.state.devices.unshift(device);
        this.updateDevicesList();
        this.showNotification(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${device.ip}`, NOTIFICATION_TYPES.INFO);
    }

    handleNewVulnerability(vulnerability) {
        this.state.vulnerabilities.unshift(vulnerability);
        this.updateVulnerabilitiesList();
        this.showNotification(`–ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å: ${vulnerability.title}`, NOTIFICATION_TYPES.WARNING);
    }

    handleActivityUpdate(activity) {
        this.state.activityFeed.unshift(activity);
        if (this.state.activityFeed.length > this.options.maxActivityItems) {
            this.state.activityFeed.pop();
        }
        this.updateActivityFeed();
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    destroy() {
        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        this.stopAutoRefresh();

        // –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket
        if (this.websocket) {
            this.websocket.close();
        }

        // –û—á–∏—Å—Ç–∫–∞ –≤–∏–¥–∂–µ—Ç–æ–≤
        this.widgets.forEach(widget => {
            if (widget.destroy) {
                widget.destroy();
            }
        });
        this.widgets.clear();

        // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
        this.clearCache();

        console.log('Dashboard –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
window.DashboardController = DashboardController;
