import React, { useEffect, useState, useCallback } from 'react'
import { useNavigate, useLocation } from 'react-router-dom'

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import Button from '@/components/common/Button'
import Card from '@/components/common/Card'

// –•—É–∫–∏
import { useTheme } from '@/hooks/useTheme'
import { useNotifications } from '@/hooks/useNotifications'

// –£—Ç–∏–ª–∏—Ç—ã
import { formatDuration } from '@/utils/formatters'

// –¢–∏–ø—ã
interface ErrorStats {
    errorCode: string;
    timestamp: string;
    attemptedPath: string;
    userAgent: string;
    referrer: string;
}

interface QuickLink {
    id: string;
    title: string;
    description: string;
    icon: string;
    path: string;
    badge?: string;
}

const NotFoundPage: React.FC = () => {
    // –•—É–∫–∏
    const navigate = useNavigate();
    const location = useLocation();
    const { theme } = useTheme();
    const { addNotification } = useNotifications();

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    const [redirectTimer, setRedirectTimer] = useState<number | null>(null);
    const [timeLeft, setTimeLeft] = useState(10);
    const [isAutoRedirect, setIsAutoRedirect] = useState(false);
    const [errorStats, setErrorStats] = useState<ErrorStats | null>(null);
    const [searchQuery, setSearchQuery] = useState('');

    // –ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const quickLinks: QuickLink[] = [
        {
            id: 'scanner',
            title: '–°–∫–∞–Ω–µ—Ä –ø–æ—Ä—Ç–æ–≤',
            description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
            icon: 'üîç',
            path: '/scanner',
            badge: '–û—Å–Ω–æ–≤–Ω–æ–µ'
        },
        {
            id: 'recon',
            title: '–†–∞–∑–≤–µ–¥–∫–∞ —Å–µ—Ç–∏',
            description: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Å–µ—Ç–∏',
            icon: 'üó∫Ô∏è',
            path: '/recon'
        },
        {
            id: 'reports',
            title: '–û—Ç—á–µ—Ç—ã',
            description: '–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
            icon: 'üìä',
            path: '/reports'
        },
        {
            id: 'settings',
            title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
            description: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã',
            icon: '‚öôÔ∏è',
            path: '/settings'
        }
    ];

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–∫–∏
    useEffect(() => {
        const stats: ErrorStats = {
            errorCode: '404',
            timestamp: new Date().toISOString(),
            attemptedPath: location.pathname + location.search,
            userAgent: navigator.userAgent,
            referrer: document.referrer || 'Direct access'
        };

        setErrorStats(stats);

        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        console.warn('üìç 404 Error:', {
            path: stats.attemptedPath,
            referrer: stats.referrer,
            timestamp: stats.timestamp
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
        if (window.__IP_ROAST_CONFIG__?.features?.analytics) {
            try {
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Å–∏—Å—Ç–µ–º–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
                console.log('üìä Analytics: 404 error tracked');
            } catch (error) {
                console.warn('‚ö†Ô∏è Failed to track 404 error:', error);
            }
        }
    }, [location]);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    useEffect(() => {
        let timer: NodeJS.Timeout;

        if (isAutoRedirect && timeLeft > 0) {
            timer = setTimeout(() => {
                setTimeLeft(prev => prev - 1);
            }, 1000);
        } else if (isAutoRedirect && timeLeft === 0) {
            handleRedirectHome();
        }

        return () => {
            if (timer) clearTimeout(timer);
        };
    }, [isAutoRedirect, timeLeft]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    const handleRedirectHome = useCallback(() => {
        addNotification({
            type: 'info',
            title: '–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
            message: '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É',
            duration: 2000
        });
        navigate('/scanner', { replace: true });
    }, [navigate, addNotification]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const handleEnableAutoRedirect = useCallback(() => {
        setIsAutoRedirect(true);
        addNotification({
            type: 'info',
            title: '–ê–≤—Ç–æ–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ',
            message: `–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${timeLeft} —Å–µ–∫—É–Ω–¥`,
            duration: 3000
        });
    }, [timeLeft, addNotification]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const handleDisableAutoRedirect = useCallback(() => {
        setIsAutoRedirect(false);
        setTimeLeft(10);
        addNotification({
            type: 'info',
            title: '–ê–≤—Ç–æ–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ',
            message: '–û—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ',
            duration: 2000
        });
    }, [addNotification]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±—ã—Å—Ç—Ä—ã–º —Å—Å—ã–ª–∫–∞–º
    const handleQuickNavigation = useCallback((path: string, title: string) => {
        addNotification({
            type: 'success',
            title: '–ü–µ—Ä–µ—Ö–æ–¥',
            message: `–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª: ${title}`,
            duration: 2000
        });
        navigate(path);
    }, [navigate, addNotification]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞
    const handleSearch = useCallback((e: React.FormEvent) => {
        e.preventDefault();

        if (!searchQuery.trim()) {
            addNotification({
                type: 'warning',
                title: '–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å',
                message: '–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å'
            });
            return;
        }

        // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∞–º
        const matchingLink = quickLinks.find(link =>
            link.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
            link.description.toLowerCase().includes(searchQuery.toLowerCase())
        );

        if (matchingLink) {
            addNotification({
                type: 'success',
                title: '–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ',
                message: `–ü–µ—Ä–µ—Ö–æ–¥ –≤: ${matchingLink.title}`,
                duration: 3000
            });
            navigate(matchingLink.path);
        } else {
            addNotification({
                type: 'info',
                title: '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
                message: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∏–∂–µ',
                duration: 4000
            });
        }
    }, [searchQuery, quickLinks, navigate, addNotification]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
    const handleGoBack = useCallback(() => {
        if (window.history.length > 1) {
            navigate(-1);
        } else {
            navigate('/scanner', { replace: true });
        }
    }, [navigate]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ
    const handleReportError = useCallback(async () => {
        if (!errorStats) return;

        try {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –æ–± –æ—à–∏–±–∫–∞—Ö
            console.log('üìù Error report:', errorStats);

            addNotification({
                type: 'success',
                title: '–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
                message: '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å –≤ —É–ª—É—á—à–µ–Ω–∏–∏ IP Roast!',
                duration: 4000
            });
        } catch (error) {
            addNotification({
                type: 'error',
                title: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏',
                message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ'
            });
        }
    }, [errorStats, addNotification]);

    return (
        <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4">
            <div className="max-w-4xl w-full space-y-8">

                {/* –û—Å–Ω–æ–≤–Ω–∞—è —Å–µ–∫—Ü–∏—è 404 */}
                <div className="text-center space-y-6">
                    <div className="relative">
                        {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–∫–æ–Ω–∫–∞ */}
                        <div className="inline-flex items-center justify-center w-32 h-32 mb-6">
                            <div className="relative">
                                {/* –í–Ω–µ—à–Ω–∏–π –∫—Ä—É–≥ */}
                                <div className="w-32 h-32 border-4 border-gray-200 dark:border-gray-700 rounded-full animate-spin-slow opacity-20"></div>

                                {/* –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
                                <div className="absolute inset-0 flex items-center justify-center">
                                    <div className="text-6xl animate-pulse">üîç</div>
                                </div>

                                {/* –¢–æ—á–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */}
                                <div className="absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-2">
                                    <div className="w-2 h-2 bg-red-500 rounded-full animate-ping"></div>
                                </div>
                                <div className="absolute bottom-0 right-0 transform translate-x-2 translate-y-2">
                                    <div className="w-2 h-2 bg-blue-500 rounded-full animate-ping animation-delay-300"></div>
                                </div>
                                <div className="absolute top-1/2 left-0 transform -translate-x-2 -translate-y-1/2">
                                    <div className="w-2 h-2 bg-green-500 rounded-full animate-ping animation-delay-700"></div>
                                </div>
                            </div>
                        </div>

                        {/* –ö–æ–¥ –æ—à–∏–±–∫–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
                        <h1 className="text-8xl font-bold text-gray-900 dark:text-gray-100 mb-4">
                            <span className="bg-gradient-to-r from-red-500 to-red-600 bg-clip-text text-transparent">
                                404
                            </span>
                        </h1>

                        <h2 className="text-3xl font-semibold text-gray-800 dark:text-gray-200 mb-2">
                            –¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
                        </h2>

                        <p className="text-xl text-gray-600 dark:text-gray-400 max-w-2xl mx-auto">
                            IP Roast –Ω–µ —Å–º–æ–≥ –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–µ—Ç–µ–≤–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ.
                            –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∞.
                        </p>
                    </div>

                    {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ */}
                    {errorStats && (
                        <Card className="max-w-2xl mx-auto">
                            <div className="p-6">
                                <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4 flex items-center gap-2">
                                    üïµÔ∏è –î–µ—Ç–∞–ª–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                                </h3>

                                <div className="space-y-3 text-sm">
                                    <div className="flex justify-between items-center">
                                        <span className="text-gray-600 dark:text-gray-400">–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –ø—É—Ç—å:</span>
                                        <code className="text-red-600 dark:text-red-400 bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded font-mono text-xs">
                                            {errorStats.attemptedPath}
                                        </code>
                                    </div>

                                    <div className="flex justify-between items-center">
                                        <span className="text-gray-600 dark:text-gray-400">–í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è:</span>
                                        <span className="text-gray-900 dark:text-gray-100">
                                            {new Date(errorStats.timestamp).toLocaleString('ru-RU')}
                                        </span>
                                    </div>

                                    <div className="flex justify-between items-center">
                                        <span className="text-gray-600 dark:text-gray-400">–ò—Å—Ç–æ—á–Ω–∏–∫:</span>
                                        <span className="text-gray-900 dark:text-gray-100 truncate max-w-48">
                                            {errorStats.referrer === 'Direct access' ? '–ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø' : errorStats.referrer}
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </Card>
                    )}
                </div>

                {/* –ü–æ–∏—Å–∫ */}
                <Card className="max-w-2xl mx-auto">
                    <div className="p-6">
                        <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4 flex items-center gap-2">
                            üîé –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫
                        </h3>

                        <form onSubmit={handleSearch} className="flex gap-3">
                            <input
                                type="text"
                                value={searchQuery}
                                onChange={(e) => setSearchQuery(e.target.value)}
                                placeholder="–ù–∞–π—Ç–∏ —Ä–∞–∑–¥–µ–ª –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é..."
                                className="
                  flex-1 px-4 py-3 border border-gray-300 dark:border-gray-600 
                  rounded-lg bg-white dark:bg-gray-800 
                  text-gray-900 dark:text-gray-100
                  focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500
                  placeholder-gray-400 dark:placeholder-gray-500
                "
                            />
                            <Button type="submit" className="px-6">
                                üîç –ù–∞–π—Ç–∏
                            </Button>
                        </form>
                    </div>
                </Card>

                {/* –ë—ã—Å—Ç—Ä–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
                <div className="space-y-6">
                    <h3 className="text-2xl font-semibold text-gray-900 dark:text-gray-100 text-center">
                        üöÄ –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥
                    </h3>

                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                        {quickLinks.map((link) => (
                            <Card
                                key={link.id}
                                className="group hover:shadow-lg transition-all duration-200 cursor-pointer transform hover:-translate-y-1"
                                onClick={() => handleQuickNavigation(link.path, link.title)}
                            >
                                <div className="p-6 text-center">
                                    <div className="text-4xl mb-3 group-hover:scale-110 transition-transform duration-200">
                                        {link.icon}
                                    </div>

                                    <div className="flex items-center justify-center gap-2 mb-2">
                                        <h4 className="font-semibold text-gray-900 dark:text-gray-100">
                                            {link.title}
                                        </h4>
                                        {link.badge && (
                                            <span className="px-2 py-1 text-xs bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 rounded-full">
                                                {link.badge}
                                            </span>
                                        )}
                                    </div>

                                    <p className="text-sm text-gray-600 dark:text-gray-400">
                                        {link.description}
                                    </p>
                                </div>
                            </Card>
                        ))}
                    </div>
                </div>

                {/* –î–µ–π—Å—Ç–≤–∏—è */}
                <div className="flex flex-col sm:flex-row gap-4 justify-center items-center">
                    <Button
                        onClick={handleGoBack}
                        variant="outline"
                        className="flex items-center gap-2"
                    >
                        ‚¨ÖÔ∏è –ù–∞–∑–∞–¥
                    </Button>

                    <Button
                        onClick={handleRedirectHome}
                        className="flex items-center gap-2"
                    >
                        üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é
                    </Button>

                    {!isAutoRedirect ? (
                        <Button
                            onClick={handleEnableAutoRedirect}
                            variant="outline"
                            className="flex items-center gap-2 text-blue-600 border-blue-600 hover:bg-blue-50 dark:hover:bg-blue-900/20"
                        >
                            ‚è±Ô∏è –ê–≤—Ç–æ–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ({timeLeft}—Å)
                        </Button>
                    ) : (
                        <Button
                            onClick={handleDisableAutoRedirect}
                            variant="outline"
                            className="flex items-center gap-2 text-orange-600 border-orange-600 hover:bg-orange-50 dark:hover:bg-orange-900/20"
                        >
                            ‚è∏Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å ({timeLeft}—Å)
                        </Button>
                    )}
                </div>

                {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
                <Card className="max-w-2xl mx-auto">
                    <div className="p-6">
                        <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4 flex items-center gap-2">
                            üõ†Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                        </h3>

                        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                            <Button
                                onClick={handleReportError}
                                variant="outline"
                                className="flex items-center gap-2 justify-center"
                            >
                                üìù –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ
                            </Button>

                            <Button
                                onClick={() => window.location.reload()}
                                variant="outline"
                                className="flex items-center gap-2 justify-center"
                            >
                                üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                            </Button>
                        </div>

                        <div className="mt-4 pt-4 border-t border-gray-200 dark:border-gray-700">
                            <p className="text-sm text-gray-600 dark:text-gray-400 text-center">
                                –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã
                            </p>
                        </div>
                    </div>
                </Card>

                {/* –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                <div className="text-center text-xs text-gray-500 dark:text-gray-400 space-y-1">
                    <p>IP Roast Security Platform v2.1.0</p>
                    <p>–í—Ä–µ–º—è: {new Date().toLocaleString('ru-RU')}</p>
                    {isAutoRedirect && timeLeft > 0 && (
                        <p className="text-blue-600 dark:text-blue-400 font-medium">
                            –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {timeLeft} —Å–µ–∫—É–Ω–¥...
                        </p>
                    )}
                </div>
            </div>

            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ CSS —Å—Ç–∏–ª–∏ */}
            <style jsx>{`
        @keyframes spin-slow {
          from { transform: rotate(0deg); }
          to { transform: rotate(360deg); }
        }
        
        .animate-spin-slow {
          animation: spin-slow 8s linear infinite;
        }
        
        .animation-delay-300 {
          animation-delay: 300ms;
        }
        
        .animation-delay-700 {
          animation-delay: 700ms;
        }
      `}</style>
        </div>
    );
};

export default NotFoundPage;
