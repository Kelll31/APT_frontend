import React, { useState, useEffect, useCallback, useMemo } from 'react'
import { useSearchParams } from 'react-router-dom'

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import Card from '@/components/common/Card'
import Button from '@/components/common/Button'
import LoadingSpinner from '@/components/common/LoadingSpinner'
import StatusIndicator from '@/components/common/StatusIndicator'
import ProgressBar from '@/components/common/ProgressBar'
import Modal from '@/components/common/Modal'
import NetworkMap from '@/components/features/Network/NetworkMap'
import DeviceCard from '@/components/features/Network/DeviceCard'
import TopologyView from '@/components/features/Network/TopologyView'

// –•—É–∫–∏
import { useNotifications } from '@/hooks/useNotifications'
import { useTheme } from '@/hooks/useTheme'
import { useWebSocket } from '@/hooks/useWebSocket'
import { useLocalStorage } from '@/hooks/useLocalStorage'

// –°–µ—Ä–≤–∏—Å—ã API
import { networkApi } from '@/services/networkApi'
import { reconApi } from '@/services/reconApi'

// –¢–∏–ø—ã
import type { NetworkDevice, NetworkInterface, ScanProgress, ReconSettings } from '@/types/network'

// –£—Ç–∏–ª–∏—Ç—ã
import { formatDuration, formatFileSize } from '@/utils/formatters'
import { validateNetworkRange } from '@/utils/validators'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
interface ReconStats {
    activeDevices: number;
    inactiveDevices: number;
    totalDevices: number;
    openPorts: number;
    scanTime: number;
    networksScanned: number;
    servicesDiscovered: number;
}

interface NetworkRange {
    id: string;
    name: string;
    range: string;
    description: string;
    suggested?: boolean;
}

const ReconPage: React.FC = () => {
    // URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const [searchParams, setSearchParams] = useSearchParams();

    // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const [isScanning, setIsScanning] = useState(false);
    const [scanProgress, setScanProgress] = useState<ScanProgress | null>(null);
    const [devices, setDevices] = useState<NetworkDevice[]>([]);
    const [networkInterfaces, setNetworkInterfaces] = useState<NetworkInterface[]>([]);
    const [reconStats, setReconStats] = useState<ReconStats>({
        activeDevices: 0,
        inactiveDevices: 0,
        totalDevices: 0,
        openPorts: 0,
        scanTime: 0,
        networksScanned: 0,
        servicesDiscovered: 0
    });

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const [reconSettings, setReconSettings] = useLocalStorage<ReconSettings>('reconSettings', {
        selectedInterface: '',
        scanType: 'ping_sweep',
        networkRange: '',
        scanPorts: false,
        portRange: '1-1000',
        detectOS: false,
        detectServices: false,
        aggressiveMode: false,
        timeout: 3000,
        maxThreads: 50,
        excludeHosts: ''
    });

    // UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const [selectedView, setSelectedView] = useState<'grid' | 'list' | 'topology'>('grid');
    const [selectedDevices, setSelectedDevices] = useState<Set<string>>(new Set());
    const [searchQuery, setSearchQuery] = useState('');
    const [deviceFilters, setDeviceFilters] = useState({
        status: 'all', // all, online, offline
        type: 'all', // all, router, server, workstation, mobile, iot
        manufacturer: 'all'
    });
    const [sortBy, setSortBy] = useState<'ip' | 'hostname' | 'lastSeen' | 'manufacturer'>('ip');
    const [showAdvancedSettings, setShowAdvancedSettings] = useState(false);
    const [showDeviceDetails, setShowDeviceDetails] = useState<NetworkDevice | null>(null);

    // –•—É–∫–∏
    const { theme } = useTheme();
    const { addNotification } = useNotifications();
    const { isConnected: wsConnected } = useWebSocket();

    // –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
    const networkRanges = useMemo<NetworkRange[]>(() => [
        {
            id: 'local-192',
            name: '–õ–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Ç—å (192.168.x.x)',
            range: '192.168.1.0/24',
            description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–æ–º–∞—à–Ω—è—è/–æ—Ñ–∏—Å–Ω–∞—è —Å–µ—Ç—å',
            suggested: true
        },
        {
            id: 'local-10',
            name: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —Å–µ—Ç—å (10.x.x.x)',
            range: '10.0.0.0/24',
            description: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —Å–µ—Ç—å –∫–ª–∞—Å—Å–∞ A'
        },
        {
            id: 'local-172',
            name: '–ü—Ä–∏–≤–∞—Ç–Ω–∞—è —Å–µ—Ç—å (172.16.x.x)',
            range: '172.16.0.0/24',
            description: '–ü—Ä–∏–≤–∞—Ç–Ω–∞—è —Å–µ—Ç—å –∫–ª–∞—Å—Å–∞ B'
        },
        {
            id: 'custom',
            name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω',
            range: '',
            description: '–£–∫–∞–∑–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä—É—á–Ω—É—é'
        }
    ], []);

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        loadNetworkInterfaces();
        loadSavedDevices();

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        const activeScanId = localStorage.getItem('activeReconScanId');
        if (activeScanId) {
            restoreActiveScan(activeScanId);
        }
    }, []);

    // WebSocket –ø–æ–¥–ø–∏—Å–∫–∏
    useEffect(() => {
        if (wsConnected && isScanning) {
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Ä–∞–∑–≤–µ–¥–∫–∏
            const unsubscribe = setupReconWebSocketListeners();
            return unsubscribe;
        }
    }, [wsConnected, isScanning]);

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
    const loadNetworkInterfaces = useCallback(async () => {
        try {
            const interfaces = await networkApi.getInterfaces();
            setNetworkInterfaces(interfaces);

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            if (interfaces.length > 0 && !reconSettings.selectedInterface) {
                const activeInterface = interfaces.find(iface => iface.is_up && !iface.is_loopback) || interfaces[0];
                setReconSettings(prev => ({
                    ...prev,
                    selectedInterface: activeInterface.name,
                    networkRange: activeInterface.network || '192.168.1.0/24'
                }));
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤:', error);
            addNotification({
                type: 'error',
                title: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏',
                message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤'
            });
        }
    }, [reconSettings.selectedInterface, addNotification]);

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const loadSavedDevices = useCallback(async () => {
        try {
            const savedDevices = await reconApi.getDiscoveredDevices();
            setDevices(savedDevices);
            updateStatsFromDevices(savedDevices);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', error);
        }
    }, []);

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const restoreActiveScan = useCallback(async (scanId: string) => {
        try {
            const scanStatus = await reconApi.getScanStatus(scanId);
            if (scanStatus.status === 'running') {
                setIsScanning(true);
                setScanProgress(scanStatus.progress);

                addNotification({
                    type: 'info',
                    title: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
                    message: '–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–∏'
                });
            } else {
                localStorage.removeItem('activeReconScanId');
            }
        } catch (error) {
            localStorage.removeItem('activeReconScanId');
        }
    }, [addNotification]);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket —Å–ª—É—à–∞—Ç–µ–ª–µ–π
    const setupReconWebSocketListeners = useCallback(() => {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å WebSocket –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π —Ä–∞–∑–≤–µ–¥–∫–∏
        console.log('üîå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket —Å–ª—É—à–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞–∑–≤–µ–¥–∫–∏');

        return () => {
            console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ WebSocket —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Ä–∞–∑–≤–µ–¥–∫–∏');
        };
    }, []);

    // –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–∏
    const handleStartScan = useCallback(async () => {
        if (isScanning) {
            addNotification({
                type: 'warning',
                title: '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ',
                message: '–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è'
            });
            return;
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if (!reconSettings.selectedInterface) {
            addNotification({
                type: 'error',
                title: '–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫',
                message: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å'
            });
            return;
        }

        if (!reconSettings.networkRange) {
            addNotification({
                type: 'error',
                title: '–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫',
                message: '–£–∫–∞–∂–∏—Ç–µ —Å–µ—Ç–µ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è'
            });
            return;
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        if (!validateNetworkRange(reconSettings.networkRange)) {
            addNotification({
                type: 'error',
                title: '–ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω',
                message: '–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–µ—Ç–µ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, 192.168.1.0/24)'
            });
            return;
        }

        try {
            setIsScanning(true);
            setScanProgress({ progress: 0, phase: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...', startTime: Date.now() });

            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            setDevices([]);
            setReconStats(prev => ({
                ...prev,
                activeDevices: 0,
                inactiveDevices: 0,
                totalDevices: 0,
                openPorts: 0
            }));

            const loadingNotification = addNotification({
                type: 'loading',
                title: '–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
                message: `–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≤–µ–¥–∫—É —Å–µ—Ç–∏ ${reconSettings.networkRange}...`
            });

            const response = await reconApi.startNetworkScan(reconSettings);

            if (loadingNotification?.hide) {
                loadingNotification.hide();
            }

            if (response.success) {
                localStorage.setItem('activeReconScanId', response.scan_id);

                addNotification({
                    type: 'success',
                    title: '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ',
                    message: `ID —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${response.scan_id}`,
                    actions: [{
                        label: '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
                        icon: 'üõë',
                        handler: () => handleStopScan()
                    }]
                });

                // –ó–∞–ø—É—Å–∫–∞–µ–º polling –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                startProgressPolling(response.scan_id);
            } else {
                throw new Error(response.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞');
            }
        } catch (error) {
            setIsScanning(false);
            setScanProgress(null);

            addNotification({
                type: 'error',
                title: '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞',
                message: error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'
            });
        }
    }, [isScanning, reconSettings, addNotification]);

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const handleStopScan = useCallback(async () => {
        const activeScanId = localStorage.getItem('activeReconScanId');
        if (!activeScanId) return;

        try {
            await reconApi.stopScan(activeScanId);

            setIsScanning(false);
            setScanProgress(null);
            localStorage.removeItem('activeReconScanId');

            addNotification({
                type: 'info',
                title: '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
                message: '–ö–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'
            });
        } catch (error) {
            addNotification({
                type: 'error',
                title: '–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏',
                message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'
            });
        }
    }, [addNotification]);

    // Polling –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const startProgressPolling = useCallback((scanId: string) => {
        const pollInterval = setInterval(async () => {
            try {
                const status = await reconApi.getScanStatus(scanId);

                setScanProgress(status.progress);

                if (status.devices) {
                    setDevices(status.devices);
                    updateStatsFromDevices(status.devices);
                }

                if (status.status === 'completed' || status.status === 'failed') {
                    clearInterval(pollInterval);
                    setIsScanning(false);
                    localStorage.removeItem('activeReconScanId');

                    if (status.status === 'completed') {
                        addNotification({
                            type: 'success',
                            title: '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
                            message: `–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${status.devices?.length || 0}`
                        });
                    } else {
                        addNotification({
                            type: 'error',
                            title: '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å',
                            message: status.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
                        });
                    }
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ polling –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
                clearInterval(pollInterval);
                setIsScanning(false);
            }
        }, 2000);

        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        return () => clearInterval(pollInterval);
    }, [addNotification]);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const updateStatsFromDevices = useCallback((deviceList: NetworkDevice[]) => {
        const stats = deviceList.reduce((acc, device) => ({
            activeDevices: acc.activeDevices + (device.status === 'online' ? 1 : 0),
            inactiveDevices: acc.inactiveDevices + (device.status === 'offline' ? 1 : 0),
            totalDevices: acc.totalDevices + 1,
            openPorts: acc.openPorts + (device.openPorts?.length || 0),
            scanTime: Math.max(acc.scanTime, device.lastSeen ? Date.now() - new Date(device.lastSeen).getTime() : 0),
            networksScanned: acc.networksScanned,
            servicesDiscovered: acc.servicesDiscovered + (device.services?.length || 0)
        }), {
            activeDevices: 0,
            inactiveDevices: 0,
            totalDevices: 0,
            openPorts: 0,
            scanTime: 0,
            networksScanned: 1,
            servicesDiscovered: 0
        });

        setReconStats(stats);
    }, []);

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const filteredDevices = useMemo(() => {
        return devices.filter(device => {
            // –ü–æ–∏—Å–∫
            if (searchQuery) {
                const query = searchQuery.toLowerCase();
                const searchableFields = [
                    device.ip,
                    device.hostname,
                    device.manufacturer,
                    device.deviceType,
                    ...(device.services?.map(s => s.name) || [])
                ].filter(Boolean);

                if (!searchableFields.some(field => field.toLowerCase().includes(query))) {
                    return false;
                }
            }

            // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
            if (deviceFilters.status !== 'all' && device.status !== deviceFilters.status) {
                return false;
            }

            // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
            if (deviceFilters.type !== 'all' && device.deviceType !== deviceFilters.type) {
                return false;
            }

            // –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—é
            if (deviceFilters.manufacturer !== 'all' && device.manufacturer !== deviceFilters.manufacturer) {
                return false;
            }

            return true;
        });
    }, [devices, searchQuery, deviceFilters]);

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const sortedDevices = useMemo(() => {
        return [...filteredDevices].sort((a, b) => {
            switch (sortBy) {
                case 'ip':
                    return a.ip.localeCompare(b.ip, undefined, { numeric: true });
                case 'hostname':
                    return (a.hostname || '').localeCompare(b.hostname || '');
                case 'lastSeen':
                    return new Date(b.lastSeen || 0).getTime() - new Date(a.lastSeen || 0).getTime();
                case 'manufacturer':
                    return (a.manufacturer || '').localeCompare(b.manufacturer || '');
                default:
                    return 0;
            }
        });
    }, [filteredDevices, sortBy]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    const handleNetworkRangeSelect = useCallback((rangeId: string) => {
        const selectedRange = networkRanges.find(range => range.id === rangeId);
        if (selectedRange && selectedRange.range) {
            setReconSettings(prev => ({
                ...prev,
                networkRange: selectedRange.range
            }));
        }
    }, [networkRanges]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const handleExportResults = useCallback(async (format: 'json' | 'csv' | 'xml') => {
        try {
            const data = await reconApi.exportResults(devices, format);

            const blob = new Blob([data], {
                type: format === 'json' ? 'application/json' :
                    format === 'csv' ? 'text/csv' :
                        'application/xml'
            });

            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `recon-results-${new Date().toISOString().split('T')[0]}.${format}`;
            a.click();
            URL.revokeObjectURL(url);

            addNotification({
                type: 'success',
                title: '–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω',
                message: `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${format.toUpperCase()}`
            });
        } catch (error) {
            addNotification({
                type: 'error',
                title: '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞',
                message: '–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'
            });
        }
    }, [devices, addNotification]);

    return (
        <div className="min-h-screen bg-gray-50 dark:bg-gray-900 p-4 lg:p-6">
            <div className="max-w-7xl mx-auto space-y-6">

                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
                <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between">
                    <div className="space-y-1">
                        <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100 flex items-center gap-3">
                            üó∫Ô∏è –†–∞–∑–≤–µ–¥–∫–∞ —Å–µ—Ç–∏
                        </h1>
                        <p className="text-gray-600 dark:text-gray-400">
                            –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
                        </p>
                    </div>

                    <div className="flex items-center space-x-3 mt-4 lg:mt-0">
                        <StatusIndicator
                            status={wsConnected ? 'online' : 'offline'}
                            label={wsConnected ? 'WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω' : 'WebSocket –æ—Ç–∫–ª—é—á–µ–Ω'}
                        />
                        {devices.length > 0 && (
                            <div className="flex items-center space-x-2">
                                <Button
                                    variant="outline"
                                    size="sm"
                                    onClick={() => handleExportResults('json')}
                                >
                                    üìÅ –≠–∫—Å–ø–æ—Ä—Ç
                                </Button>
                            </div>
                        )}
                    </div>
                </div>

                {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">
                    <Card className="p-4">
                        <div className="text-center">
                            <div className="text-2xl font-bold text-green-600 dark:text-green-400">
                                {reconStats.activeDevices}
                            </div>
                            <div className="text-sm text-gray-600 dark:text-gray-400">
                                –ê–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                            </div>
                        </div>
                    </Card>

                    <Card className="p-4">
                        <div className="text-center">
                            <div className="text-2xl font-bold text-gray-600 dark:text-gray-400">
                                {reconStats.inactiveDevices}
                            </div>
                            <div className="text-sm text-gray-600 dark:text-gray-400">
                                –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö
                            </div>
                        </div>
                    </Card>

                    <Card className="p-4">
                        <div className="text-center">
                            <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">
                                {reconStats.openPorts}
                            </div>
                            <div className="text-sm text-gray-600 dark:text-gray-400">
                                –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤
                            </div>
                        </div>
                    </Card>

                    <Card className="p-4">
                        <div className="text-center">
                            <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">
                                {reconStats.servicesDiscovered}
                            </div>
                            <div className="text-sm text-gray-600 dark:text-gray-400">
                                –°–µ—Ä–≤–∏—Å–æ–≤
                            </div>
                        </div>
                    </Card>

                    <Card className="p-4">
                        <div className="text-center">
                            <div className="text-sm font-medium text-gray-900 dark:text-gray-100">
                                {isScanning && scanProgress ? formatDuration((Date.now() - scanProgress.startTime) / 1000) :
                                    reconStats.scanTime > 0 ? formatDuration(reconStats.scanTime / 1000) : '0—Å'}
                            </div>
                            <div className="text-sm text-gray-600 dark:text-gray-400">
                                –í—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                            </div>
                        </div>
                    </Card>

                    <Card className="p-4">
                        <div className="text-center">
                            <div className="text-2xl font-bold text-orange-600 dark:text-orange-400">
                                {reconStats.networksScanned}
                            </div>
                            <div className="text-sm text-gray-600 dark:text-gray-400">
                                –°–µ—Ç–µ–π
                            </div>
                        </div>
                    </Card>
                </div>

                {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
                <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">

                    {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */}
                    <div className="lg:col-span-1 space-y-6">
                        <Card>
                            <div className="p-6">
                                <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4 flex items-center gap-2">
                                    ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                                </h3>

                                <div className="space-y-4">
                                    {/* –°–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å */}
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                            –°–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                                        </label>
                                        <select
                                            value={reconSettings.selectedInterface}
                                            onChange={(e) => setReconSettings(prev => ({ ...prev, selectedInterface: e.target.value }))}
                                            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
                                            disabled={isScanning}
                                        >
                                            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</option>
                                            {networkInterfaces.map(iface => (
                                                <option key={iface.name} value={iface.name}>
                                                    {iface.name} ({iface.ip}) {iface.is_up ? 'üü¢' : 'üî¥'}
                                                </option>
                                            ))}
                                        </select>
                                    </div>

                                    {/* –°–µ—Ç–µ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω */}
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                            –°–µ—Ç–µ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
                                        </label>
                                        <div className="space-y-2">
                                            {networkRanges.map(range => (
                                                <label
                                                    key={range.id}
                                                    className="flex items-center space-x-2 cursor-pointer"
                                                >
                                                    <input
                                                        type="radio"
                                                        name="networkRange"
                                                        value={range.id}
                                                        checked={range.range === reconSettings.networkRange ||
                                                            (range.id === 'custom' && !networkRanges.some(r => r.range === reconSettings.networkRange))}
                                                        onChange={() => handleNetworkRangeSelect(range.id)}
                                                        disabled={isScanning}
                                                        className="text-blue-600"
                                                    />
                                                    <div className="flex-1">
                                                        <div className="text-sm font-medium text-gray-900 dark:text-gray-100">
                                                            {range.name} {range.suggested && '‚≠ê'}
                                                        </div>
                                                        <div className="text-xs text-gray-600 dark:text-gray-400">
                                                            {range.description}
                                                        </div>
                                                    </div>
                                                </label>
                                            ))}
                                        </div>

                                        {/* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω */}
                                        <input
                                            type="text"
                                            value={reconSettings.networkRange}
                                            onChange={(e) => setReconSettings(prev => ({ ...prev, networkRange: e.target.value }))}
                                            placeholder="192.168.1.0/24"
                                            className="mt-2 w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
                                            disabled={isScanning}
                                        />
                                    </div>

                                    {/* –¢–∏–ø —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */}
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                            –¢–∏–ø —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                                        </label>
                                        <select
                                            value={reconSettings.scanType}
                                            onChange={(e) => setReconSettings(prev => ({ ...prev, scanType: e.target.value as any }))}
                                            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
                                            disabled={isScanning}
                                        >
                                            <option value="ping_sweep">Ping —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</option>
                                            <option value="arp_scan">ARP —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</option>
                                            <option value="tcp_syn">TCP SYN —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</option>
                                            <option value="comprehensive">–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</option>
                                        </select>
                                    </div>

                                    {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ */}
                                    <div className="space-y-3">
                                        <label className="flex items-center space-x-2">
                                            <input
                                                type="checkbox"
                                                checked={reconSettings.scanPorts}
                                                onChange={(e) => setReconSettings(prev => ({ ...prev, scanPorts: e.target.checked }))}
                                                disabled={isScanning}
                                                className="rounded text-blue-600"
                                            />
                                            <span className="text-sm text-gray-700 dark:text-gray-300">
                                                –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—Ç—ã
                                            </span>
                                        </label>

                                        <label className="flex items-center space-x-2">
                                            <input
                                                type="checkbox"
                                                checked={reconSettings.detectServices}
                                                onChange={(e) => setReconSettings(prev => ({ ...prev, detectServices: e.target.checked }))}
                                                disabled={isScanning}
                                                className="rounded text-blue-600"
                                            />
                                            <span className="text-sm text-gray-700 dark:text-gray-300">
                                                –û–ø—Ä–µ–¥–µ–ª—è—Ç—å —Å–µ—Ä–≤–∏—Å—ã
                                            </span>
                                        </label>

                                        <label className="flex items-center space-x-2">
                                            <input
                                                type="checkbox"
                                                checked={reconSettings.detectOS}
                                                onChange={(e) => setReconSettings(prev => ({ ...prev, detectOS: e.target.checked }))}
                                                disabled={isScanning}
                                                className="rounded text-blue-600"
                                            />
                                            <span className="text-sm text-gray-700 dark:text-gray-300">
                                                –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –û–°
                                            </span>
                                        </label>
                                    </div>

                                    {/* –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
                                    <Button
                                        variant="outline"
                                        size="sm"
                                        onClick={() => setShowAdvancedSettings(!showAdvancedSettings)}
                                        className="w-full"
                                    >
                                        {showAdvancedSettings ? 'üì¶ –°–∫—Ä—ã—Ç—å' : 'üîß –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}
                                    </Button>

                                    {showAdvancedSettings && (
                                        <div className="space-y-3 pt-3 border-t border-gray-200 dark:border-gray-700">
                                            <div>
                                                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                                                    –¢–∞–π–º–∞—É—Ç (–º—Å)
                                                </label>
                                                <input
                                                    type="number"
                                                    value={reconSettings.timeout}
                                                    onChange={(e) => setReconSettings(prev => ({ ...prev, timeout: parseInt(e.target.value) }))}
                                                    min={1000}
                                                    max={10000}
                                                    step={500}
                                                    disabled={isScanning}
                                                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
                                                />
                                            </div>

                                            <div>
                                                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                                                    –ú–∞–∫—Å. –ø–æ—Ç–æ–∫–æ–≤
                                                </label>
                                                <input
                                                    type="number"
                                                    value={reconSettings.maxThreads}
                                                    onChange={(e) => setReconSettings(prev => ({ ...prev, maxThreads: parseInt(e.target.value) }))}
                                                    min={1}
                                                    max={200}
                                                    disabled={isScanning}
                                                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
                                                />
                                            </div>

                                            {reconSettings.scanPorts && (
                                                <div>
                                                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                                                        –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ç–æ–≤
                                                    </label>
                                                    <input
                                                        type="text"
                                                        value={reconSettings.portRange}
                                                        onChange={(e) => setReconSettings(prev => ({ ...prev, portRange: e.target.value }))}
                                                        placeholder="1-1000,8080,8443"
                                                        disabled={isScanning}
                                                        className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
                                                    />
                                                </div>
                                            )}
                                        </div>
                                    )}
                                </div>

                                {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
                                <div className="mt-6 flex space-x-3">
                                    {!isScanning ? (
                                        <Button
                                            onClick={handleStartScan}
                                            className="flex-1"
                                            disabled={!reconSettings.selectedInterface || !reconSettings.networkRange}
                                        >
                                            üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                                        </Button>
                                    ) : (
                                        <Button
                                            onClick={handleStopScan}
                                            variant="outline"
                                            className="flex-1 text-red-600 border-red-600 hover:bg-red-50 dark:hover:bg-red-900/20"
                                        >
                                            üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                                        </Button>
                                    )}
                                </div>
                            </div>
                        </Card>

                        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */}
                        {isScanning && scanProgress && (
                            <Card>
                                <div className="p-6">
                                    <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4 flex items-center gap-2">
                                        ‚è≥ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                                    </h3>

                                    <div className="space-y-4">
                                        <div>
                                            <div className="flex justify-between text-sm text-gray-600 dark:text-gray-400 mb-2">
                                                <span>{scanProgress.phase}</span>
                                                <span>{scanProgress.progress}%</span>
                                            </div>
                                            <ProgressBar
                                                progress={scanProgress.progress}
                                                className="h-2"
                                            />
                                        </div>

                                        <div className="text-sm text-gray-600 dark:text-gray-400">
                                            –í—Ä–µ–º—è: {formatDuration((Date.now() - scanProgress.startTime) / 1000)}
                                        </div>
                                    </div>
                                </div>
                            </Card>
                        )}
                    </div>

                    {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
                    <div className="lg:col-span-3 space-y-6">

                        {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ */}
                        <Card>
                            <div className="p-6">
                                <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
                                    <div className="flex items-center space-x-4">
                                        <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100">
                                            üñ•Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ({sortedDevices.length})
                                        </h3>

                                        {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–∏–¥–∞ */}
                                        <div className="flex items-center bg-gray-100 dark:bg-gray-800 rounded-lg p-1">
                                            <button
                                                onClick={() => setSelectedView('grid')}
                                                className={`px-3 py-1 text-sm rounded-md transition-colors ${selectedView === 'grid'
                                                        ? 'bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 shadow-sm'
                                                        : 'text-gray-600 dark:text-gray-400'
                                                    }`}
                                            >
                                                üî≤ –°–µ—Ç–∫–∞
                                            </button>
                                            <button
                                                onClick={() => setSelectedView('list')}
                                                className={`px-3 py-1 text-sm rounded-md transition-colors ${selectedView === 'list'
                                                        ? 'bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 shadow-sm'
                                                        : 'text-gray-600 dark:text-gray-400'
                                                    }`}
                                            >
                                                üìù –°–ø–∏—Å–æ–∫
                                            </button>
                                            <button
                                                onClick={() => setSelectedView('topology')}
                                                className={`px-3 py-1 text-sm rounded-md transition-colors ${selectedView === 'topology'
                                                        ? 'bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 shadow-sm'
                                                        : 'text-gray-600 dark:text-gray-400'
                                                    }`}
                                            >
                                                üó∫Ô∏è –¢–æ–ø–æ–ª–æ–≥–∏—è
                                            </button>
                                        </div>
                                    </div>

                                    {/* –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã */}
                                    <div className="flex items-center space-x-3">
                                        <input
                                            type="text"
                                            value={searchQuery}
                                            onChange={(e) => setSearchQuery(e.target.value)}
                                            placeholder="–ü–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤..."
                                            className="px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
                                        />

                                        <select
                                            value={deviceFilters.status}
                                            onChange={(e) => setDeviceFilters(prev => ({ ...prev, status: e.target.value }))}
                                            className="px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
                                        >
                                            <option value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
                                            <option value="online">–û–Ω–ª–∞–π–Ω</option>
                                            <option value="offline">–û—Ñ–ª–∞–π–Ω</option>
                                        </select>

                                        <select
                                            value={sortBy}
                                            onChange={(e) => setSortBy(e.target.value as any)}
                                            className="px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
                                        >
                                            <option value="ip">–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ IP</option>
                                            <option value="hostname">–ü–æ –∏–º–µ–Ω–∏ —Ö–æ—Å—Ç–∞</option>
                                            <option value="lastSeen">–ü–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è</option>
                                            <option value="manufacturer">–ü–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—é</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </Card>

                        {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */}
                        {sortedDevices.length === 0 ? (
                            <Card>
                                <div className="p-12 text-center">
                                    {isScanning ? (
                                        <div className="space-y-4">
                                            <LoadingSpinner size="lg" />
                                            <div className="space-y-2">
                                                <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100">
                                                    –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏...
                                                </h3>
                                                <p className="text-gray-600 dark:text-gray-400">
                                                    –ü–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
                                                </p>
                                            </div>
                                        </div>
                                    ) : (
                                        <div className="space-y-4">
                                            <div className="text-6xl">üîç</div>
                                            <div className="space-y-2">
                                                <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100">
                                                    –ù–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                                                </h3>
                                                <p className="text-gray-600 dark:text-gray-400">
                                                    –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                                                </p>
                                            </div>
                                            <Button
                                                onClick={handleStartScan}
                                                disabled={!reconSettings.selectedInterface || !reconSettings.networkRange}
                                            >
                                                üöÄ –ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                                            </Button>
                                        </div>
                                    )}
                                </div>
                            </Card>
                        ) : (
                            <>
                                {/* –°–µ—Ç–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */}
                                {selectedView === 'grid' && (
                                    <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4">
                                        {sortedDevices.map(device => (
                                            <DeviceCard
                                                key={device.ip}
                                                device={device}
                                                onSelect={(device) => setShowDeviceDetails(device)}
                                                isSelected={selectedDevices.has(device.ip)}
                                                onToggleSelect={(ip) => {
                                                    const newSelected = new Set(selectedDevices);
                                                    if (newSelected.has(ip)) {
                                                        newSelected.delete(ip);
                                                    } else {
                                                        newSelected.add(ip);
                                                    }
                                                    setSelectedDevices(newSelected);
                                                }}
                                            />
                                        ))}
                                    </div>
                                )}

                                {/* –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */}
                                {selectedView === 'list' && (
                                    <Card>
                                        <div className="overflow-x-auto">
                                            <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                                                <thead className="bg-gray-50 dark:bg-gray-800">
                                                    <tr>
                                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                                                            IP –∞–¥—Ä–µ—Å
                                                        </th>
                                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                                                            Hostname
                                                        </th>
                                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                                                            –°—Ç–∞—Ç—É—Å
                                                        </th>
                                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                                                            MAC –∞–¥—Ä–µ—Å
                                                        </th>
                                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                                                            –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å
                                                        </th>
                                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                                                            –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã
                                                        </th>
                                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                                                            –î–µ–π—Å—Ç–≤–∏—è
                                                        </th>
                                                    </tr>
                                                </thead>
                                                <tbody className="bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-700">
                                                    {sortedDevices.map(device => (
                                                        <tr key={device.ip} className="hover:bg-gray-50 dark:hover:bg-gray-800">
                                                            <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-gray-100">
                                                                {device.ip}
                                                            </td>
                                                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600 dark:text-gray-400">
                                                                {device.hostname || '-'}
                                                            </td>
                                                            <td className="px-6 py-4 whitespace-nowrap">
                                                                <StatusIndicator
                                                                    status={device.status === 'online' ? 'online' : 'offline'}
                                                                    size="sm"
                                                                />
                                                            </td>
                                                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600 dark:text-gray-400 font-mono">
                                                                {device.macAddress || '-'}
                                                            </td>
                                                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600 dark:text-gray-400">
                                                                {device.manufacturer || '-'}
                                                            </td>
                                                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600 dark:text-gray-400">
                                                                {device.openPorts?.length || 0}
                                                            </td>
                                                            <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                                                <button
                                                                    onClick={() => setShowDeviceDetails(device)}
                                                                    className="text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300"
                                                                >
                                                                    –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                                                                </button>
                                                            </td>
                                                        </tr>
                                                    ))}
                                                </tbody>
                                            </table>
                                        </div>
                                    </Card>
                                )}

                                {/* –¢–æ–ø–æ–ª–æ–≥–∏—è —Å–µ—Ç–∏ */}
                                {selectedView === 'topology' && (
                                    <Card>
                                        <div className="p-6">
                                            <TopologyView devices={sortedDevices} />
                                        </div>
                                    </Card>
                                )}
                            </>
                        )}
                    </div>
                </div>
            </div>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ */}
            {showDeviceDetails && (
                <Modal
                    isOpen={true}
                    onClose={() => setShowDeviceDetails(null)}
                    title={`–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${showDeviceDetails.ip}`}
                    size="lg"
                >
                    <div className="space-y-6">
                        <div className="grid grid-cols-2 gap-4">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                                    IP –∞–¥—Ä–µ—Å
                                </label>
                                <div className="text-sm text-gray-900 dark:text-gray-100 font-mono">
                                    {showDeviceDetails.ip}
                                </div>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                                    –°—Ç–∞—Ç—É—Å
                                </label>
                                <StatusIndicator
                                    status={showDeviceDetails.status === 'online' ? 'online' : 'offline'}
                                    label={showDeviceDetails.status === 'online' ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'}
                                />
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                                    Hostname
                                </label>
                                <div className="text-sm text-gray-900 dark:text-gray-100">
                                    {showDeviceDetails.hostname || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                                </div>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                                    MAC –∞–¥—Ä–µ—Å
                                </label>
                                <div className="text-sm text-gray-900 dark:text-gray-100 font-mono">
                                    {showDeviceDetails.macAddress || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                                </div>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                                    –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å
                                </label>
                                <div className="text-sm text-gray-900 dark:text-gray-100">
                                    {showDeviceDetails.manufacturer || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                                </div>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                                    –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                                </label>
                                <div className="text-sm text-gray-900 dark:text-gray-100">
                                    {showDeviceDetails.deviceType || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                                </div>
                            </div>
                        </div>

                        {/* –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã */}
                        {showDeviceDetails.openPorts && showDeviceDetails.openPorts.length > 0 && (
                            <div>
                                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                    –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã ({showDeviceDetails.openPorts.length})
                                </label>
                                <div className="grid grid-cols-3 gap-2">
                                    {showDeviceDetails.openPorts.map(port => (
                                        <div
                                            key={port.port}
                                            className="px-3 py-2 bg-gray-100 dark:bg-gray-800 rounded-md text-sm text-center"
                                        >
                                            <div className="font-mono font-medium">{port.port}</div>
                                            <div className="text-xs text-gray-600 dark:text-gray-400">
                                                {port.protocol}
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        )}

                        {/* –°–µ—Ä–≤–∏—Å—ã */}
                        {showDeviceDetails.services && showDeviceDetails.services.length > 0 && (
                            <div>
                                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                    –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
                                </label>
                                <div className="space-y-2">
                                    {showDeviceDetails.services.map((service, index) => (
                                        <div
                                            key={index}
                                            className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-md"
                                        >
                                            <div>
                                                <div className="font-medium text-gray-900 dark:text-gray-100">
                                                    {service.name}
                                                </div>
                                                <div className="text-sm text-gray-600 dark:text-gray-400">
                                                    –ü–æ—Ä—Ç {service.port} ‚Ä¢ {service.version || '–í–µ—Ä—Å–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'}
                                                </div>
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        )}

                        <div className="flex justify-end space-x-3">
                            <Button
                                variant="outline"
                                onClick={() => setShowDeviceDetails(null)}
                            >
                                –ó–∞–∫—Ä—ã—Ç—å
                            </Button>
                        </div>
                    </div>
                </Modal>
            )}
        </div>
    );
};

export default ReconPage;
