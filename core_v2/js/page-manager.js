/**
 * PageManager - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–æ–π –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü –≤ SPA
 */
class PageManager extends ComponentBase {
    constructor() {
        super('PageManager');
        
        this.cache = new Map();
        this.loadingQueue = new Set();
        this.currentPageId = null;
        this.previousPageId = null;
        
        this.config = {
            pagesPath: './pages',
            cachePages: true,
            loadTimeout: 10000,
            enableTransitions: true,
            transitionDuration: 300
        };
        
        this.elements = {
            container: null,
            content: null,
            loading: null
        };
        
        console.log('üìÑ PageManager —Å–æ–∑–¥–∞–Ω');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
     */
    async doInit() {
        this.findPageElements();
        this.setupPageContainer();
        this.setupEventListeners();
        
        console.log('‚úÖ PageManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
     */
    findPageElements() {
        // –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü
        this.elements.container = document.querySelector('#page-container') || 
                                 document.querySelector('.page-container') ||
                                 document.querySelector('.main-content .page-container');
        
        // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        if (!this.elements.container) {
            const mainContent = document.querySelector('.main-content');
            if (mainContent) {
                this.elements.container = document.createElement('div');
                this.elements.container.id = 'page-container';
                this.elements.container.className = 'page-container';
                mainContent.appendChild(this.elements.container);
                console.log('üìÑ –°–æ–∑–¥–∞–Ω page-container');
            } else {
                throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω .main-content –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è page-container');
            }
        }

        // –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        this.elements.content = this.elements.container.querySelector('#page-content') ||
                               this.elements.container.querySelector('.page-content');
        
        if (!this.elements.content) {
            this.elements.content = document.createElement('div');
            this.elements.content.id = 'page-content';
            this.elements.content.className = 'page-content';
            this.elements.container.appendChild(this.elements.content);
            console.log('üìÑ –°–æ–∑–¥–∞–Ω page-content');
        }

        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        this.createLoadingIndicator();
        
        console.log('üîç –≠–ª–µ–º–µ–Ω—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞–π–¥–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã');
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    createLoadingIndicator() {
        this.elements.loading = document.createElement('div');
        this.elements.loading.id = 'page-loading';
        this.elements.loading.className = 'page-loading hidden';
        this.elements.loading.innerHTML = `
            <div class="loading-spinner">
                <div class="spinner"></div>
            </div>
            <div class="loading-text">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...</div>
        `;
        
        this.elements.container.appendChild(this.elements.loading);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
     */
    setupPageContainer() {
        if (!this.elements.container) return;

        // –î–æ–±–∞–≤–ª—è–µ–º CSS –∫–ª–∞—Å—Å—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
        this.elements.container.classList.add('spa-page-container');
        
        if (this.config.enableTransitions) {
            this.elements.container.style.transition = `opacity ${this.config.transitionDuration}ms ease-in-out`;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        this.injectPageStyles();
    }

    /**
     * –í–Ω–µ–¥—Ä–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç–∏–ª–µ–π
     */
    injectPageStyles() {
        const styleId = 'page-manager-styles';
        if (document.getElementById(styleId)) return;

        const styles = `
            <style id="${styleId}">
                .spa-page-container {
                    position: relative;
                    width: 100%;
                    height: 100%;
                    min-height: 400px;
                }
                
                .page-content {
                    width: 100%;
                    height: 100%;
                    opacity: 1;
                    transform: translateY(0);
                    transition: opacity 300ms ease-in-out, transform 300ms ease-in-out;
                }
                
                .page-content.page-entering {
                    opacity: 0;
                    transform: translateY(20px);
                }
                
                .page-content.page-exiting {
                    opacity: 0;
                    transform: translateY(-20px);
                }
                
                .page-loading {
                    position: absolute;
                    top: 50%;
                    left: 50%;
                    transform: translate(-50%, -50%);
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                    gap: 16px;
                    z-index: 10;
                }
                
                .page-loading.hidden {
                    display: none;
                }
                
                .loading-spinner {
                    display: flex;
                    align-items: center;
                    justify-content: center;
                }
                
                .spinner {
                    width: 32px;
                    height: 32px;
                    border: 3px solid var(--color-border, #e0e0e0);
                    border-top: 3px solid var(--color-primary, #218a8d);
                    border-radius: 50%;
                    animation: spin 1s linear infinite;
                }
                
                @keyframes spin {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); }
                }
                
                .loading-text {
                    font-size: 14px;
                    color: var(--color-text-secondary, #666);
                }
                
                .page-error {
                    padding: 32px;
                    text-align: center;
                    background: var(--color-surface, #fff);
                    border: 1px solid var(--color-border, #e0e0e0);
                    border-radius: 8px;
                    margin: 20px;
                }
                
                .page-error h2 {
                    color: var(--color-error, #d32f2f);
                    margin-bottom: 16px;
                }
                
                .page-error p {
                    color: var(--color-text-secondary, #666);
                    margin-bottom: 8px;
                }
            </style>
        `;

        document.head.insertAdjacentHTML('beforeend', styles);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —Å—Å—ã–ª–∫–∞–º —Å data-page
        this.addEventListener(document, 'click', (event) => {
            const pageLink = event.target.closest('[data-page]');
            if (pageLink) {
                event.preventDefault();
                const pageId = pageLink.dataset.page;
                this.loadPage(pageId);
            }
        });

        console.log('‚ö° –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ PageManager –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async loadPage(pageId, options = {}) {
        if (!pageId) {
            console.error('‚ùå PageId –Ω–µ —É–∫–∞–∑–∞–Ω');
            return false;
        }

        if (this.loadingQueue.has(pageId)) {
            console.log(`‚è≥ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageId} —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è`);
            return false;
        }

        if (pageId === this.currentPageId && !options.force) {
            console.log(`üìç –£–∂–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${pageId}`);
            return true;
        }

        console.log(`üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${pageId}`);

        this.loadingQueue.add(pageId);
        this.showLoadingIndicator();

        try {
            // –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            const pageHTML = await this.fetchPageHTML(pageId);
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
            if (this.config.enableTransitions) {
                await this.performPageTransition(pageHTML, pageId);
            } else {
                this.renderPage(pageHTML, pageId);
            }

            this.previousPageId = this.currentPageId;
            this.currentPageId = pageId;

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            await this.initializePageScripts(pageId);

            // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            this.emit('pageLoaded', {
                pageId,
                previousPageId: this.previousPageId,
                html: pageHTML,
                timestamp: Date.now()
            });

            console.log(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageId} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
            return true;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageId}:`, error);
            
            this.showPageError(pageId, error);
            
            this.emit('pageError', {
                pageId,
                error,
                timestamp: Date.now()
            });

            return false;

        } finally {
            this.loadingQueue.delete(pageId);
            this.hideLoadingIndicator();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async fetchPageHTML(pageId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (this.config.cachePages && this.cache.has(pageId)) {
            console.log(`üì¶ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageId} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –∫—ç—à–∞`);
            return this.cache.get(pageId);
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
        const pageURL = `${this.config.pagesPath}/${pageId}.html`;
        
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), this.config.loadTimeout);

        try {
            const response = await fetch(pageURL, {
                signal: controller.signal,
                headers: {
                    'Accept': 'text/html',
                    'Cache-Control': 'no-cache'
                }
            });

            clearTimeout(timeoutId);

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const html = await response.text();

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            if (this.config.cachePages) {
                this.cache.set(pageId, html);
            }

            console.log(`üåê –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageId} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞`);
            return html;

        } catch (error) {
            clearTimeout(timeoutId);
            if (error.name === 'AbortError') {
                throw new Error(`–¢–∞–π–º-–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageId}`);
            }
            throw error;
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
     */
    async performPageTransition(newHTML, pageId) {
        const content = this.elements.content;
        
        if (!content) {
            this.renderPage(newHTML, pageId);
            return;
        }

        // –§–∞–∑–∞ –≤—ã—Ö–æ–¥–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (this.currentPageId) {
            content.classList.add('page-exiting');
            
            await new Promise(resolve => 
                setTimeout(resolve, this.config.transitionDuration / 2)
            );
        }

        // –†–µ–Ω–¥–µ—Ä–∏–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        this.renderPage(newHTML, pageId);

        // –§–∞–∑–∞ –≤—Ö–æ–¥–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        content.classList.remove('page-exiting');
        content.classList.add('page-entering');

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—Ö–æ–¥–∞
        requestAnimationFrame(() => {
            content.classList.remove('page-entering');
        });
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    renderPage(html, pageId) {
        if (!this.elements.content) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        this.elements.content.innerHTML = html;
        this.elements.content.setAttribute('data-page', pageId);

        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–∞—á–∞–ª—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (this.elements.container) {
            this.elements.container.scrollTop = 0;
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
     */
    async initializePageScripts(pageId) {
        // –í—ã–ø–æ–ª–Ω—è–µ–º inline —Å–∫—Ä–∏–ø—Ç—ã –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ
        const scripts = this.elements.content.querySelectorAll('script');
        
        for (const script of scripts) {
            if (script.src) {
                // –í–Ω–µ—à–Ω–∏–π —Å–∫—Ä–∏–ø—Ç
                await this.loadExternalScript(script.src);
            } else if (script.textContent.trim()) {
                // Inline —Å–∫—Ä–∏–ø—Ç
                try {
                    new Function(script.textContent)();
                } catch (error) {
                    console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è inline —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageId}:`, error);
                }
            }
        }

        // –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const initFunctionName = `init${pageId.charAt(0).toUpperCase() + pageId.slice(1)}Page`;
        if (typeof window[initFunctionName] === 'function') {
            try {
                await window[initFunctionName](this.elements.content);
                console.log(`‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ${initFunctionName}`);
            } catch (error) {
                console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ${initFunctionName}:`, error);
            }
        }

        // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        this.emit('pageScriptsReady', { pageId });
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
     */
    loadExternalScript(src) {
        return new Promise((resolve, reject) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —É–∂–µ —Å–∫—Ä–∏–ø—Ç
            if (document.querySelector(`script[src="${src}"]`)) {
                resolve();
                return;
            }

            const script = document.createElement('script');
            script.src = src;
            script.onload = resolve;
            script.onerror = () => reject(new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫—Ä–∏–ø—Ç: ${src}`));
            
            document.head.appendChild(script);
        });
    }

    /**
     * –ü–æ–∫–∞–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    showLoadingIndicator() {
        if (this.elements.loading) {
            this.elements.loading.classList.remove('hidden');
        }
    }

    /**
     * –°–∫—Ä—ã—Ç–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    hideLoadingIndicator() {
        if (this.elements.loading) {
            this.elements.loading.classList.add('hidden');
        }
    }

    /**
     * –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    showPageError(pageId, error) {
        const errorHTML = `
            <div class="page-error">
                <h2>‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã</h2>
                <p><strong>–°—Ç—Ä–∞–Ω–∏—Ü–∞:</strong> ${pageId}</p>
                <p><strong>–û—à–∏–±–∫–∞:</strong> ${error.message}</p>
                <p><strong>–í—Ä–µ–º—è:</strong> ${new Date().toLocaleString()}</p>
                <button onclick="window.app?.pageManager?.loadPage('${pageId}', { force: true })" 
                        class="btn btn--primary">
                    –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </button>
                <button onclick="window.app?.navigateToPage('dashboard')" 
                        class="btn btn--secondary">
                    –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
                </button>
            </div>
        `;

        this.renderPage(errorHTML, `error-${pageId}`);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    getCurrentPageId() {
        return this.currentPageId;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    getPreviousPageId() {
        return this.previousPageId;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
     */
    isPageLoading(pageId) {
        return this.loadingQueue.has(pageId);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –∫—ç—à–µ
     */
    isPageCached(pageId) {
        return this.cache.has(pageId);
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
     */
    clearCache() {
        this.cache.clear();
        console.log('üóëÔ∏è –ö—ç—à —Å—Ç—Ä–∞–Ω–∏—Ü –æ—á–∏—â–µ–Ω');
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    clearPageCache(pageId) {
        if (this.cache.has(pageId)) {
            this.cache.delete(pageId);
            console.log(`üóëÔ∏è –ö—ç—à —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageId} –æ—á–∏—â–µ–Ω`);
            return true;
        }
        return false;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
     */
    getCacheStats() {
        return {
            size: this.cache.size,
            pages: Array.from(this.cache.keys()),
            loadingQueue: Array.from(this.loadingQueue),
            currentPage: this.currentPageId,
            previousPage: this.previousPageId
        };
    }

    /**
     * –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async preloadPage(pageId) {
        if (this.cache.has(pageId) || this.loadingQueue.has(pageId)) {
            return;
        }

        try {
            console.log(`üì¶ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${pageId}`);
            await this.fetchPageHTML(pageId);
            console.log(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageId} –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–∞`);
        } catch (error) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageId}:`, error);
        }
    }

    /**
     * –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
     */
    async preloadPages(pageIds) {
        const promises = pageIds.map(pageId => this.preloadPage(pageId));
        await Promise.allSettled(promises);
    }

    /**
     * –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async reloadCurrentPage() {
        if (!this.currentPageId) {
            console.warn('‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏');
            return false;
        }

        // –û—á–∏—â–∞–µ–º –∫—ç—à —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        this.clearPageCache(this.currentPageId);
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        return await this.loadPage(this.currentPageId, { force: true });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
     */
    getPageInfo() {
        return {
            current: this.currentPageId,
            previous: this.previousPageId,
            loading: Array.from(this.loadingQueue),
            cached: Array.from(this.cache.keys()),
            config: this.config
        };
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
     */
    async doDestroy() {
        // –û—á–∏—â–∞–µ–º –∫—ç—à
        this.clearCache();
        
        // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥–∏
        this.loadingQueue.clear();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.currentPageId = null;
        this.previousPageId = null;
        
        console.log('üóëÔ∏è PageManager —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.PageManager = PageManager;

console.log('üìÑ PageManager –∑–∞–≥—Ä—É–∂–µ–Ω');