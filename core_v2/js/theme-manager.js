/**
 * IP Roast Enterprise Core v2 - Theme Manager
 * –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–∞–º–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
 * Version: 2.0.0
 */

(function() {
    'use strict';

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
    if (window.IPRoastCore?.ThemeManager) {
        console.log('‚ö†Ô∏è ThemeManager v2 —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        return window.IPRoastCore.ThemeManager;
    }

    class ThemeManager {
        constructor(options = {}) {
            this.version = '2.0.0';
            this.config = {
                defaultTheme: 'dark',
                availableThemes: ['light', 'dark', 'auto'],
                storageKey: 'ip-roast-theme-v2',
                animationDuration: 300,
                respectSystemTheme: true,
                ...options
            };

            this.state = {
                currentTheme: null,
                systemTheme: null,
                isTransitioning: false,
                initialized: false
            };

            this.elements = {
                root: document.documentElement,
                body: document.body,
                toggleButtons: new Set(),
                themeIndicators: new Set()
            };

            this.listeners = new Map();
            this.mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');

            // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            this.handleSystemThemeChange = this.handleSystemThemeChange.bind(this);
            this.handleStorageChange = this.handleStorageChange.bind(this);
            
            console.log(`üé® ThemeManager v${this.version} —Å–æ–∑–¥–∞–Ω`);
        }

        /**
         * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–µ–º
         */
        async init() {
            if (this.state.initialized) {
                console.log('‚ö†Ô∏è ThemeManager —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                return;
            }

            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ThemeManager v2...');

            try {
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é —Ç–µ–º—É
                this.state.systemTheme = this.mediaQuery.matches ? 'dark' : 'light';
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É
                await this.loadSavedTheme();
                
                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏
                this.setupEventListeners();
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                this.initializeThemeControls();
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
                await this.applyTheme(this.state.currentTheme, false);
                
                this.state.initialized = true;
                this.emit('initialized', { theme: this.state.currentTheme });
                
                console.log(`‚úÖ ThemeManager v2 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ç–µ–º–æ–π: ${this.state.currentTheme}`);
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ThemeManager:', error);
                throw error;
            }
        }

        /**
         * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Ç–µ–º—ã
         */
        async loadSavedTheme() {
            try {
                const savedTheme = localStorage.getItem(this.config.storageKey);
                
                if (savedTheme && this.config.availableThemes.includes(savedTheme)) {
                    this.state.currentTheme = savedTheme;
                } else if (this.config.respectSystemTheme) {
                    this.state.currentTheme = 'auto';
                } else {
                    this.state.currentTheme = this.config.defaultTheme;
                }

                console.log(`üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Ç–µ–º–∞: ${this.state.currentTheme}`);
            } catch (error) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–º—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
                this.state.currentTheme = this.config.defaultTheme;
            }
        }

        /**
         * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
         */
        setupEventListeners() {
            // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
            this.mediaQuery.addEventListener('change', this.handleSystemThemeChange);
            
            // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –≤–∫–ª–∞–¥–∫–∞—Ö
            window.addEventListener('storage', this.handleStorageChange);
            
            // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
            document.addEventListener('keydown', (e) => {
                if (e.ctrlKey && e.shiftKey && e.key === 'T') {
                    e.preventDefault();
                    this.toggleTheme();
                }
            });

            console.log('‚ö° –°–ª—É—à–∞—Ç–µ–ª–∏ ThemeManager –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        }

        /**
         * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–æ–π
         */
        initializeThemeControls() {
            // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
            const toggleSelectors = [
                '[data-theme-toggle]',
                '.theme-toggle',
                '#theme-toggle-btn',
                '#theme-toggle'
            ];

            toggleSelectors.forEach(selector => {
                document.querySelectorAll(selector).forEach(btn => {
                    this.registerToggleButton(btn);
                });
            });

            // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ç–µ–º—ã
            document.querySelectorAll('[data-theme-indicator]').forEach(indicator => {
                this.registerThemeIndicator(indicator);
            });

            console.log(`üîò –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${this.elements.toggleButtons.size} –∫–Ω–æ–ø–æ–∫, ${this.elements.themeIndicators.size} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤`);
        }

        /**
         * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
         */
        registerToggleButton(button) {
            if (this.elements.toggleButtons.has(button)) return;

            const handleClick = (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.toggleTheme();
            };

            button.addEventListener('click', handleClick);
            button._themeToggleHandler = handleClick;
            this.elements.toggleButtons.add(button);
            
            this.updateToggleButton(button);
        }

        /**
         * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Ç–µ–º—ã
         */
        registerThemeIndicator(indicator) {
            this.elements.themeIndicators.add(indicator);
            this.updateThemeIndicator(indicator);
        }

        /**
         * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
         */
        async toggleTheme() {
            if (this.state.isTransitioning) {
                console.log('‚è≥ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ');
                return;
            }

            const currentTheme = this.getEffectiveTheme();
            const newTheme = currentTheme === 'light' ? 'dark' : 'light';
            
            console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã: ${currentTheme} ‚Üí ${newTheme}`);
            
            await this.setTheme(newTheme);
        }

        /**
         * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã
         */
        async setTheme(theme) {
            if (!this.config.availableThemes.includes(theme)) {
                console.warn(`‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Ç–µ–º–∞: ${theme}`);
                return false;
            }

            if (theme === this.state.currentTheme) {
                console.log(`‚ÑπÔ∏è –¢–µ–º–∞ ${theme} —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞`);
                return true;
            }

            const previousTheme = this.state.currentTheme;
            this.state.currentTheme = theme;

            try {
                await this.applyTheme(theme, true);
                this.saveTheme(theme);
                
                this.emit('themeChanged', {
                    theme,
                    previousTheme,
                    effectiveTheme: this.getEffectiveTheme()
                });

                return true;
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–º—ã:', error);
                this.state.currentTheme = previousTheme;
                return false;
            }
        }

        /**
         * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –∫ DOM
         */
        async applyTheme(theme, animate = false) {
            this.state.isTransitioning = animate;
            
            const effectiveTheme = this.resolveTheme(theme);
            
            console.log(`üé® –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã: ${theme} (—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è: ${effectiveTheme})`);

            try {
                // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞
                if (animate) {
                    this.elements.root.style.transition = `color-scheme ${this.config.animationDuration}ms ease`;
                    this.elements.body.style.transition = `background-color ${this.config.animationDuration}ms ease, color ${this.config.animationDuration}ms ease`;
                }

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
                this.elements.root.setAttribute('data-theme', theme);
                this.elements.root.setAttribute('data-effective-theme', effectiveTheme);
                this.elements.root.style.colorScheme = effectiveTheme;

                // CSS –∫–ª–∞—Å—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                this.elements.root.classList.remove('theme-light', 'theme-dark', 'theme-auto');
                this.elements.root.classList.add(`theme-${theme}`);

                this.elements.body.classList.remove('light-theme', 'dark-theme');
                this.elements.body.classList.add(`${effectiveTheme}-theme`);

                // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                this.updateAllControls();

                // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
                if (animate) {
                    await new Promise(resolve => setTimeout(resolve, this.config.animationDuration));
                    this.elements.root.style.transition = '';
                    this.elements.body.style.transition = '';
                }

                this.state.isTransitioning = false;
                
                console.log(`‚úÖ –¢–µ–º–∞ ${theme} –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
            } catch (error) {
                this.state.isTransitioning = false;
                throw error;
            }
        }

        /**
         * –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ç–µ–º—ã
         */
        resolveTheme(theme) {
            if (theme === 'auto') {
                return this.state.systemTheme || 'dark';
            }
            return theme;
        }

        /**
         * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ç–µ–º—ã
         */
        getEffectiveTheme() {
            return this.resolveTheme(this.state.currentTheme);
        }

        /**
         * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
         */
        updateAllControls() {
            this.elements.toggleButtons.forEach(btn => this.updateToggleButton(btn));
            this.elements.themeIndicators.forEach(indicator => this.updateThemeIndicator(indicator));
        }

        /**
         * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
         */
        updateToggleButton(button) {
            const effectiveTheme = this.getEffectiveTheme();
            const currentTheme = this.state.currentTheme;
            
            const config = {
                light: { icon: 'üåô', text: '–¢–µ–º–Ω–∞—è —Ç–µ–º–∞', class: 'theme-light' },
                dark: { icon: '‚òÄÔ∏è', text: '–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞', class: 'theme-dark' },
                auto: { icon: 'üåì', text: '–ê–≤—Ç–æ —Ç–µ–º–∞', class: 'theme-auto' }
            };

            const themeConfig = config[currentTheme] || config.dark;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            const iconEl = button.querySelector('.theme-icon') || button.querySelector('i') || button;
            if (iconEl) {
                iconEl.textContent = themeConfig.icon;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
            button.setAttribute('data-theme', currentTheme);
            button.setAttribute('data-effective-theme', effectiveTheme);
            button.setAttribute('title', themeConfig.text);
            button.setAttribute('aria-label', themeConfig.text);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã
            button.classList.remove('theme-light', 'theme-dark', 'theme-auto');
            button.classList.add(themeConfig.class);
        }

        /**
         * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Ç–µ–º—ã
         */
        updateThemeIndicator(indicator) {
            const theme = this.state.currentTheme;
            const effectiveTheme = this.getEffectiveTheme();
            
            indicator.setAttribute('data-theme', theme);
            indicator.setAttribute('data-effective-theme', effectiveTheme);
            indicator.textContent = `${theme} (${effectiveTheme})`;
        }

        /**
         * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
         */
        saveTheme(theme) {
            try {
                localStorage.setItem(this.config.storageKey, theme);
                console.log(`üíæ –¢–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${theme}`);
            } catch (error) {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–º—É:', error);
            }
        }

        /**
         * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
         */
        handleSystemThemeChange(e) {
            const newSystemTheme = e.matches ? 'dark' : 'light';
            console.log(`üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è —Ç–µ–º–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å: ${this.state.systemTheme} ‚Üí ${newSystemTheme}`);
            
            this.state.systemTheme = newSystemTheme;
            
            if (this.state.currentTheme === 'auto') {
                this.applyTheme('auto', true);
            }
            
            this.emit('systemThemeChanged', { systemTheme: newSystemTheme });
        }

        /**
         * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ localStorage
         */
        handleStorageChange(e) {
            if (e.key === this.config.storageKey && e.newValue !== this.state.currentTheme) {
                console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã –∏–∑ –¥—Ä—É–≥–æ–π –≤–∫–ª–∞–¥–∫–∏: ${e.newValue}`);
                if (e.newValue && this.config.availableThemes.includes(e.newValue)) {
                    this.setTheme(e.newValue);
                }
            }
        }

        /**
         * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
         */
        getState() {
            return {
                currentTheme: this.state.currentTheme,
                effectiveTheme: this.getEffectiveTheme(),
                systemTheme: this.state.systemTheme,
                availableThemes: [...this.config.availableThemes],
                isTransitioning: this.state.isTransitioning,
                initialized: this.state.initialized,
                controlsCount: {
                    toggleButtons: this.elements.toggleButtons.size,
                    indicators: this.elements.themeIndicators.size
                }
            };
        }

        /**
         * –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π
         */
        on(event, callback) {
            if (!this.listeners.has(event)) {
                this.listeners.set(event, new Set());
            }
            this.listeners.get(event).add(callback);
        }

        off(event, callback) {
            if (this.listeners.has(event)) {
                this.listeners.get(event).delete(callback);
            }
        }

        emit(event, data) {
            if (this.listeners.has(event)) {
                this.listeners.get(event).forEach(callback => {
                    try {
                        callback(data);
                    } catch (error) {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ ${event}:`, error);
                    }
                });
            }

            // –ì–ª–æ–±–∞–ª—å–Ω–æ–µ DOM —Å–æ–±—ã—Ç–∏–µ
            document.dispatchEvent(new CustomEvent(`theme:${event}`, {
                detail: { ...data, manager: this }
            }));
        }

        /**
         * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
         */
        destroy() {
            // –£–¥–∞–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏
            this.mediaQuery.removeEventListener('change', this.handleSystemThemeChange);
            window.removeEventListener('storage', this.handleStorageChange);
            
            // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
            this.elements.toggleButtons.forEach(btn => {
                if (btn._themeToggleHandler) {
                    btn.removeEventListener('click', btn._themeToggleHandler);
                    delete btn._themeToggleHandler;
                }
            });
            
            // –û—á–∏—â–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            this.elements.toggleButtons.clear();
            this.elements.themeIndicators.clear();
            this.listeners.clear();
            
            console.log('üóëÔ∏è ThemeManager v2 —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
        }
    }

    // –≠–∫—Å–ø–æ—Ä—Ç
    if (!window.IPRoastCore) window.IPRoastCore = {};
    window.IPRoastCore.ThemeManager = ThemeManager;
    
    console.log('‚úÖ ThemeManager v2 –∑–∞–≥—Ä—É–∂–µ–Ω');
    
    return ThemeManager;
})();