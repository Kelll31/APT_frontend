/**
 * –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
 */
class ComponentBase {
    constructor(name) {
        this.name = name;
        this.isInitialized = false;
        this.isDestroyed = false;
        this.element = null;
        this.eventListeners = [];
        this.eventHandlers = new Map();
        this.childComponents = new Map();
        this.abortController = null;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    async init() {
        if (this.isInitialized) {
            console.warn(`‚ö†Ô∏è ${this.name}: –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏`);
            return;
        }
        
        if (this.isDestroyed) {
            throw new Error(`${this.name}: –ø–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞`);
        }
        
        try {
            console.log(`üöÄ ${this.name}: –Ω–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏`);
            
            // –°–æ–∑–¥–∞–µ–º AbortController –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–π
            this.abortController = new AbortController();
            
            // –í—ã–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –º–µ—Ç–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            await this.doInit();
            
            this.isInitialized = true;
            console.log(`‚úÖ ${this.name}: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
            
            // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            this.emit('initialized');
            
        } catch (error) {
            console.error(`‚ùå ${this.name}: –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:`, error);
            await this.destroy();
            throw error;
        }
    }

    /**
     * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –º–µ—Ç–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ –¥–æ—á–µ—Ä–Ω–µ–º –∫–ª–∞—Å—Å–µ)
     */
    async doInit() {
        // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ –¥–æ—á–µ—Ä–Ω–µ–º –∫–ª–∞—Å—Å–µ
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    async destroy() {
        if (this.isDestroyed) {
            console.warn(`‚ö†Ô∏è ${this.name}: –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —É–∂–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω`);
            return;
        }
        
        try {
            console.log(`üóëÔ∏è ${this.name}: –Ω–∞—á–∞–ª–æ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è`);
            
            // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            if (this.abortController) {
                this.abortController.abort();
            }
            
            // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            for (const [childName, childComponent] of this.childComponents) {
                try {
                    await childComponent.destroy();
                    console.log(`‚úÖ ${this.name}: –¥–æ—á–µ—Ä–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç "${childName}" —É–Ω–∏—á—Ç–æ–∂–µ–Ω`);
                } catch (error) {
                    console.error(`‚ùå ${this.name}: –æ—à–∏–±–∫–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ "${childName}":`, error);
                }
            }
            this.childComponents.clear();
            
            // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.removeAllEventListeners();
            
            // –í—ã–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –º–µ—Ç–æ–¥ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è
            await this.doDestroy();
            
            // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫–∏
            this.element = null;
            this.isDestroyed = true;
            this.isInitialized = false;
            
            console.log(`‚úÖ ${this.name}: —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
            
        } catch (error) {
            console.error(`‚ùå ${this.name}: –æ—à–∏–±–∫–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è:`, error);
            this.isDestroyed = true;
        }
    }

    /**
     * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –º–µ—Ç–æ–¥ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ –¥–æ—á–µ—Ä–Ω–µ–º –∫–ª–∞—Å—Å–µ)
     */
    async doDestroy() {
        // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ –¥–æ—á–µ—Ä–Ω–µ–º –∫–ª–∞—Å—Å–µ
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–æ–π
     */
    addEventListener(element, event, handler, options = {}) {
        const boundHandler = handler.bind(this);
        element.addEventListener(event, boundHandler, options);
        
        this.eventListeners.push({
            element,
            event,
            handler: boundHandler,
            options
        });
        
        return boundHandler;
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
     */
    removeEventListener(element, event, handler) {
        element.removeEventListener(event, handler);
        
        const index = this.eventListeners.findIndex(listener => 
            listener.element === element &&
            listener.event === event &&
            listener.handler === handler
        );
        
        if (index !== -1) {
            this.eventListeners.splice(index, 1);
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    removeAllEventListeners() {
        for (const listener of this.eventListeners) {
            try {
                listener.element.removeEventListener(listener.event, listener.handler, listener.options);
            } catch (error) {
                console.warn(`‚ö†Ô∏è ${this.name}: –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π:`, error);
            }
        }
        this.eventListeners.length = 0;
        console.log(`üßπ ${this.name}: –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —É–¥–∞–ª–µ–Ω—ã`);
    }

    /**
     * –°–∏—Å—Ç–µ–º–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    on(event, handler) {
        if (!this.eventHandlers.has(event)) {
            this.eventHandlers.set(event, []);
        }
        this.eventHandlers.get(event).push(handler);
    }

    off(event, handler) {
        if (this.eventHandlers.has(event)) {
            const handlers = this.eventHandlers.get(event);
            const index = handlers.indexOf(handler);
            if (index !== -1) {
                handlers.splice(index, 1);
            }
        }
    }

    emit(event, data) {
        if (this.eventHandlers.has(event)) {
            const handlers = this.eventHandlers.get(event);
            handlers.forEach(handler => {
                try {
                    handler.call(this, data);
                } catch (error) {
                    console.error(`‚ùå ${this.name}: –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è "${event}":`, error);
                }
            });
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    addChild(name, component) {
        if (this.childComponents.has(name)) {
            console.warn(`‚ö†Ô∏è ${this.name}: –¥–æ—á–µ—Ä–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç "${name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
            return;
        }
        
        this.childComponents.set(name, component);
        console.log(`‚ûï ${this.name}: –¥–æ–±–∞–≤–ª–µ–Ω –¥–æ—á–µ—Ä–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç "${name}"`);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    getChild(name) {
        return this.childComponents.get(name);
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    async removeChild(name) {
        const child = this.childComponents.get(name);
        if (child) {
            await child.destroy();
            this.childComponents.delete(name);
            console.log(`‚ûñ ${this.name}: —É–¥–∞–ª–µ–Ω –¥–æ—á–µ—Ä–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç "${name}"`);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ AbortController –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–π
     */
    createAbortController() {
        const controller = new AbortController();
        
        // –ü—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        this.on('destroy', () => {
            controller.abort();
        });
        
        return controller;
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ DOM
     */
    findElement(selector) {
        if (this.element) {
            return this.element.querySelector(selector);
        }
        return document.querySelector(selector);
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM
     */
    findElements(selector) {
        if (this.element) {
            return this.element.querySelectorAll(selector);
        }
        return document.querySelectorAll(selector);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    isReady() {
        return this.isInitialized && !this.isDestroyed;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
     */
    getInfo() {
        return {
            name: this.name,
            isInitialized: this.isInitialized,
            isDestroyed: this.isDestroyed,
            hasElement: !!this.element,
            eventListeners: this.eventListeners.length,
            childComponents: Array.from(this.childComponents.keys())
        };
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    log(...args) {
        console.log(`[${this.name}]`, ...args);
    }

    warn(...args) {
        console.warn(`[${this.name}]`, ...args);
    }

    error(...args) {
        console.error(`[${this.name}]`, ...args);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.ComponentBase = ComponentBase;
console.log('‚úÖ ComponentBase –∑–∞–≥—Ä—É–∂–µ–Ω');