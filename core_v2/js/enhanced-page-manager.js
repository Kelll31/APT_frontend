/**
 * Enhanced PageManager - –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É HTML, CSS –∏ JS –∏–∑ –ø–∞–ø–∫–∏ pages/
 * Version: 3.1.0-Fixed (12 Aug 2025)
 * 
 * –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
 * ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥ registerPage –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –º–æ–¥—É–ª—è–º–∏
 * ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü
 * ‚úÖ –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ —Å–æ–±—ã—Ç–∏–π
 */

class EnhancedPageManager extends ComponentBase {
    constructor() {
        super('EnhancedPageManager');

        // ===== –ù–û–í–û–ï: –†–µ–µ—Å—Ç—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü =====
        this.registeredPages = new Map();
        this.pageInstances = new Map();

        // –ö—ç—à –¥–ª—è –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü
        this.cache = {
            html: new Map(),
            css: new Map(),
            js: new Map(),
            modules: new Map()
        };

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        this.loadingQueue = new Set();
        this.currentPageId = null;
        this.previousPageId = null;
        this.loadedStyles = new Set();
        this.loadedScripts = new Set();

        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        this.config = {
            pagesPath: './pages',
            cachePages: true,
            loadTimeout: 15000,
            enableTransitions: true,
            transitionDuration: 300,
            enableScripts: true,
            enableStyles: true,
            cleanupOnNavigation: true
        };

        // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
        this.elements = {
            container: null,
            content: null,
            loading: null,
            styleContainer: null
        };

        console.log('üìÑ Enhanced PageManager v3.1-Fixed —Å–æ–∑–¥–∞–Ω');
    }

    /**
     * ===== –ù–û–í–û–ï API: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –°–¢–†–ê–ù–ò–¶ =====
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –µ—ë –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏ —Ö—É–∫–∞–º–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
     */
    registerPage(pageId, config = {}) {
        try {
            const pageConfig = {
                title: config.title || pageId,
                module: config.module || null,
                activate: config.activate || (() => { }),
                deactivate: config.deactivate || (() => { }),
                cleanup: config.cleanup || (() => { }),
                initialized: false,
                ...config
            };

            this.registeredPages.set(pageId, pageConfig);

            // –ï—Å–ª–∏ –µ—Å—Ç—å –º–æ–¥—É–ª—å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä
            if (config.module) {
                this.pageInstances.set(pageId, config.module);
            }

            console.log(`üìã –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞: ${pageId}`, pageConfig);
            this.emit('pageRegistered', { pageId, config: pageConfig });

            return true;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageId}:`, error);
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    getPageConfig(pageId) {
        return this.registeredPages.get(pageId) || null;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥—É–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    getPageInstance(pageId) {
        return this.pageInstances.get(pageId) || null;
    }

    /**
     * –û—Ç–º–µ–Ω—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    unregisterPage(pageId) {
        const config = this.registeredPages.get(pageId);
        if (config) {
            // –í—ã–∑—ã–≤–∞–µ–º cleanup –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            if (typeof config.cleanup === 'function') {
                try {
                    config.cleanup();
                } catch (error) {
                    console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ cleanup –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ${pageId}:`, error);
                }
            }

            this.registeredPages.delete(pageId);
            this.pageInstances.delete(pageId);
            this.emit('pageUnregistered', { pageId });
            console.log(`üóëÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞: ${pageId}`);
            return true;
        }
        return false;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
     */
    async doInit() {
        try {
            this.findPageElements();
            this.setupStyleContainer();
            this.setupEventListeners();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
            this.initializeTransitionStyles();

            console.log('‚úÖ Enhanced PageManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            this.emit('managerReady');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Enhanced PageManager:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü
     */
    findPageElements() {
        // –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü
        this.elements.container = document.querySelector('#page-container') ||
            document.querySelector('.page-container');

        if (!this.elements.container) {
            const mainContent = document.querySelector('.main-content') ||
                document.querySelector('main') ||
                document.body;

            this.elements.container = document.createElement('div');
            this.elements.container.id = 'page-container';
            this.elements.container.className = 'page-container';
            mainContent.appendChild(this.elements.container);
            console.log('üìÑ –°–æ–∑–¥–∞–Ω page-container');
        }

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        this.elements.content = this.elements.container.querySelector('#page-content') ||
            this.elements.container.querySelector('.page-content');

        if (!this.elements.content) {
            this.elements.content = document.createElement('div');
            this.elements.content.id = 'page-content';
            this.elements.content.className = 'page-content';
            this.elements.container.appendChild(this.elements.content);
        }

        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        this.createLoadingIndicator();
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —Å—Ç–∏–ª–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü
     */
    setupStyleContainer() {
        this.elements.styleContainer = document.getElementById('page-styles-container');

        if (!this.elements.styleContainer) {
            this.elements.styleContainer = document.createElement('div');
            this.elements.styleContainer.id = 'page-styles-container';
            document.head.appendChild(this.elements.styleContainer);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    createLoadingIndicator() {
        this.elements.loading = document.createElement('div');
        this.elements.loading.id = 'page-loading';
        this.elements.loading.className = 'page-loading hidden';
        this.elements.loading.innerHTML = `
            <div class="loading-spinner">
                <div class="spinner"></div>
                <p class="loading-text">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...</p>
            </div>
        `;
        this.elements.container.appendChild(this.elements.loading);
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Å—Ç–∏–ª–µ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
     */
    initializeTransitionStyles() {
        const styleId = 'enhanced-page-manager-styles';
        if (document.getElementById(styleId)) return;

        const style = document.createElement('style');
        style.id = styleId;
        style.textContent = `
            .page-container {
                position: relative;
                width: 100%;
                min-height: 400px;
            }
            .page-content {
                transition: opacity ${this.config.transitionDuration}ms ease-in-out;
            }
            .page-loading {
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                display: flex;
                align-items: center;
                justify-content: center;
                background: rgba(var(--bg-color-rgb, 255, 255, 255), 0.9);
                z-index: 1000;
                transition: opacity 200ms ease-in-out;
            }
            .page-loading.hidden {
                opacity: 0;
                pointer-events: none;
            }
            .loading-spinner {
                text-align: center;
            }
            .spinner {
                width: 40px;
                height: 40px;
                border: 3px solid rgba(var(--accent-color-rgb, 0, 123, 255), 0.2);
                border-top: 3px solid var(--accent-color, #007bff);
                border-radius: 50%;
                animation: spin 1s linear infinite;
                margin: 0 auto 16px;
            }
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
            .page-error {
                padding: 20px;
                background: #f8d7da;
                border: 1px solid #f5c6cb;
                border-radius: 8px;
                color: #721c24;
                margin: 20px;
            }
        `;
        document.head.appendChild(style);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
        window.addEventListener('popstate', (event) => {
            if (event.state && event.state.pageId) {
                this.loadPage(event.state.pageId, { skipTransition: false });
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        window.addEventListener('error', (event) => {
            if (event.target && event.target.src) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–∞:', event.target.src);
            }
        });
    }

    /**
     * ===== –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î –ó–ê–ì–†–£–ó–ö–ò –°–¢–†–ê–ù–ò–¶–´ (–£–õ–£–ß–®–ï–ù–ù–´–ô) =====
     */
    async loadPage(pageId, options = {}) {
        const { skipTransition = false, force = false, updateHistory = true } = options;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if (this.loadingQueue.has(pageId) && !force) {
            console.log(`‚è≥ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageId} —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è`);
            return false;
        }

        // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ –Ω–µ —Ñ–æ—Ä—Å–∏—Ä—É–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É
        if (pageId === this.currentPageId && !force) {
            console.log(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageId} —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞`);
            return true;
        }

        this.loadingQueue.add(pageId);
        const previousPageConfig = this.getPageConfig(this.currentPageId);

        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            if (!skipTransition) {
                this.showLoadingState();
            }

            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (this.config.cleanupOnNavigation && this.currentPageId) {
                await this.cleanupPage(this.currentPageId);
            }

            // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
            const [html, css, js] = await Promise.all([
                this.loadPageHTML(pageId),
                this.loadPageCSS(pageId),
                this.loadPageJS(pageId)
            ]);

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ—Å—É—Ä—Å—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
            if (css && this.config.enableStyles) {
                await this.applyPageStyles(pageId, css);
            }

            if (html) {
                await this.renderPageHTML(pageId, html, skipTransition);
            }

            if (js && this.config.enableScripts) {
                await this.executePageScript(pageId, js);
            }

            // ===== –ù–û–í–û–ï: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º =====
            await this.handlePageLifecycle(pageId, previousPageConfig);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –±—Ä–∞—É–∑–µ—Ä–∞
            if (updateHistory && pageId !== this.currentPageId) {
                this.updateBrowserHistory(pageId);
            }

            // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            if (!skipTransition) {
                this.hideLoadingState();
            }

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            this.emit('pageLoaded', {
                pageId,
                previousPageId: this.previousPageId,
                hasHTML: !!html,
                hasCSS: !!css,
                hasJS: !!js,
                loadTime: Date.now()
            });

            console.log(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ¬´${pageId}¬ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞`);
            return true;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ¬´${pageId}¬ª:`, error);
            this.showErrorState(pageId, error);
            this.emit('pageError', { pageId, error, previousPageId: this.currentPageId });
            return false;
        } finally {
            this.loadingQueue.delete(pageId);
        }
    }

    /**
     * ===== –ù–û–í–û–ï: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü =====
     */
    async handlePageLifecycle(newPageId, previousPageConfig) {
        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        if (previousPageConfig && this.currentPageId) {
            try {
                if (typeof previousPageConfig.deactivate === 'function') {
                    await previousPageConfig.deactivate();
                }
                this.emit('pageDeactivate', {
                    pageId: this.currentPageId,
                    nextPageId: newPageId
                });
            } catch (error) {
                console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${this.currentPageId}:`, error);
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        this.previousPageId = this.currentPageId;
        this.currentPageId = newPageId;

        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        const newPageConfig = this.getPageConfig(newPageId);
        if (newPageConfig) {
            try {
                if (typeof newPageConfig.activate === 'function') {
                    await newPageConfig.activate();
                }
                newPageConfig.initialized = true;
                this.emit('pageActivate', {
                    pageId: newPageId,
                    previousPageId: this.previousPageId
                });
            } catch (error) {
                console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${newPageId}:`, error);
            }
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ HTML —Ñ–∞–π–ª–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async loadPageHTML(pageId) {
        if (this.config.cachePages && this.cache.html.has(pageId)) {
            return this.cache.html.get(pageId);
        }

        try {
            const response = await fetch(`${this.config.pagesPath}/${pageId}/${pageId}.html`, {
                cache: this.config.cachePages ? 'default' : 'no-cache'
            });

            if (!response.ok) {
                if (response.status === 404) {
                    console.log(`üìÑ HTML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${pageId}`);
                    return null;
                }
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const html = await response.text();

            if (this.config.cachePages) {
                this.cache.html.set(pageId, html);
            }

            return html;
        } catch (error) {
            console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å HTML –¥–ª—è ${pageId}:`, error.message);
            return null;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ CSS —Ñ–∞–π–ª–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async loadPageCSS(pageId) {
        if (this.config.cachePages && this.cache.css.has(pageId)) {
            return this.cache.css.get(pageId);
        }

        try {
            const response = await fetch(`${this.config.pagesPath}/${pageId}/${pageId}.css`, {
                cache: this.config.cachePages ? 'default' : 'no-cache'
            });

            if (!response.ok) {
                if (response.status === 404) {
                    console.log(`üé® CSS —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${pageId}`);
                    return null;
                }
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const css = await response.text();

            if (this.config.cachePages) {
                this.cache.css.set(pageId, css);
            }

            return css;
        } catch (error) {
            console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å CSS –¥–ª—è ${pageId}:`, error.message);
            return null;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ JS —Ñ–∞–π–ª–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async loadPageJS(pageId) {
        if (this.config.cachePages && this.cache.js.has(pageId)) {
            return this.cache.js.get(pageId);
        }

        try {
            const response = await fetch(`${this.config.pagesPath}/${pageId}/${pageId}.js`, {
                cache: this.config.cachePages ? 'default' : 'no-cache'
            });

            if (!response.ok) {
                if (response.status === 404) {
                    console.log(`‚öôÔ∏è JS —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${pageId}`);
                    return null;
                }
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const js = await response.text();

            if (this.config.cachePages) {
                this.cache.js.set(pageId, js);
            }

            return js;
        } catch (error) {
            console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å JS –¥–ª—è ${pageId}:`, error.message);
            return null;
        }
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async applyPageStyles(pageId, css) {
        if (this.loadedStyles.has(pageId)) {
            return; // –°—Ç–∏–ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        }

        const styleElement = document.createElement('style');
        styleElement.id = `page-style-${pageId}`;
        styleElement.textContent = css;

        this.elements.styleContainer.appendChild(styleElement);
        this.loadedStyles.add(pageId);

        console.log(`üé® –°—Ç–∏–ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${pageId}`);
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async renderPageHTML(pageId, html, skipTransition = false) {
        if (!this.elements.content) {
            throw new Error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        if (this.config.enableTransitions && !skipTransition) {
            this.elements.content.style.opacity = '0';

            setTimeout(() => {
                this.elements.content.innerHTML = html;
                this.elements.content.style.opacity = '1';
            }, this.config.transitionDuration / 2);
        } else {
            this.elements.content.innerHTML = html;
        }

        console.log(`üìÑ HTML –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${pageId}`);
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ JavaScript —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async executePageScript(pageId, js) {
        try {
            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ pageManager
            const context = {
                pageId,
                pageManager: this,
                enhancedPageManager: this
            };

            // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            const func = new Function('context', 'pageId', 'pageManager', 'enhancedPageManager', js);
            await func(context, pageId, this, this);

            console.log(`‚öôÔ∏è JavaScript –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${pageId}`);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è JS –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageId}:`, error);
            throw error;
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async cleanupPage(pageId) {
        try {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if (this.loadedStyles.has(pageId)) {
                const styleElement = document.getElementById(`page-style-${pageId}`);
                if (styleElement) {
                    styleElement.remove();
                }
                this.loadedStyles.delete(pageId);
            }

            // –í—ã–∑—ã–≤–∞–µ–º cleanup —Ö—É–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            const pageConfig = this.getPageConfig(pageId);
            if (pageConfig && typeof pageConfig.cleanup === 'function') {
                try {
                    await pageConfig.cleanup();
                    this.emit('pageCleanup', { pageId });
                } catch (error) {
                    console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ cleanup —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageId}:`, error);
                }
            }

            console.log(`üßπ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageId} –æ—á–∏—â–µ–Ω–∞`);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageId}:`, error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
     */
    updateBrowserHistory(pageId) {
        const pageConfig = this.getPageConfig(pageId);
        const title = pageConfig?.title || pageId;

        try {
            window.history.pushState(
                { pageId, timestamp: Date.now() },
                title,
                `#${pageId}`
            );
            document.title = `${title} | IP Roast Platform`;
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –±—Ä–∞—É–∑–µ—Ä–∞:', error);
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    showLoadingState() {
        if (this.elements.loading) {
            this.elements.loading.classList.remove('hidden');
        }
    }

    /**
     * –°–∫—Ä—ã—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    hideLoadingState() {
        if (this.elements.loading) {
            setTimeout(() => {
                this.elements.loading.classList.add('hidden');
            }, 100);
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
     */
    showErrorState(pageId, error) {
        const errorHtml = `
            <div class="page-error">
                <h3>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã</h3>
                <p><strong>–°—Ç—Ä–∞–Ω–∏—Ü–∞:</strong> ${pageId}</p>
                <p><strong>–û—à–∏–±–∫–∞:</strong> ${error.message}</p>
                <p><strong>–í—Ä–µ–º—è:</strong> ${new Date().toLocaleString()}</p>
                <button onclick="window.enhancedPageManager.loadPage('${pageId}', {force: true})" 
                        class="btn btn-primary">
                    üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
                </button>
            </div>
        `;

        if (this.elements.content) {
            this.elements.content.innerHTML = errorHtml;
        }

        this.hideLoadingState();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
     */
    getState() {
        return {
            currentPageId: this.currentPageId,
            previousPageId: this.previousPageId,
            registeredPages: Array.from(this.registeredPages.keys()),
            loadingQueue: Array.from(this.loadingQueue),
            loadedStyles: Array.from(this.loadedStyles),
            cacheSize: {
                html: this.cache.html.size,
                css: this.cache.css.size,
                js: this.cache.js.size
            }
        };
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
     */
    clearCache() {
        this.cache.html.clear();
        this.cache.css.clear();
        this.cache.js.clear();
        this.cache.modules.clear();
        console.log('üßπ –ö—ç—à Enhanced PageManager –æ—á–∏—â–µ–Ω');
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    async destroy() {
        try {
            // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            if (this.currentPageId) {
                await this.cleanupPage(this.currentPageId);
            }

            // –û—á–∏—â–∞–µ–º –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            for (const [pageId, config] of this.registeredPages) {
                if (typeof config.cleanup === 'function') {
                    try {
                        await config.cleanup();
                    } catch (error) {
                        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ cleanup –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ ${pageId}:`, error);
                    }
                }
            }

            // –û—á–∏—â–∞–µ–º –∫—ç—à –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.clearCache();
            this.registeredPages.clear();
            this.pageInstances.clear();
            this.loadingQueue.clear();
            this.loadedStyles.clear();

            // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
            if (this.elements.loading) {
                this.elements.loading.remove();
            }

            console.log('üóëÔ∏è Enhanced PageManager —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ Enhanced PageManager:', error);
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
window.EnhancedPageManager = EnhancedPageManager;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    if (!window.enhancedPageManager) {
        console.log('üöÄ –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Enhanced PageManager...');
        setTimeout(async () => {
            try {
                window.enhancedPageManager = new EnhancedPageManager();
                await window.enhancedPageManager.init();
                console.log('‚úÖ Enhanced PageManager –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Enhanced PageManager:', error);
            }
        }, 100);
    }
});

console.log('‚úÖ Enhanced PageManager v3.1-Fixed –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω');
