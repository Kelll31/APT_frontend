/**
 * Enhanced PageManager - –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É HTML, CSS –∏ JS –∏–∑ –ø–∞–ø–∫–∏ pages/
 * Version: 3.0.0
 */
class EnhancedPageManager extends ComponentBase {
    constructor() {
        super('EnhancedPageManager');

        // –ö—ç—à –¥–ª—è –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü
        this.cache = {
            html: new Map(),
            css: new Map(),
            js: new Map(),
            modules: new Map()
        };

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        this.loadingQueue = new Set();
        this.currentPageId = null;
        this.previousPageId = null;
        this.loadedStyles = new Set();
        this.loadedScripts = new Set();

        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        this.config = {
            pagesPath: './pages',
            cachePages: true,
            loadTimeout: 15000,
            enableTransitions: true,
            transitionDuration: 300,
            enableScripts: true,
            enableStyles: true,
            cleanupOnNavigation: true
        };

        // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
        this.elements = {
            container: null,
            content: null,
            loading: null,
            styleContainer: null
        };

        console.log('üìÑ Enhanced PageManager v3.0 —Å–æ–∑–¥–∞–Ω');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
     */
    async doInit() {
        this.findPageElements();
        this.setupStyleContainer();
        this.setupEventListeners();
        console.log('‚úÖ Enhanced PageManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –ü–æ–∏—Å–∫ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü
     */
    findPageElements() {
        // –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü
        this.elements.container = document.querySelector('#page-container') || 
                                 document.querySelector('.page-container');

        if (!this.elements.container) {
            const mainContent = document.querySelector('.main-content') ||
                               document.querySelector('main') ||
                               document.body;

            this.elements.container = document.createElement('div');
            this.elements.container.id = 'page-container';
            this.elements.container.className = 'page-container';
            mainContent.appendChild(this.elements.container);
            console.log('üìÑ –°–æ–∑–¥–∞–Ω page-container');
        }

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        this.elements.content = this.elements.container.querySelector('#page-content') ||
                               this.elements.container.querySelector('.page-content');

        if (!this.elements.content) {
            this.elements.content = document.createElement('div');
            this.elements.content.id = 'page-content';
            this.elements.content.className = 'page-content';
            this.elements.container.appendChild(this.elements.content);
        }

        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        this.createLoadingIndicator();
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —Å—Ç–∏–ª–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü
     */
    setupStyleContainer() {
        this.elements.styleContainer = document.getElementById('page-styles-container');
        if (!this.elements.styleContainer) {
            this.elements.styleContainer = document.createElement('div');
            this.elements.styleContainer.id = 'page-styles-container';
            document.head.appendChild(this.elements.styleContainer);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    createLoadingIndicator() {
        this.elements.loading = document.createElement('div');
        this.elements.loading.id = 'page-loading';
        this.elements.loading.className = 'page-loading hidden';
        this.elements.loading.innerHTML = `
            <div class="loading-content">
                <div class="loading-spinner">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-dasharray="31.416" stroke-dashoffset="31.416">
                            <animate attributeName="stroke-dasharray" dur="2s" values="0 31.416;15.708 15.708;0 31.416" repeatCount="indefinite"/>
                            <animate attributeName="stroke-dashoffset" dur="2s" values="0;-15.708;-31.416" repeatCount="indefinite"/>
                        </circle>
                    </svg>
                </div>
                <p class="loading-text">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...</p>
            </div>
        `;
        this.elements.container.appendChild(this.elements.loading);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –æ—Ç SPANavigator
        document.addEventListener('navigationStart', (e) => {
            this.handleNavigationStart(e.detail);
        });

        // –°–ª—É—à–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        document.addEventListener('navigationComplete', (e) => {
            this.handleNavigationComplete(e.detail);
        });
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async loadPage(pageId, options = {}) {
        const {
            skipTransition = false,
            force = false
        } = options;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if (this.loadingQueue.has(pageId) && !force) {
            console.log(`‚è≥ –°—Ç—Ä–∞–Ω–∏—Ü–∞ "${pageId}" —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è`);
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ç–∞ –∂–µ –ª–∏ —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if (pageId === this.currentPageId && !force) {
            console.log(`üìç –°—Ç—Ä–∞–Ω–∏—Ü–∞ "${pageId}" —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞`);
            return true;
        }

        console.log(`üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: "${pageId}"`);

        this.loadingQueue.add(pageId);

        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            if (!skipTransition) {
                this.showLoadingState();
            }

            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (this.config.cleanupOnNavigation && this.currentPageId) {
                await this.cleanupPage(this.currentPageId);
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            const [htmlContent, cssContent, jsContent] = await Promise.all([
                this.loadPageHTML(pageId),
                this.loadPageCSS(pageId),
                this.loadPageJS(pageId)
            ]);

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –ø–µ—Ä–≤—ã–º–∏
            if (cssContent && this.config.enableStyles) {
                await this.applyPageStyles(pageId, cssContent);
            }

            // –†–µ–Ω–¥–µ—Ä–∏–º HTML –∫–æ–Ω—Ç–µ–Ω—Ç
            if (htmlContent) {
                await this.renderPageHTML(pageId, htmlContent, skipTransition);
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã
            if (jsContent && this.config.enableScripts) {
                await this.executePageScript(pageId, jsContent);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.previousPageId = this.currentPageId;
            this.currentPageId = pageId;

            // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            if (!skipTransition) {
                this.hideLoadingState();
            }

            // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            this.emit('pageLoaded', {
                pageId,
                previousPageId: this.previousPageId,
                hasHTML: !!htmlContent,
                hasCSS: !!cssContent,
                hasJS: !!jsContent
            });

            console.log(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ "${pageId}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞`);
            return true;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã "${pageId}":`, error);
            this.showErrorState(pageId, error);
            this.emit('pageError', { pageId, error });
            return false;
        } finally {
            this.loadingQueue.delete(pageId);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async loadPageHTML(pageId) {
        if (this.cache.html.has(pageId) && this.config.cachePages) {
            console.log(`üìÑ HTML –¥–ª—è "${pageId}" –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫—ç—à–∞`);
            return this.cache.html.get(pageId);
        }

        try {
            const htmlPath = `${this.config.pagesPath}/${pageId}/${pageId}.html`;
            const response = await fetch(htmlPath, {
                method: 'GET',
                headers: { 'Accept': 'text/html' }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const htmlContent = await response.text();

            if (this.config.cachePages) {
                this.cache.html.set(pageId, htmlContent);
            }

            console.log(`üìÑ HTML –¥–ª—è "${pageId}" –∑–∞–≥—Ä—É–∂–µ–Ω`);
            return htmlContent;

        } catch (error) {
            console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å HTML –¥–ª—è "${pageId}":`, error.message);
            return null;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ CSS —Å—Ç–∏–ª–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async loadPageCSS(pageId) {
        if (this.cache.css.has(pageId) && this.config.cachePages) {
            console.log(`üé® CSS –¥–ª—è "${pageId}" –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫—ç—à–∞`);
            return this.cache.css.get(pageId);
        }

        try {
            const cssPath = `${this.config.pagesPath}/${pageId}/${pageId}.css`;
            const response = await fetch(cssPath, {
                method: 'GET',
                headers: { 'Accept': 'text/css' }
            });

            if (!response.ok) {
                // CSS –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                console.log(`üìù CSS —Ñ–∞–π–ª –¥–ª—è "${pageId}" –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç`);
                return null;
            }

            const cssContent = await response.text();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ CSS –Ω–µ –ø—É—Å—Ç–æ–π
            if (cssContent.trim().length === 0) {
                console.log(`üìù CSS —Ñ–∞–π–ª –¥–ª—è "${pageId}" –ø—É—Å—Ç`);
                return null;
            }

            if (this.config.cachePages) {
                this.cache.css.set(pageId, cssContent);
            }

            console.log(`üé® CSS –¥–ª—è "${pageId}" –∑–∞–≥—Ä—É–∂–µ–Ω`);
            return cssContent;

        } catch (error) {
            console.log(`üìù CSS –¥–ª—è "${pageId}" –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:`, error.message);
            return null;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ JavaScript –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async loadPageJS(pageId) {
        if (this.cache.js.has(pageId) && this.config.cachePages) {
            console.log(`‚ö° JS –¥–ª—è "${pageId}" –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫—ç—à–∞`);
            return this.cache.js.get(pageId);
        }

        try {
            const jsPath = `${this.config.pagesPath}/${pageId}/${pageId}.js`;
            const response = await fetch(jsPath, {
                method: 'GET',
                headers: { 'Accept': 'application/javascript' }
            });

            if (!response.ok) {
                // JS –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
                console.log(`üìù JS —Ñ–∞–π–ª –¥–ª—è "${pageId}" –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç`);
                return null;
            }

            const jsContent = await response.text();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ JS –Ω–µ –ø—É—Å—Ç–æ–π
            if (jsContent.trim().length === 0) {
                console.log(`üìù JS —Ñ–∞–π–ª –¥–ª—è "${pageId}" –ø—É—Å—Ç`);
                return null;
            }

            if (this.config.cachePages) {
                this.cache.js.set(pageId, jsContent);
            }

            console.log(`‚ö° JS –¥–ª—è "${pageId}" –∑–∞–≥—Ä—É–∂–µ–Ω`);
            return jsContent;

        } catch (error) {
            console.log(`üìù JS –¥–ª—è "${pageId}" –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:`, error.message);
            return null;
        }
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ CSS —Å—Ç–∏–ª–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async applyPageStyles(pageId, cssContent) {
        try {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç–∏–ª–∏ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            const existingStyle = document.getElementById(`page-style-${pageId}`);
            if (existingStyle) {
                existingStyle.remove();
                this.loadedStyles.delete(pageId);
            }

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π style —ç–ª–µ–º–µ–Ω—Ç
            const styleElement = document.createElement('style');
            styleElement.id = `page-style-${pageId}`;
            styleElement.setAttribute('data-page', pageId);
            styleElement.textContent = cssContent;

            this.elements.styleContainer.appendChild(styleElement);
            this.loadedStyles.add(pageId);

            console.log(`üé® –°—Ç–∏–ª–∏ –¥–ª—è "${pageId}" –ø—Ä–∏–º–µ–Ω–µ–Ω—ã`);

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π –¥–ª—è "${pageId}":`, error);
        }
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
     */
    async renderPageHTML(pageId, htmlContent, skipTransition = false) {
        try {
            if (this.config.enableTransitions && !skipTransition) {
                this.elements.content.style.transition = `opacity ${this.config.transitionDuration}ms ease`;
                this.elements.content.style.opacity = '0';

                await new Promise(resolve => setTimeout(resolve, this.config.transitionDuration / 2));
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            this.elements.content.innerHTML = htmlContent;
            this.elements.content.setAttribute('data-page', pageId);

            if (this.config.enableTransitions && !skipTransition) {
                this.elements.content.style.opacity = '1';

                await new Promise(resolve => setTimeout(resolve, this.config.transitionDuration / 2));
                this.elements.content.style.transition = '';
            }

            console.log(`üìÑ HTML –¥–ª—è "${pageId}" –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω`);

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ HTML –¥–ª—è "${pageId}":`, error);
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ JavaScript –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async executePageScript(pageId, jsContent) {
        try {
            // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å—Ä–µ–¥—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            const scriptContext = {
                pageId,
                pageContainer: this.elements.content,
                pageManager: this,
                console: console
            };

            // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏
            const wrappedCode = `
                (function(pageId, pageContainer, pageManager, console) {
                    'use strict';
                    ${jsContent}
                })(pageId, pageContainer, pageManager, console);
            `;

            // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥
            const scriptFunction = new Function(
                'pageId', 'pageContainer', 'pageManager', 'console',
                wrappedCode
            );

            await scriptFunction(
                scriptContext.pageId,
                scriptContext.pageContainer,
                scriptContext.pageManager,
                scriptContext.console
            );

            this.loadedScripts.add(pageId);
            console.log(`‚ö° –°–∫—Ä–∏–ø—Ç –¥–ª—è "${pageId}" –≤—ã–ø–æ–ª–Ω–µ–Ω`);

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è "${pageId}":`, error);
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async cleanupPage(pageId) {
        try {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if (this.loadedStyles.has(pageId)) {
                const styleElement = document.getElementById(`page-style-${pageId}`);
                if (styleElement) {
                    styleElement.remove();
                    this.loadedStyles.delete(pageId);
                }
            }

            // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            this.emit('pageCleanup', { pageId });

            console.log(`üßπ –°—Ç—Ä–∞–Ω–∏—Ü–∞ "${pageId}" –æ—á–∏—â–µ–Ω–∞`);

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã "${pageId}":`, error);
        }
    }

    /**
     * –ü–æ–∫–∞–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
     */
    showLoadingState() {
        if (this.elements.loading) {
            this.elements.loading.classList.remove('hidden');
            this.elements.loading.style.display = 'flex';
        }
    }

    /**
     * –°–∫—Ä—ã—Ç–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
     */
    hideLoadingState() {
        if (this.elements.loading) {
            this.elements.loading.classList.add('hidden');
            setTimeout(() => {
                if (this.elements.loading.classList.contains('hidden')) {
                    this.elements.loading.style.display = 'none';
                }
            }, 300);
        }
    }

    /**
     * –ü–æ–∫–∞–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—à–∏–±–∫–∏
     */
    showErrorState(pageId, error) {
        this.hideLoadingState();

        const errorHTML = `
            <div class="page-error">
                <div class="error-icon">
                    <svg width="48" height="48" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2"/>
                        <line x1="15" y1="9" x2="9" y2="15" stroke="currentColor" stroke-width="2"/>
                        <line x1="9" y1="9" x2="15" y2="15" stroke="currentColor" stroke-width="2"/>
                    </svg>
                </div>
                <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã</h3>
                <p><strong>–°—Ç—Ä–∞–Ω–∏—Ü–∞:</strong> ${pageId}</p>
                <p><strong>–û—à–∏–±–∫–∞:</strong> ${error.message}</p>
                <p><strong>–í—Ä–µ–º—è:</strong> ${new Date().toLocaleString()}</p>
                <button class="btn btn--primary" onclick="pageManager.loadPage('${pageId}', { force: true })">
                    –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </button>
            </div>
        `;

        this.elements.content.innerHTML = errorHTML;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    handleNavigationStart(detail) {
        console.log(`üß≠ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:`, detail);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏  
     */
    handleNavigationComplete(detail) {
        console.log(`üß≠ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:`, detail);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    getCurrentPage() {
        return this.currentPageId;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    getPreviousPage() {
        return this.previousPageId;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞
     */
    clearCache() {
        this.cache.html.clear();
        this.cache.css.clear();
        this.cache.js.clear();
        this.cache.modules.clear();
        console.log('üóëÔ∏è –ö—ç—à PageManager –æ—á–∏—â–µ–Ω');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
     */
    getCacheStats() {
        return {
            html: this.cache.html.size,
            css: this.cache.css.size,
            js: this.cache.js.size,
            modules: this.cache.modules.size,
            loadedStyles: this.loadedStyles.size,
            loadedScripts: this.loadedScripts.size
        };
    }

    /**
     * –ü—Ä–µ-–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async preloadPage(pageId) {
        if (this.cache.html.has(pageId) && this.cache.css.has(pageId) && this.cache.js.has(pageId)) {
            console.log(`üì¶ –°—Ç—Ä–∞–Ω–∏—Ü–∞ "${pageId}" —É–∂–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞`);
            return true;
        }

        console.log(`üì¶ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: "${pageId}"`);

        try {
            await Promise.all([
                this.loadPageHTML(pageId),
                this.loadPageCSS(pageId),
                this.loadPageJS(pageId)
            ]);

            console.log(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ "${pageId}" –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞`);
            return true;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ "${pageId}":`, error);
            return false;
        }
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    async doDestroy() {
        // –û—á–∏—â–∞–µ–º –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏
        this.loadedStyles.forEach(pageId => {
            const styleElement = document.getElementById(`page-style-${pageId}`);
            if (styleElement) {
                styleElement.remove();
            }
        });

        // –û—á–∏—â–∞–µ–º –∫—ç—à
        this.clearCache();

        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.loadingQueue.clear();
        this.loadedStyles.clear();
        this.loadedScripts.clear();

        console.log('üóëÔ∏è Enhanced PageManager —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.EnhancedPageManager = EnhancedPageManager;
console.log('‚úÖ Enhanced PageManager v3.0 –∑–∞–≥—Ä—É–∂–µ–Ω');