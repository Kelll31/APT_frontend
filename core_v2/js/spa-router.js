/**
 * SPA Router —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –≥–ª—É–±–æ–∫–∏—Ö —Å—Å—ã–ª–æ–∫
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å PageManager –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
 */
class SPARouter extends ComponentBase {
    constructor() {
        super('SPARouter');
        
        // –¢–∞–±–ª–∏—Ü–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
        this.routes = new Map();
        
        // –¢–µ–∫—É—â–∏–π –º–∞—Ä—à—Ä—É—Ç
        this.currentRoute = null;
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        this.config = {
            baseUrl: '',
            hashMode: true, // true = #/page, false = /page
            defaultRoute: 'dashboard',
            scrollToTop: true
        };
        
        // Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
        this.middleware = [];
        
        // PageManager
        this.pageManager = null;
    }

    async doInit() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SPARouter');
        
        // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä PageManager
        this.pageManager = window.pageManager;
        if (!this.pageManager) {
            throw new Error('PageManager –Ω–µ –Ω–∞–π–¥–µ–Ω. Router —Ç—Ä–µ–±—É–µ—Ç PageManager.');
        }
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
        this.registerDefaultRoutes();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
        this.setupBrowserHandlers();
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π URL
        await this.handleInitialRoute();
        
        console.log('‚úÖ SPARouter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
     */
    registerDefaultRoutes() {
        // –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.addRoute('dashboard', {
            title: '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
            component: 'dashboard',
            requiresAuth: false
        });
        
        this.addRoute('scanner', {
            title: '–ú–æ–¥—É–ª—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
            component: 'scanner',
            requiresAuth: true
        });
        
        this.addRoute('attack-constructor', {
            title: '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∞—Ç–∞–∫',
            component: 'attack-constructor',
            requiresAuth: true
        });
        
        this.addRoute('network-topology', {
            title: '–¢–æ–ø–æ–ª–æ–≥–∏—è —Å–µ—Ç–∏',
            component: 'network-topology',
            requiresAuth: true
        });
        
        this.addRoute('reports', {
            title: '–û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
            component: 'reports',
            requiresAuth: true
        });
        
        this.addRoute('settings', {
            title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã',
            component: 'settings',
            requiresAuth: true
        });
        
        console.log(`‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ ${this.routes.size} –º–∞—Ä—à—Ä—É—Ç–æ–≤`);
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
     */
    addRoute(path, config) {
        const route = {
            path,
            title: config.title || path,
            component: config.component || path,
            requiresAuth: config.requiresAuth || false,
            middleware: config.middleware || [],
            params: config.params || {},
            meta: config.meta || {}
        };
        
        this.routes.set(path, route);
        console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω –º–∞—Ä—à—Ä—É—Ç: ${path}`);
        
        return route;
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±—Ä–∞—É–∑–µ—Ä–∞
     */
    setupBrowserHandlers() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥/–í–ø–µ—Ä–µ–¥"
        this.addEventListener(window, 'popstate', (event) => {
            console.log('üîô –ë—Ä–∞—É–∑–µ—Ä: —Å–æ–±—ã—Ç–∏–µ popstate');
            this.handlePopState(event);
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ö–µ—à–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è hashMode)
        if (this.config.hashMode) {
            this.addEventListener(window, 'hashchange', (event) => {
                console.log('üîó –ë—Ä–∞—É–∑–µ—Ä: –∏–∑–º–µ–Ω–µ–Ω–∏–µ hash');
                this.handleHashChange(event);
            });
        }
        
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å—Å—ã–ª–æ–∫
        this.addEventListener(document, 'click', (event) => {
            this.handleLinkClick(event);
        });
        
        console.log('‚ö° –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
     */
    async handleInitialRoute() {
        const initialPath = this.getCurrentPath();
        console.log(`üöÄ –ù–∞—á–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç: ${initialPath}`);
        
        if (initialPath && this.routes.has(initialPath)) {
            await this.navigateTo(initialPath, { replace: true });
        } else {
            await this.navigateTo(this.config.defaultRoute, { replace: true });
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—É—Ç–∏ –∏–∑ URL
     */
    getCurrentPath() {
        if (this.config.hashMode) {
            // –†–µ–∂–∏–º —Å —Ö–µ—à–µ–º: #/dashboard
            const hash = window.location.hash.substring(1);
            return hash.startsWith('/') ? hash.substring(1) : hash;
        } else {
            // –†–µ–∂–∏–º –±–µ–∑ —Ö–µ—à–∞: /dashboard
            return window.location.pathname.substring(1);
        }
    }

    /**
     * –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –º–∞—Ä—à—Ä—É—Ç—É
     */
    async navigateTo(path, options = {}) {
        const { 
            replace = false, 
            params = {}, 
            skipHistory = false,
            force = false 
        } = options;
        
        console.log(`üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫: ${path}`);
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ç–æ—Ç –∂–µ –ª–∏ —ç—Ç–æ –º–∞—Ä—à—Ä—É—Ç
            if (!force && this.currentRoute?.path === path) {
                console.log(`‚ÑπÔ∏è –£–∂–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ: ${path}`);
                return;
            }
            
            // –ù–∞—Ö–æ–¥–∏–º –º–∞—Ä—à—Ä—É—Ç
            const route = this.routes.get(path);
            if (!route) {
                throw new Error(`–ú–∞—Ä—à—Ä—É—Ç "${path}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º middleware "before" –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
            const canLeave = await this.runBeforeMiddleware(this.currentRoute);
            if (!canLeave) {
                console.log(`üö´ –ù–∞–≤–∏–≥–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ middleware`);
                return false;
            }
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º middleware "enter" –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
            const canEnter = await this.runEnterMiddleware(route, params);
            if (!canEnter) {
                console.log(`üö´ –í—Ö–æ–¥ –≤ –º–∞—Ä—à—Ä—É—Ç –æ—Ç–º–µ–Ω–µ–Ω middleware`);
                return false;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –±—Ä–∞—É–∑–µ—Ä–∞
            if (!skipHistory) {
                this.updateBrowserHistory(path, route, replace);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            this.updatePageTitle(route.title);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ PageManager
            await this.pageManager.loadPage(route.component);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Ä—à—Ä—É—Ç
            const previousRoute = this.currentRoute;
            this.currentRoute = {
                ...route,
                params,
                timestamp: Date.now()
            };
            
            // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –Ω–∞–≤–µ—Ä—Ö –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (this.config.scrollToTop) {
                window.scrollTo({ top: 0, behavior: 'smooth' });
            }
            
            // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            this.emit('routeChanged', {
                from: previousRoute,
                to: this.currentRoute,
                path
            });
            
            console.log(`‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${path}`);
            return true;
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ "${path}":`, error);
            this.emit('routeError', { path, error });
            
            // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if (path !== this.config.defaultRoute) {
                console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é`);
                return await this.navigateTo(this.config.defaultRoute, { replace: true });
            }
            
            throw error;
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ middleware
     */
    addMiddleware(middleware) {
        this.middleware.push(middleware);
        console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω middleware`);
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ middleware "before" (–ø–µ—Ä–µ–¥ –ø–æ–∫–∏–¥–∞–Ω–∏–µ–º –º–∞—Ä—à—Ä—É—Ç–∞)
     */
    async runBeforeMiddleware(route) {
        if (!route) return true;
        
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ middleware
        for (const middleware of this.middleware) {
            if (middleware.before) {
                const result = await middleware.before(route);
                if (result === false) {
                    console.log(`üö´ Middleware –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–∫–∏–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞`);
                    return false;
                }
            }
        }
        
        // –ú–∞—Ä—à—Ä—É—Ç-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ middleware
        for (const middleware of route.middleware || []) {
            if (middleware.before) {
                const result = await middleware.before(route);
                if (result === false) {
                    console.log(`üö´ –ú–∞—Ä—à—Ä—É—Ç–Ω—ã–π middleware –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–∫–∏–¥–∞–Ω–∏–µ`);
                    return false;
                }
            }
        }
        
        return true;
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ middleware "enter" (–ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ –º–∞—Ä—à—Ä—É—Ç)
     */
    async runEnterMiddleware(route, params) {
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ middleware
        for (const middleware of this.middleware) {
            if (middleware.enter) {
                const result = await middleware.enter(route, params);
                if (result === false) {
                    console.log(`üö´ Middleware –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –≤—Ö–æ–¥ –≤ –º–∞—Ä—à—Ä—É—Ç`);
                    return false;
                }
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (route.requiresAuth && !this.isAuthenticated()) {
            console.log(`üö´ –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è: ${route.path}`);
            this.emit('authRequired', { route });
            return false;
        }
        
        // –ú–∞—Ä—à—Ä—É—Ç-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ middleware
        for (const middleware of route.middleware || []) {
            if (middleware.enter) {
                const result = await middleware.enter(route, params);
                if (result === false) {
                    console.log(`üö´ –ú–∞—Ä—à—Ä—É—Ç–Ω—ã–π middleware –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –≤—Ö–æ–¥`);
                    return false;
                }
            }
        }
        
        return true;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)
     */
    isAuthenticated() {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        return true; // –ü–æ–∫–∞ –≤—Å–µ–≥–¥–∞ true
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
     */
    updateBrowserHistory(path, route, replace) {
        const url = this.config.hashMode ? `#/${path}` : `/${path}`;
        
        const state = {
            path,
            title: route.title,
            timestamp: Date.now()
        };
        
        if (replace) {
            history.replaceState(state, route.title, url);
        } else {
            history.pushState(state, route.title, url);
        }
        
        console.log(`üìö –ò—Å—Ç–æ—Ä–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${url}`);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    updatePageTitle(title) {
        document.title = `${title} | IP Roast Enterprise 4.0`;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è popstate (–∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥/–í–ø–µ—Ä–µ–¥)
     */
    async handlePopState(event) {
        const state = event.state;
        if (state && state.path) {
            await this.navigateTo(state.path, { skipHistory: true });
        } else {
            // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–∑ URL
            const path = this.getCurrentPath();
            await this.navigateTo(path || this.config.defaultRoute, { skipHistory: true });
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ö–µ—à–∞
     */
    async handleHashChange(event) {
        const path = this.getCurrentPath();
        if (path) {
            await this.navigateTo(path, { skipHistory: true });
        }
    }

    /**
     * –ü–µ—Ä–µ—Ö–≤–∞—Ç –∫–ª–∏–∫–æ–≤ –ø–æ —Å—Å—ã–ª–∫–∞–º
     */
    handleLinkClick(event) {
        const link = event.target.closest('a[href]');
        if (!link) return;
        
        const href = link.getAttribute('href');
        
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏
        if (href.startsWith('http') || href.startsWith('mailto:') || href.startsWith('tel:')) {
            return;
        }
        
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ —Å target="_blank"
        if (link.getAttribute('target') === '_blank') {
            return;
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏
        if (this.config.hashMode && href.startsWith('#/')) {
            event.preventDefault();
            const path = href.substring(2); // –£–±–∏—Ä–∞–µ–º #/
            this.navigateTo(path);
        } else if (!this.config.hashMode && href.startsWith('/')) {
            event.preventDefault();
            const path = href.substring(1); // –£–±–∏—Ä–∞–µ–º /
            this.navigateTo(path);
        }
    }

    /**
     * –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥—Ä—É–≥–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏)
     */
    push(path, params = {}) {
        return this.navigateTo(path, { params });
    }

    replace(path, params = {}) {
        return this.navigateTo(path, { params, replace: true });
    }

    /**
     * –í–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥
     */
    goBack() {
        if (window.history.length > 1) {
            window.history.back();
        } else {
            this.navigateTo(this.config.defaultRoute);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
     */
    getCurrentRoute() {
        return this.currentRoute;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
     */
    getAllRoutes() {
        return Array.from(this.routes.values());
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
     */
    hasRoute(path) {
        return this.routes.has(path);
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏
     */
    async doDestroy() {
        console.log('üóëÔ∏è –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ SPARouter');
        
        // –û—á–∏—â–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –∏ middleware
        this.routes.clear();
        this.middleware.length = 0;
        this.currentRoute = null;
        this.pageManager = null;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.SPARouter = SPARouter;
console.log('‚úÖ SPARouter –∑–∞–≥—Ä—É–∂–µ–Ω');