/**
 * IP Roast Enterprise SPA Application
 * –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å SPA –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Enhanced PageManager
 * –í–µ—Ä—Å–∏—è: 4.0.0-Enhanced
 */
class IPRoastSPAApp extends ComponentBase {
    constructor() {
        super('IPRoastSPAApp');
        this.version = '4.0.0-Enhanced';
        this.buildDate = new Date().toISOString();

        // –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        this.components = {
            pageManager: null,
            navigator: null,
            themeManager: null,
            headerManager: null,
            sidebarManager: null,
            notificationSystem: null
        };

        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.config = {
            apiBaseUrl: './api',
            pagesPath: './pages', // –ü—É—Ç—å –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ core_v2
            enableDevMode: localStorage.getItem('dev-mode') === 'true',
            autoSave: true,
            refreshInterval: 30000,
            defaultRoute: 'dashboard'
        };

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.state = {
            isInitialized: false,
            currentPage: null,
            loadingState: false
        };

        console.log(`üöÄ IP Roast Enterprise ${this.version} SPA —Å–æ–∑–¥–∞–Ω–æ`);
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SPA –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    async doInit() {
        try {
            this.showLoadingScreen();
            this.updateProgress(5, '–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã...');

            // –î–µ–ª–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –°–†–ê–ó–£
            window.app = this;
            console.log('üåç –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –∫–∞–∫ window.app');

            await this.checkRequiredElements();
            this.updateProgress(15, '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º...');

            await this.initializeCoreSystems();
            this.updateProgress(35, '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...');

            await this.initializeComponentManagers();
            this.updateProgress(60, '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...');

            await this.initializeNavigation();
            this.updateProgress(80, '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...');

            await this.finalizeInitialization();
            this.updateProgress(100, '–ì–æ—Ç–æ–≤–æ!');

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.state.isInitialized = true;

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            setTimeout(() => {
                this.hideLoadingScreen();
                this.showSuccessNotification('IP Roast Enterprise —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!');
                console.log('‚úÖ IP Roast Enterprise Core v2 Enhanced –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }, 500);

        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SPA:', error);
            this.handleInitError(error);
            throw error;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM
     */
    async checkRequiredElements() {
        const requiredSelectors = [
            'body',
            'head'
        ];

        const optionalSelectors = [
            '#loading-screen',
            '#page-container',
            '.main-content'
        ];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const missing = requiredSelectors.filter(sel => !document.querySelector(sel));
        if (missing.length > 0) {
            throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã: ${missing.join(', ')}`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const missingOptional = optionalSelectors.filter(sel => !document.querySelector(sel));
        if (missingOptional.length > 0) {
            console.warn(`‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: ${missingOptional.join(', ')}`);
        }

        console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º
     */
    async initializeCoreSystems() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
        this.setupErrorHandlers();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
        this.setupTheme();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
        this.setupHotkeys();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
        this.setupResponsive();

        console.log('üîß –ë–∞–∑–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
     */
    async initializeComponentManagers() {
        try {
            // 1. ThemeManager (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π)
            await this.initializeThemeManager();

            // 2. Enhanced PageManager (–∫–ª—é—á–µ–≤–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç)
            await this.initializePageManager();

            // 3. Notification System
            await this.initializeNotificationSystem();

            console.log('üì¶ –í—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:', error);
            throw error;
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ThemeManager
     */
    async initializeThemeManager() {
        if (window.IPRoastCore?.ThemeManager) {
            this.components.themeManager = new window.IPRoastCore.ThemeManager();
            await this.components.themeManager.init();
            console.log('‚úÖ ThemeManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } else {
            console.warn('‚ö†Ô∏è IPRoastCore.ThemeManager –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PageManager
     */
    async initializePageManager() {
        if (window.EnhancedPageManager) {
            console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º Enhanced PageManager');

            this.components.pageManager = new window.EnhancedPageManager();
            await this.components.pageManager.init();

            // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            window.pageManager = this.components.pageManager;
            window.enhancedPageManager = this.components.pageManager;

            // –î–ª—è SPANavigator
            this.pageManager = this.components.pageManager;

            // –î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
            if (window.app) {
                window.app.pageManager = this.components.pageManager;
            }

            console.log('‚úÖ Enhanced PageManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏');

        } else if (window.PageManager) {
            console.log('üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π PageManager');

            this.components.pageManager = new window.PageManager();
            await this.components.pageManager.init();

            // –¢–µ –∂–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            window.pageManager = this.components.pageManager;
            this.pageManager = this.components.pageManager;

            if (window.app) {
                window.app.pageManager = this.components.pageManager;
            }

            console.log('‚úÖ PageManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

        } else {
            throw new Error('–ù–∏ EnhancedPageManager, –Ω–∏ PageManager –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    async initializeNotificationSystem() {
        // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        this.components.notificationSystem = {
            show: (message, type = 'info', options = {}) => {
                console.log(`üì¢ ${type.toUpperCase()}: ${message}`);

                // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                const notification = document.createElement('div');
                notification.className = `notification notification--${type}`;
                notification.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    padding: 12px 16px;
                    background: var(--color-surface);
                    border: 1px solid var(--color-border);
                    border-radius: 8px;
                    box-shadow: var(--shadow-lg);
                    z-index: 9999;
                    max-width: 400px;
                    color: var(--color-text);
                `;

                notification.innerHTML = `
                    <div style="display: flex; align-items: center; gap: 8px;">
                        <span>${this.getNotificationIcon(type)}</span>
                        <span>${message}</span>
                        <button onclick="this.parentElement.parentElement.remove()" style="
                            background: none;
                            border: none;
                            color: var(--color-text-secondary);
                            cursor: pointer;
                            margin-left: auto;
                        ">√ó</button>
                    </div>
                `;

                document.body.appendChild(notification);

                // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
                setTimeout(() => {
                    if (notification.parentElement) {
                        notification.remove();
                    }
                }, options.duration || 5000);

                return notification;
            },

            success: (message, options) => this.components.notificationSystem.show(message, 'success', options),
            error: (message, options) => this.components.notificationSystem.show(message, 'error', options),
            warning: (message, options) => this.components.notificationSystem.show(message, 'warning', options),
            info: (message, options) => this.components.notificationSystem.show(message, 'info', options)
        };

        console.log('‚úÖ NotificationSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    getNotificationIcon(type) {
        const icons = {
            success: '‚úÖ',
            error: '‚ùå',
            warning: '‚ö†Ô∏è',
            info: '‚ÑπÔ∏è'
        };
        return icons[type] || icons.info;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    async initializeNavigation() {
        if (window.SPANavigator) {
            this.components.navigator = new window.SPANavigator();
            await this.components.navigator.init();

            // –°–≤—è–∑—ã–≤–∞–µ–º —Å sidebar –µ—Å–ª–∏ –µ—Å—Ç—å
            if (this.components.sidebarManager) {
                this.components.sidebarManager.on('navigate', (pageId) => {
                    this.components.navigator.navigateTo(pageId);
                });
            }

            console.log('‚úÖ SPANavigator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } else {
            console.warn('‚ö†Ô∏è SPANavigator –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞–≤–∏–≥–∞—Ü–∏—è –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞');
        }

        console.log('üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    /**
     * –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
     */
    async finalizeInitialization() {
        // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
        this.startPeriodicTasks();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.setupStateHandlers();

        // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        this.exposeDebugFunctions();

        console.log('üèÅ –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }

    /**
     * –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    async navigateToPage(pageId, options = {}) {
        console.log(`üß≠ –ó–∞–ø—Ä–æ—Å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${pageId}`);

        try {
            if (this.components.navigator) {
                return await this.components.navigator.navigateTo(pageId, options);
            } else if (this.components.pageManager) {
                return await this.components.pageManager.loadPage(pageId, options);
            } else {
                console.error('‚ùå –ù–∏ Navigator, –Ω–∏ PageManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
                return false;
            }
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ ${pageId}:`, error);
            this.showErrorNotification(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${pageId}`);
            return false;
        }
    }

    /**
     * –°–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    showNotification(message, type = 'info', options = {}) {
        if (this.components.notificationSystem) {
            return this.components.notificationSystem.show(message, type, options);
        } else {
            console.log(`üì¢ ${type.toUpperCase()}: ${message}`);
            return null;
        }
    }

    showSuccessNotification(message, options = {}) {
        return this.showNotification(message, 'success', options);
    }

    showErrorNotification(message, options = {}) {
        return this.showNotification(message, 'error', options);
    }

    showWarningNotification(message, options = {}) {
        return this.showNotification(message, 'warning', options);
    }

    showInfoNotification(message, options = {}) {
        return this.showNotification(message, 'info', options);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
     */
    setupErrorHandlers() {
        window.addEventListener('error', (e) => {
            console.error('üí• JavaScript –æ—à–∏–±–∫–∞:', e.error);
            if (this.config.enableDevMode) {
                this.showErrorNotification(`JS Error: ${e.error?.message || 'Unknown error'}`);
            }
        });

        window.addEventListener('unhandledrejection', (e) => {
            console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', e.reason);
            if (this.config.enableDevMode) {
                this.showErrorNotification(`Promise Error: ${e.reason || 'Unknown promise error'}`);
            }
        });

        console.log('üõ°Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
     */
    setupTheme() {
        const savedTheme = localStorage.getItem('ip-roast-theme-v2') ||
            localStorage.getItem('theme') ||
            'dark';

        document.documentElement.setAttribute('data-theme', savedTheme);
        document.documentElement.style.colorScheme = savedTheme === 'auto' ?
            (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light') :
            savedTheme;

        console.log(`üé® –¢–µ–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${savedTheme}`);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
     */
    setupHotkeys() {
        document.addEventListener('keydown', (e) => {
            // Ctrl/Cmd + K - –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫
            if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
                e.preventDefault();
                this.showQuickSearch();
            }

            // Ctrl/Cmd + B - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ sidebar
            if ((e.ctrlKey || e.metaKey) && e.key === 'b') {
                e.preventDefault();
                if (this.components.sidebarManager) {
                    this.components.sidebarManager.toggle();
                }
            }

            // Ctrl/Cmd + Shift + T - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
            if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'T') {
                e.preventDefault();
                if (this.components.themeManager) {
                    this.components.themeManager.toggleTheme();
                }
            }

            // Escape - –∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
            if (e.key === 'Escape') {
                this.handleEscapeKey();
            }

            // F12 - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ dev —Ä–µ–∂–∏–º–∞
            if (e.key === 'F12') {
                e.preventDefault();
                this.toggleDevMode();
            }
        });

        console.log('‚å®Ô∏è –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    setupResponsive() {
        const mediaQuery = window.matchMedia('(max-width: 768px)');
        const handleMediaChange = (e) => {
            document.body.classList.toggle('mobile-mode', e.matches);
            this.emit('responsiveChange', { isMobile: e.matches });
        };

        mediaQuery.addEventListener('change', handleMediaChange);
        handleMediaChange(mediaQuery);

        console.log('üì± –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
    }

    /**
     * –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
     */
    startPeriodicTasks() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
        const statusInterval = setInterval(() => {
            this.updateSystemStatus();
        }, this.config.refreshInterval);

        // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        const cacheInterval = setInterval(() => {
            if (this.components.pageManager?.clearOldCache) {
                this.components.pageManager.clearOldCache();
            }
        }, 300000);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        this.intervals = { statusInterval, cacheInterval };

        console.log('‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    setupStateHandlers() {
        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if (this.config.autoSave) {
            setInterval(() => {
                this.saveAppState();
            }, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        window.addEventListener('beforeunload', () => {
            this.saveAppState();
        });

        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        this.restoreAppState();

        console.log('üíæ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
     */
    async updateSystemStatus() {
        try {
            const status = {
                timestamp: new Date().toISOString(),
                memory: this.getMemoryUsage(),
                performance: this.getPerformanceMetrics(),
                pageManager: this.components.pageManager ? {
                    currentPage: this.components.pageManager.currentPageId || null,
                    cacheSize: this.components.pageManager.cache ?
                        Object.keys(this.components.pageManager.cache).length : 0
                } : null
            };

            this.emit('systemStatusUpdated', status);
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞:', error);
        }
    }

    /**
     * UI –º–µ—Ç–æ–¥—ã
     */
    showLoadingScreen() {
        const loadingScreen = document.getElementById('loading-screen');
        if (loadingScreen) {
            loadingScreen.classList.remove('hidden');
            loadingScreen.style.display = 'flex';
        }
    }

    hideLoadingScreen() {
        const loadingScreen = document.getElementById('loading-screen');
        if (loadingScreen) {
            loadingScreen.classList.add('hidden');
            setTimeout(() => {
                loadingScreen.style.display = 'none';
            }, 500);
        }
    }

    updateProgress(percent, text) {
        const progressFill = document.getElementById('progress-fill');
        const progressText = document.getElementById('progress-text');

        if (progressFill) {
            progressFill.style.width = `${percent}%`;
        }
        if (progressText) {
            progressText.textContent = text;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
     */
    handleInitError(error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);

        const loadingScreen = document.getElementById('loading-screen');
        if (loadingScreen) {
            loadingScreen.innerHTML = `
                <div class="loading-content" style="text-align: center; padding: 32px;">
                    <div class="error-icon" style="font-size: 48px; margin-bottom: 16px;">‚ùå</div>
                    <h2 style="color: var(--color-error); margin-bottom: 16px;">–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã</h2>
                    <p style="margin-bottom: 8px;"><strong>–û—à–∏–±–∫–∞:</strong> ${error.message}</p>
                    <p style="margin-bottom: 24px; color: var(--color-text-secondary);">
                        <strong>–í—Ä–µ–º—è:</strong> ${new Date().toLocaleString()}
                    </p>
                    <div style="display: flex; gap: 12px; justify-content: center;">
                        <button onclick="location.reload()" style="
                            padding: 8px 16px;
                            background: var(--color-primary);
                            color: var(--color-btn-primary-text);
                            border: none;
                            border-radius: var(--radius-base);
                            cursor: pointer;
                        ">–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</button>
                        <button onclick="this.parentElement.parentElement.remove()" style="
                            padding: 8px 16px;
                            background: var(--color-secondary);
                            color: var(--color-text);
                            border: 1px solid var(--color-border);
                            border-radius: var(--radius-base);
                            cursor: pointer;
                        ">–°–∫—Ä—ã—Ç—å –æ—à–∏–±–∫—É</button>
                    </div>
                </div>
            `;
        }
    }

    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
     */
    showQuickSearch() {
        console.log('üîç –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ (–∑–∞–≥–ª—É—à–∫–∞)');
        this.showInfoNotification('–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω');
    }

    handleEscapeKey() {
        console.log('‚éã –ù–∞–∂–∞—Ç–∞ –∫–ª–∞–≤–∏—à–∞ Escape');
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –∏ overlays
        const overlays = document.querySelectorAll('.modal, .overlay, .sidebar-overlay.visible');
        overlays.forEach(overlay => {
            overlay.classList.add('hidden');
        });
    }

    toggleDevMode() {
        const devMode = !this.config.enableDevMode;
        this.config.enableDevMode = devMode;
        localStorage.setItem('dev-mode', devMode.toString());
        this.showInfoNotification(`–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: ${devMode ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}`);
        console.log(`üõ†Ô∏è Dev —Ä–µ–∂–∏–º: ${devMode ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}`);
    }

    /**
     * –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    saveAppState() {
        try {
            const state = {
                timestamp: new Date().toISOString(),
                version: this.version,
                currentPage: this.components.pageManager?.currentPageId || null,
                theme: this.components.themeManager?.getCurrentTheme?.() || null,
                config: {
                    enableDevMode: this.config.enableDevMode
                }
            };

            localStorage.setItem('ip-roast-app-state', JSON.stringify(state));
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
        }
    }

    restoreAppState() {
        try {
            const stateStr = localStorage.getItem('ip-roast-app-state');
            if (stateStr) {
                const state = JSON.parse(stateStr);
                console.log('üìÇ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', state);

                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                if (state.config?.enableDevMode !== undefined) {
                    this.config.enableDevMode = state.config.enableDevMode;
                }
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
        }
    }

    /**
     * –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    getMemoryUsage() {
        if (performance.memory) {
            return {
                used: Math.round(performance.memory.usedJSHeapSize / 1024 / 1024),
                total: Math.round(performance.memory.totalJSHeapSize / 1024 / 1024),
                limit: Math.round(performance.memory.jsHeapSizeLimit / 1024 / 1024)
            };
        }
        return null;
    }

    getPerformanceMetrics() {
        return {
            navigation: performance.navigation?.type || null,
            timing: performance.timing ? {
                loadComplete: performance.timing.loadEventEnd - performance.timing.navigationStart,
                domReady: performance.timing.domContentLoadedEventEnd - performance.timing.navigationStart
            } : null,
            connection: navigator.connection ? {
                effectiveType: navigator.connection.effectiveType,
                downlink: navigator.connection.downlink
            } : null
        };
    }

    /**
     * Debug —Ñ—É–Ω–∫—Ü–∏–∏
     */
    exposeDebugFunctions() {
        if (this.config.enableDevMode) {
            // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            window.navigateToPage = (pageId) => this.navigateToPage(pageId);
            window.getAppInfo = () => this.getAppInfo();
            window.getPageManagerStats = () => this.getPageManagerStats();
            window.clearPageCache = () => this.clearPageCache();
            window.testPageLoad = () => this.testPageLoad();

            console.log('üêõ Debug —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏');
        }
    }

    getAppInfo() {
        return {
            version: this.version,
            buildDate: this.buildDate,
            state: this.state,
            config: this.config,
            components: Object.keys(this.components).reduce((acc, key) => {
                acc[key] = !!this.components[key];
                return acc;
            }, {}),
            memory: this.getMemoryUsage(),
            performance: this.getPerformanceMetrics()
        };
    }

    getPageManagerStats() {
        if (this.components.pageManager) {
            return {
                currentPage: this.components.pageManager.currentPageId || null,
                cacheSize: this.components.pageManager.cache ?
                    Object.keys(this.components.pageManager.cache).length : 0,
                loadingQueue: this.components.pageManager.loadingQueue?.size || 0,
                type: this.components.pageManager.constructor.name
            };
        }
        return null;
    }

    clearPageCache() {
        if (this.components.pageManager?.clearCache) {
            this.components.pageManager.clearCache();
            this.showSuccessNotification('–ö—ç—à —Å—Ç—Ä–∞–Ω–∏—Ü –æ—á–∏—â–µ–Ω');
            console.log('üóëÔ∏è –ö—ç—à —Å—Ç—Ä–∞–Ω–∏—Ü –æ—á–∏—â–µ–Ω');
        }
    }

    async testPageLoad() {
        const pages = ['dashboard', 'scanner', 'settings'];
        console.log('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü...');

        for (const page of pages) {
            try {
                console.log(`üìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É: ${page}`);
                await this.navigateToPage(page);
                await new Promise(resolve => setTimeout(resolve, 1000));
                console.log(`‚úÖ ${page} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${page}:`, error);
            }
        }

        this.showSuccessNotification('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    getCurrentPage() {
        return this.components.pageManager?.currentPageId || this.state.currentPage;
    }

    isInitialized() {
        return this.state.isInitialized;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏
     */
    async doDestroy() {
        // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        if (this.intervals) {
            Object.values(this.intervals).forEach(interval => clearInterval(interval));
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.saveAppState();

        // –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        if (window.app === this) {
            window.app = null;
        }

        console.log('üóëÔ∏è IP Roast SPA App —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.IPRoastSPAApp = IPRoastSPAApp;

console.log('üèóÔ∏è IPRoastSPAApp –∑–∞–≥—Ä—É–∂–µ–Ω (–ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)');
