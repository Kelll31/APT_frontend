/**
 * SPANavigator - –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è SPA –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
class SPANavigator extends ComponentBase {
    constructor() {
        super('SPANavigator');
        
        this.currentRoute = null;
        this.routes = new Map();
        this.history = [];
        this.maxHistoryLength = 50;
        
        this.config = {
            useHashRouting: true,
            enableBrowserHistory: true,
            defaultRoute: 'dashboard',
            enableTransitions: true
        };
        
        console.log('üß≠ SPANavigator —Å–æ–∑–¥–∞–Ω');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞
     */
    async doInit() {
        this.setupRoutes();
        this.setupEventListeners();
        this.handleInitialRoute();
        
        console.log('‚úÖ SPANavigator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
     */
    setupRoutes() {
        const routes = [
            'dashboard',
            'scanner', 
            'attack-constructor',
            'network-topology',
            'reports',
            'settings'
        ];
        
        routes.forEach(route => {
            this.routes.set(route, {
                id: route,
                title: this.getPageTitle(route),
                isActive: false
            });
        });
        
        console.log('üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:', Array.from(this.routes.keys()));
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –ò—Å—Ç–æ—Ä–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
        if (this.config.enableBrowserHistory) {
            this.addEventListener(window, 'popstate', (event) => {
                const route = this.getRouteFromURL();
                if (route && route !== this.currentRoute) {
                    this.navigateTo(route, { skipHistory: true });
                }
            });
        }
        
        // Hash –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (this.config.useHashRouting) {
            this.addEventListener(window, 'hashchange', (event) => {
                const route = this.getRouteFromHash();
                if (route && route !== this.currentRoute) {
                    this.navigateTo(route, { skipHistory: true });
                }
            });
        }
        
        // –ö–ª–∏–∫–∏ –ø–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–º —Å—Å—ã–ª–∫–∞–º
        this.addEventListener(document, 'click', (event) => {
            const navLink = event.target.closest('[data-navigate]');
            if (navLink) {
                event.preventDefault();
                const route = navLink.dataset.navigate;
                if (route) {
                    this.navigateTo(route);
                }
            }
        });
        
        console.log('‚ö° SPANavigator —Å–æ–±—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
     */
    handleInitialRoute() {
        let initialRoute = this.getRouteFromURL() || this.getRouteFromHash();
        
        if (!initialRoute || !this.routes.has(initialRoute)) {
            initialRoute = this.config.defaultRoute;
        }
        
        this.navigateTo(initialRoute, { skipHistory: true });
        console.log(`üöÄ –ù–∞—á–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç: ${initialRoute}`);
    }

    /**
     * –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É
     */
    async navigateTo(route, options = {}) {
        if (!route || !this.routes.has(route)) {
            console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç: ${route}`);
            return false;
        }
        
        if (route === this.currentRoute && !options.force) {
            console.log(`üìç –£–∂–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${route}`);
            return true;
        }
        
        console.log(`üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è: ${this.currentRoute} ‚Üí ${route}`);
        
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            if (!options.skipHistory) {
                this.addToHistory(route);
                this.updateBrowserURL(route);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
            this.updateRoutesState(route);
            
            // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            this.emit('navigationStart', {
                from: this.currentRoute,
                to: route,
                timestamp: Date.now()
            });
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ PageManager
            if (window.app && window.app.pageManager) {
                await window.app.pageManager.loadPage(route);
            } else {
                throw new Error('PageManager –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ UI
            this.updateNavigationUI(route);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            this.updatePageTitle(route);
            
            const previousRoute = this.currentRoute;
            this.currentRoute = route;
            
            // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            this.emit('navigationComplete', {
                from: previousRoute,
                to: route,
                timestamp: Date.now()
            });
            
            console.log(`‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${route}`);
            return true;
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ "${route}":`, error);
            
            // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—à–∏–±–∫–∏
            this.emit('navigationError', {
                route,
                error,
                timestamp: Date.now()
            });
            
            return false;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
     */
    updateRoutesState(activeRoute) {
        this.routes.forEach((route, id) => {
            route.isActive = (id === activeRoute);
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    updateNavigationUI(activeRoute) {
        // –û–±–Ω–æ–≤–ª—è–µ–º sidebar –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (window.app && window.app.sidebarManager) {
            window.app.sidebarManager.setActivePage(activeRoute);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
        const navItems = document.querySelectorAll('[data-navigate]');
        navItems.forEach(item => {
            const itemRoute = item.dataset.navigate;
            if (itemRoute === activeRoute) {
                item.classList.add('active');
                item.setAttribute('aria-current', 'page');
            } else {
                item.classList.remove('active');
                item.removeAttribute('aria-current');
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º breadcrumb –µ—Å–ª–∏ –µ—Å—Ç—å
        this.updateBreadcrumb(activeRoute);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ breadcrumb
     */
    updateBreadcrumb(route) {
        const breadcrumb = document.getElementById('breadcrumb');
        if (!breadcrumb) return;
        
        const routeInfo = this.routes.get(route);
        if (!routeInfo) return;
        
        breadcrumb.innerHTML = `
            <div class="breadcrumb">
                <span class="breadcrumb-item">
                    <a href="#" data-navigate="dashboard">–ì–ª–∞–≤–Ω–∞—è</a>
                </span>
                ${route !== 'dashboard' ? `
                    <span class="breadcrumb-separator">/</span>
                    <span class="breadcrumb-item active">${routeInfo.title}</span>
                ` : ''}
            </div>
        `;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    updatePageTitle(route) {
        const routeInfo = this.routes.get(route);
        if (!routeInfo) return;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º title –¥–æ–∫—É–º–µ–Ω—Ç–∞
        document.title = `${routeInfo.title} - IP Roast Enterprise 4.0`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ header –µ—Å–ª–∏ –µ—Å—Ç—å
        if (window.app && window.app.headerManager) {
            window.app.headerManager.updatePageTitle(routeInfo.title);
        }
        
        const pageTitleElement = document.getElementById('page-title');
        if (pageTitleElement) {
            pageTitleElement.textContent = routeInfo.title;
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
     */
    addToHistory(route) {
        // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ –∫–æ–Ω—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏
        const lastIndex = this.history.lastIndexOf(route);
        if (lastIndex === this.history.length - 1) {
            return;
        }
        
        this.history.push(route);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if (this.history.length > this.maxHistoryLength) {
            this.history = this.history.slice(-this.maxHistoryLength);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ URL –±—Ä–∞—É–∑–µ—Ä–∞
     */
    updateBrowserURL(route) {
        if (!this.config.enableBrowserHistory) return;
        
        try {
            const url = this.config.useHashRouting 
                ? `#${route}`
                : `/${route}`;
                
            const routeInfo = this.routes.get(route);
            const title = routeInfo ? routeInfo.title : route;
            
            if (this.config.useHashRouting) {
                window.location.hash = route;
            } else {
                window.history.pushState({ route }, title, url);
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è URL:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –∏–∑ URL
     */
    getRouteFromURL() {
        const path = window.location.pathname;
        const route = path.substring(1) || this.config.defaultRoute;
        return this.routes.has(route) ? route : null;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –∏–∑ hash
     */
    getRouteFromHash() {
        const hash = window.location.hash.substring(1);
        return this.routes.has(hash) ? hash : null;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    getPageTitle(route) {
        const titles = {
            'dashboard': '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
            'scanner': '–ú–æ–¥—É–ª—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
            'attack-constructor': '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∞—Ç–∞–∫',
            'network-topology': '–¢–æ–ø–æ–ª–æ–≥–∏—è —Å–µ—Ç–∏',
            'reports': '–û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
            'settings': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã'
        };
        
        return titles[route] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞';
    }

    /**
     * –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
     */
    goBack() {
        if (this.history.length < 2) {
            console.log('üìç –ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∏—Å—Ç–æ—Ä–∏–∏');
            return false;
        }
        
        // –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        this.history.pop();
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π
        const previousRoute = this.history.pop();
        return this.navigateTo(previousRoute);
    }

    /**
     * –ü–µ—Ä–µ—Ö–æ–¥ –≤–ø–µ—Ä–µ–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è)
     */
    goForward() {
        // –í –¥–∞–Ω–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ forward –∏—Å—Ç–æ—Ä–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        // –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        console.log('üìç –ü–µ—Ä–µ—Ö–æ–¥ –≤–ø–µ—Ä–µ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
        return false;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
     */
    getCurrentRoute() {
        return this.currentRoute;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    getHistory() {
        return [...this.history];
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
     */
    canGoBack() {
        return this.history.length > 1;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
     */
    getAvailableRoutes() {
        return Array.from(this.routes.keys());
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ä—à—Ä—É—Ç–µ
     */
    getRouteInfo(route) {
        return this.routes.get(route);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –º–∞—Ä—à—Ä—É—Ç
     */
    isRouteActive(route) {
        return this.currentRoute === route;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
     */
    clearHistory() {
        this.history = [];
        console.log('üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω–∞');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    getStats() {
        return {
            currentRoute: this.currentRoute,
            availableRoutes: this.getAvailableRoutes(),
            history: this.getHistory(),
            canGoBack: this.canGoBack(),
            config: this.config
        };
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞
     */
    async doDestroy() {
        this.clearHistory();
        this.routes.clear();
        
        console.log('üóëÔ∏è SPANavigator —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.SPANavigator = SPANavigator;

console.log('üß≠ SPANavigator –∑–∞–≥—Ä—É–∂–µ–Ω');