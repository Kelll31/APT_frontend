/**
 * IP Roast Enterprise 4.0 - UI Manager Module
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª
 * –í–µ—Ä—Å–∏—è: 4.0.0-Enhanced-UI
 * 
 * @description –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
 * @author IP Roast Security Team
 * @requires attack-constructor-core.js, canvas-manager.js, connection-manager.js
 * @integrates signature-components, rule-generator, test-manager
 */

console.log('üé® Loading UI Manager v4.0.0-Enhanced');

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
 */
class UIManager {
    constructor(coreInstance) {
        this.version = '4.0.0-Enhanced-UI';
        this.core = coreInstance;
        this.isInitialized = false;

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ UI
        this.currentTab = 'properties';
        this.activeModals = new Set();
        this.notifications = [];
        this.searchQuery = '';
        this.selectedCategory = '';

        // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
        this.elements = new Map();
        this.forms = new Map();
        this.modals = new Map();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ UI
        this.settings = {
            animationDuration: 300,
            notificationTimeout: 5000,
            searchDebounceTime: 300,
            maxNotifications: 5,
            autoSave: true,
            theme: 'default'
        };

        // –°–æ–±—ã—Ç–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        this.eventHandlers = new Map();
        this.debounceTimers = new Map();
        this.animationQueue = [];

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏
        this.metrics = {
            tabSwitches: 0,
            searchQueries: 0,
            modalOpens: 0,
            formSubmissions: 0,
            lastActivity: Date.now()
        };

        console.log('üé® UI Manager initialized');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI Manager
     */
    async initialize() {
        try {
            console.log('üöÄ Initializing UI Manager...');

            this.cacheUIElements();
            this.setupTabSystem();
            this.setupModalSystem();
            this.setupFormHandlers();
            this.setupSearchAndFilters();
            this.setupNotificationSystem();
            this.setupKeyboardShortcuts();
            this.setupAccessibility();
            this.initializeTheme();

            this.isInitialized = true;
            console.log('‚úÖ UI Manager initialized successfully');

        } catch (error) {
            console.error('‚ùå UI Manager initialization failed:', error);
            throw error;
        }
    }

    /**
     * –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
     */
    cacheUIElements() {
        const elementSelectors = {
            // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            constructorLayout: '.signature-constructor-layout',
            topRow: '.constructor-top-row',
            librarySection: '.components-library-section',
            propertiesSection: '.properties-testing-section',
            constructorSection: '.rule-constructor-section',

            // –í–∫–ª–∞–¥–∫–∏
            tabButtons: '.tab-button',
            tabContents: '.tab-content',
            propertiesTab: '#tab-properties',
            testingTab: '#tab-testing',
            outputTab: '#tab-output',

            // –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            componentSearch: '#component-search',
            categoryFilter: '#component-category',
            componentCategories: '.component-category',
            componentItems: '.component-item',

            // Canvas –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
            ruleCanvas: '#rule-canvas',
            canvasEmpty: '#canvas-empty',
            logicExpression: '#logic-expression',

            // –§–æ—Ä–º—ã –∏ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            ruleName: '#rule-name',
            ruleType: '#rule-type',
            rulePriority: '#rule-priority',
            outputFormat: '#output-format',
            ruleOutput: '#rule-output',

            // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
            templatesModal: '#templates-modal',
            configModal: '#component-config-modal',

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            componentsCount: '#components-count',
            connectionsCount: '#connections-count',
            ruleComplexity: '#rule-complexity',

            // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            testDataSource: '#test-data-source',
            testInput: '#test-input',
            testResults: '#test-results'
        };

        // –ö—ç—à–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
        Object.entries(elementSelectors).forEach(([key, selector]) => {
            const element = typeof selector === 'string' ?
                document.querySelector(selector) :
                selector;

            if (element) {
                this.elements.set(key, element);
            } else {
                console.warn(`‚ö†Ô∏è UI element not found: ${key} (${selector})`);
            }
        });

        console.log(`üì¶ Cached ${this.elements.size} UI elements`);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≤–∫–ª–∞–¥–æ–∫
     */
    setupTabSystem() {
        const tabButtons = this.elements.get('tabButtons');
        if (!tabButtons) return;

        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ –∫–Ω–æ–ø–∫–∞–º –≤–∫–ª–∞–¥–æ–∫
        document.querySelectorAll('.tab-button').forEach(button => {
            button.addEventListener('click', (e) => {
                const tabName = this.extractTabName(e.target);
                this.switchTab(tabName, true);
            });
        });

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É
        this.switchTab(this.currentTab, false);

        console.log('üìë Tab system initialized');
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –≤–∫–ª–∞–¥–∫–∏ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    extractTabName(element) {
        const id = element.id || element.closest('.tab-button')?.id;
        return id ? id.replace('tab-', '') : 'properties';
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
     */
    switchTab(tabName, animated = true) {
        if (tabName === this.currentTab && animated) return;

        const tabButton = document.getElementById(`tab-${tabName}`);
        const tabContent = document.getElementById(`tab-content-${tabName}`);

        if (!tabButton || !tabContent) {
            console.warn(`‚ö†Ô∏è Tab not found: ${tabName}`);
            return;
        }

        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
        document.querySelectorAll('.tab-button').forEach(btn => {
            btn.classList.remove('active');
        });

        document.querySelectorAll('.tab-content').forEach(content => {
            content.classList.remove('active');
        });

        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        if (animated) {
            this.animateTabSwitch(tabButton, tabContent);
        } else {
            tabButton.classList.add('active');
            tabContent.classList.add('active');
        }

        const previousTab = this.currentTab;
        this.currentTab = tabName;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏
        this.updateTabContent(tabName);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
        this.emit('tabSwitched', {
            from: previousTab,
            to: tabName
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        this.metrics.tabSwitches++;
        this.updateActivity();

        console.log(`üìë Switched to tab: ${tabName}`);
    }

    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
     */
    animateTabSwitch(tabButton, tabContent) {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –∞–Ω–∏–º–∞—Ü–∏–∏
        this.addToAnimationQueue(() => {
            return new Promise(resolve => {
                tabButton.style.transition = `all ${this.settings.animationDuration}ms var(--ease-standard)`;
                tabContent.style.transition = `all ${this.settings.animationDuration}ms var(--ease-standard)`;

                tabButton.classList.add('active');
                tabContent.classList.add('active');

                setTimeout(resolve, this.settings.animationDuration);
            });
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–∫–ª–∞–¥–∫–∏
     */
    updateTabContent(tabName) {
        switch (tabName) {
            case 'properties':
                this.updatePropertiesTab();
                break;
            case 'testing':
                this.updateTestingTab();
                break;
            case 'output':
                this.updateOutputTab();
                break;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å–≤–æ–π—Å—Ç–≤
     */
    updatePropertiesTab() {
        const propertiesContainer = document.getElementById('selected-component');
        if (!propertiesContainer) return;

        const selectedComponent = this.core?.selectedComponent;

        if (!selectedComponent) {
            propertiesContainer.innerHTML = this.generateNoSelectionHTML();
        } else {
            propertiesContainer.innerHTML = this.generatePropertiesHTML(selectedComponent);
            this.setupPropertyControls(selectedComponent);
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è "–Ω–µ—Ç –≤—ã–±–æ—Ä–∞"
     */
    generateNoSelectionHTML() {
        return `
            <div class="no-selection">
                <div class="no-selection-icon">üéØ</div>
                <h4>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω</h4>
                <p>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞ —Ö–æ–ª—Å—Ç–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</p>
                <div class="selection-tips">
                    <div class="tip-item">
                        <span class="tip-icon">üí°</span>
                        <span>–ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É –Ω–∞ canvas</span>
                    </div>
                    <div class="tip-item">
                        <span class="tip-icon">‚öôÔ∏è</span>
                        <span>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π</span>
                    </div>
                </div>
            </div>
        `;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è —Å–≤–æ–π—Å—Ç–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    generatePropertiesHTML(component) {
        const definition = component.definition;
        const parameters = component.parameters;

        let html = `
            <div class="component-properties">
                <div class="component-info-card">
                    <div class="component-header">
                        <div class="component-icon-large">${definition.icon}</div>
                        <div class="component-details">
                            <h4 class="component-title">${definition.name}</h4>
                            <p class="component-description">${definition.description}</p>
                            <div class="component-meta">
                                <span class="component-type-badge" data-type="${definition.type}">
                                    ${definition.type}
                                </span>
                                <span class="component-id">ID: ${component.id}</span>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="properties-form">
                    <h5 class="form-section-title">
                        <span class="section-icon">‚öôÔ∏è</span>
                        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                    </h5>
        `;

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        Object.entries(definition.parameters || {}).forEach(([key, config]) => {
            const value = parameters[key] || config.default || '';
            html += this.generateParameterField(key, config, value, component.id);
        });

        html += `
                </div>
                
                <div class="properties-actions">
                    <div class="action-buttons">
                        <button class="btn btn--primary btn--sm" onclick="uiManager.applyComponentChanges('${component.id}')">
                            <span class="btn-icon">‚úÖ</span>
                            –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        </button>
                        <button class="btn btn--secondary btn--sm" onclick="uiManager.resetComponentParameters('${component.id}')">
                            <span class="btn-icon">üîÑ</span>
                            –°–±—Ä–æ—Å
                        </button>
                        <button class="btn btn--danger btn--sm" onclick="uiManager.deleteComponent('${component.id}')">
                            <span class="btn-icon">üóëÔ∏è</span>
                            –£–¥–∞–ª–∏—Ç—å
                        </button>
                    </div>
                    
                    <div class="properties-info">
                        <div class="info-item">
                            <span class="info-label">–°–æ–∑–¥–∞–Ω:</span>
                            <span class="info-value">${new Date(component.metadata?.created || Date.now()).toLocaleString()}</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">–ò–∑–º–µ–Ω–µ–Ω:</span>
                            <span class="info-value">${new Date(component.metadata?.updated || Date.now()).toLocaleString()}</span>
                        </div>
                    </div>
                </div>
            </div>
        `;

        return html;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
     */
    generateParameterField(key, config, value, componentId) {
        const fieldId = `param-${componentId}-${key}`;
        const isRequired = config.required ? 'required' : '';
        const requiredMark = config.required ? '<span class="required-mark">*</span>' : '';

        let html = `
            <div class="form-group parameter-field" data-parameter="${key}">
                <label class="form-label" for="${fieldId}">
                    ${this.formatParameterLabel(key)}${requiredMark}
                </label>
        `;

        switch (config.type) {
            case 'select':
                html += `
                    <select class="form-control parameter-input" id="${fieldId}" data-param="${key}" ${isRequired}>
                        ${config.options.map(option =>
                    `<option value="${option}" ${value === option ? 'selected' : ''}>${option}</option>`
                ).join('')}
                    </select>
                `;
                break;

            case 'boolean':
                const checked = value ? 'checked' : '';
                html += `
                    <div class="checkbox-wrapper">
                        <input type="checkbox" class="form-control parameter-input" id="${fieldId}" 
                               data-param="${key}" ${checked}>
                        <label class="checkbox-label" for="${fieldId}">
                            <span class="checkbox-indicator"></span>
                            <span class="checkbox-text">${config.description || '–í–∫–ª—é—á–∏—Ç—å –æ–ø—Ü–∏—é'}</span>
                        </label>
                    </div>
                `;
                break;

            case 'number':
                html += `
                    <input type="number" class="form-control parameter-input" id="${fieldId}" 
                           data-param="${key}" value="${value}" ${isRequired}
                           ${config.min !== undefined ? `min="${config.min}"` : ''}
                           ${config.max !== undefined ? `max="${config.max}"` : ''}
                           ${config.step !== undefined ? `step="${config.step}"` : ''}>
                `;
                break;

            case 'datetime':
                html += `
                    <input type="time" class="form-control parameter-input" id="${fieldId}" 
                           data-param="${key}" value="${value}" ${isRequired}>
                `;
                break;

            case 'array':
                const arrayValue = Array.isArray(value) ? value.join(', ') : value;
                html += `
                    <textarea class="form-control parameter-input" id="${fieldId}" 
                              data-param="${key}" rows="3" ${isRequired}
                              placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é">${arrayValue}</textarea>
                `;
                break;

            default: // string –∏ –¥—Ä—É–≥–∏–µ
                html += `
                    <input type="text" class="form-control parameter-input" id="${fieldId}" 
                           data-param="${key}" value="${value}" ${isRequired}
                           placeholder="${config.placeholder || ''}">
                `;
        }

        if (config.description) {
            html += `<small class="form-help">${config.description}</small>`;
        }

        if (config.unit) {
            html += `<small class="form-unit">–ï–¥–∏–Ω–∏—Ü–∞: ${config.unit}</small>`;
        }

        html += '</div>';
        return html;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
     */
    formatParameterLabel(key) {
        return key.split('_')
            .map(word => word.charAt(0).toUpperCase() + word.slice(1))
            .join(' ');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤ —Å–≤–æ–π—Å—Ç–≤
     */
    setupPropertyControls(component) {
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        document.querySelectorAll('.parameter-input').forEach(input => {
            input.addEventListener('change', (e) => {
                this.handleParameterChange(e, component.id);
            });

            input.addEventListener('input', (e) => {
                this.handleParameterInput(e, component.id);
            });
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
     */
    handleParameterChange(event, componentId) {
        const paramName = event.target.dataset.param;
        let value = event.target.value;

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        if (event.target.type === 'checkbox') {
            value = event.target.checked;
        } else if (event.target.type === 'number') {
            value = parseFloat(value) || 0;
        } else if (event.target.closest('[data-parameter]')?.querySelector('textarea')) {
            // –î–ª—è –º–∞—Å—Å–∏–≤–æ–≤
            value = value.split(',').map(v => v.trim()).filter(v => v);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        this.updateComponentParameter(componentId, paramName, value);

        console.log(`üîß Parameter changed: ${componentId}.${paramName} = ${value}`);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä (–¥–ª—è debounce)
     */
    handleParameterInput(event, componentId) {
        const paramName = event.target.dataset.param;

        // Debounce –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á–∞—Å—Ç—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        this.debounce(`param-${componentId}-${paramName}`, () => {
            this.validateParameter(componentId, paramName, event.target.value);
        }, this.settings.searchDebounceTime);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    updateComponentParameter(componentId, paramName, value) {
        if (!this.core?.canvasNodes) return;

        const component = this.core.canvasNodes.get(componentId);
        if (!component) return;

        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if (!this.validateParameterValue(component, paramName, value)) {
            this.showValidationError(`–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ "${this.formatParameterLabel(paramName)}"`);
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä
        component.parameters[paramName] = value;
        component.metadata.updated = new Date().toISOString();

        // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π
        this.markComponentAsModified(componentId);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        this.emit('parameterChanged', {
            componentId,
            paramName,
            value,
            component
        });

        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if (this.settings.autoSave) {
            this.debounce('autosave', () => {
                this.core?.saveCurrentState?.();
            }, 2000);
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
     */
    validateParameterValue(component, paramName, value) {
        const definition = component.definition;
        const paramConfig = definition.parameters[paramName];

        if (!paramConfig) return false;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if (paramConfig.required && (!value && value !== 0 && value !== false)) {
            return false;
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        if (definition.validation) {
            const testParams = { ...component.parameters, [paramName]: value };
            return definition.validation(testParams);
        }

        return true;
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (–≤–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å)
     */
    validateParameter(componentId, paramName, value) {
        const component = this.core?.canvasNodes?.get(componentId);
        if (!component) return;

        const fieldId = `param-${componentId}-${paramName}`;
        const input = document.getElementById(fieldId);
        if (!input) return;

        const isValid = this.validateParameterValue(component, paramName, value);

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        input.classList.toggle('invalid', !isValid);
        input.classList.toggle('valid', isValid);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        const existingError = input.parentNode.querySelector('.field-error');
        if (existingError) {
            existingError.remove();
        }

        if (!isValid && value) {
            const errorMessage = document.createElement('small');
            errorMessage.className = 'field-error';
            errorMessage.textContent = `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è "${this.formatParameterLabel(paramName)}"`;
            input.parentNode.appendChild(errorMessage);
        }
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    applyComponentChanges(componentId) {
        const component = this.core?.canvasNodes?.get(componentId);
        if (!component) return;

        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Ñ–æ—Ä–º—ã
        const newParameters = {};
        let hasErrors = false;

        document.querySelectorAll('.parameter-input').forEach(input => {
            const paramName = input.dataset.param;
            let value = input.value;

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
            if (input.type === 'checkbox') {
                value = input.checked;
            } else if (input.type === 'number') {
                value = parseFloat(value) || 0;
            }

            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            if (!this.validateParameterValue(component, paramName, value)) {
                hasErrors = true;
                input.classList.add('invalid');
            } else {
                input.classList.remove('invalid');
                newParameters[paramName] = value;
            }
        });

        if (hasErrors) {
            this.showValidationError('–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º');
            return;
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        component.parameters = newParameters;
        component.metadata.updated = new Date().toISOString();

        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        this.core?.updateComponentVisualization?.(componentId);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
        this.showSuccessMessage('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        this.emit('componentUpdated', { componentId, parameters: newParameters });

        console.log(`‚úÖ Applied changes to component: ${componentId}`);
    }

    /**
     * –°–±—Ä–æ—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    resetComponentParameters(componentId) {
        const component = this.core?.canvasNodes?.get(componentId);
        if (!component) return;

        if (!confirm('–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?')) {
            return;
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const defaultParams = {};
        Object.entries(component.definition.parameters || {}).forEach(([key, config]) => {
            defaultParams[key] = config.default !== undefined ? config.default : '';
        });

        component.parameters = defaultParams;
        component.metadata.updated = new Date().toISOString();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
        this.updatePropertiesTab();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showInfoMessage('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å–±—Ä–æ—à–µ–Ω—ã');

        console.log(`üîÑ Reset parameters for component: ${componentId}`);
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ UI
     */
    deleteComponent(componentId) {
        if (this.core?.canvasManager?.deleteNode) {
            this.core.canvasManager.deleteNode(componentId);
        } else if (this.core?.deleteNode) {
            this.core.deleteNode(componentId);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    updateTestingTab() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.updateTestingInterface();

        console.log('üß™ Testing tab updated');
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    updateTestingInterface() {
        const hasComponents = (this.core?.canvasNodes?.size || 0) > 0;
        const testControls = document.querySelector('.test-controls');

        if (testControls) {
            testControls.style.opacity = hasComponents ? '1' : '0.5';

            const testButtons = testControls.querySelectorAll('.btn');
            testButtons.forEach(btn => {
                btn.disabled = !hasComponents;
            });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.updateTestingStats();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    updateTestingStats() {
        const statsElements = {
            componentsCount: this.core?.canvasNodes?.size || 0,
            connectionsCount: this.core?.connections?.size || 0,
            ruleComplexity: this.calculateRuleComplexity()
        };

        Object.entries(statsElements).forEach(([key, value]) => {
            const element = this.elements.get(key);
            if (element) {
                element.textContent = value;
            }
        });
    }

    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞
     */
    calculateRuleComplexity() {
        const componentCount = this.core?.canvasNodes?.size || 0;
        const connectionCount = this.core?.connections?.size || 0;

        if (componentCount === 0) return '–ù–µ—Ç –ø—Ä–∞–≤–∏–ª';
        if (componentCount <= 2 && connectionCount <= 1) return '–ü—Ä–æ—Å—Ç–∞—è';
        if (componentCount <= 5 && connectionCount <= 4) return '–°—Ä–µ–¥–Ω—è—è';
        return '–°–ª–æ–∂–Ω–∞—è';
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –≤—ã–≤–æ–¥–∞
     */
    updateOutputTab() {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –ø—Ä–∞–≤–∏–ª–∞
        this.generateRuleOutput();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∞–≤–∏–ª–∞
        this.updateRuleStatistics();

        console.log('üìù Output tab updated');
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—ã–≤–æ–¥–∞ –ø—Ä–∞–≤–∏–ª–∞
     */
    generateRuleOutput() {
        if (this.core?.generateRuleOutput) {
            this.core.generateRuleOutput();
        } else {
            // Fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            const outputElement = this.elements.get('ruleOutput');
            if (outputElement) {
                const hasRules = (this.core?.canvasNodes?.size || 0) > 0;
                outputElement.textContent = hasRules ?
                    '# –ü—Ä–∞–≤–∏–ª–æ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ...' :
                    '# –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞\n# –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ —Ä–∞–±–æ—á—É—é –æ–±–ª–∞—Å—Ç—å';
            }
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∞–≤–∏–ª–∞
     */
    updateRuleStatistics() {
        const ruleSize = this.elements.get('ruleOutput')?.textContent?.length || 0;
        const conditions = this.core?.canvasNodes?.size || 0;

        // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const statsElements = document.querySelectorAll('[data-stat]');
        statsElements.forEach(element => {
            const statType = element.dataset.stat;
            let value = '';

            switch (statType) {
                case 'size':
                    value = `${ruleSize} —Å–∏–º–≤–æ–ª–æ–≤`;
                    break;
                case 'conditions':
                    value = conditions;
                    break;
                case 'performance':
                    value = this.estimatePerformance();
                    break;
            }

            if (value !== '') {
                element.textContent = value;
            }
        });
    }

    /**
     * –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞
     */
    estimatePerformance() {
        const componentCount = this.core?.canvasNodes?.size || 0;
        const connectionCount = this.core?.connections?.size || 0;

        let score = 1000;
        score -= componentCount * 50;
        score -= connectionCount * 25;

        if (score > 500) return '–í—ã—Å–æ–∫–∞—è';
        if (score > 250) return '–°—Ä–µ–¥–Ω—è—è';
        return '–ù–∏–∑–∫–∞—è';
    }

    // =======================================================
    // –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê
    // =======================================================

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
     */
    setupModalSystem() {
        // –ö—ç—à–∏—Ä—É–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        document.querySelectorAll('.modal').forEach(modal => {
            const modalId = modal.id;
            this.modals.set(modalId, {
                element: modal,
                isOpen: false,
                openTime: null
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.closeAllModals();
            }
        });

        // –ö–ª–∏–∫ –ø–æ backdrop –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        document.querySelectorAll('.modal').forEach(modal => {
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    this.closeModal(modal.id);
                }
            });
        });

        // –ö–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        document.querySelectorAll('.modal-close').forEach(closeBtn => {
            closeBtn.addEventListener('click', (e) => {
                const modal = e.target.closest('.modal');
                if (modal) {
                    this.closeModal(modal.id);
                }
            });
        });

        console.log(`ü™ü Modal system initialized with ${this.modals.size} modals`);
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    showModal(modalId, data = {}) {
        const modal = this.modals.get(modalId);
        if (!modal) {
            console.warn(`‚ö†Ô∏è Modal not found: ${modalId}`);
            return false;
        }

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        this.closeAllModals();

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        this.prepareModalData(modalId, data);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        modal.element.style.display = 'flex';
        modal.element.classList.add('show');
        modal.isOpen = true;
        modal.openTime = Date.now();

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
        this.activeModals.add(modalId);

        // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
        const firstInput = modal.element.querySelector('input, select, textarea, button');
        if (firstInput) {
            firstInput.focus();
        }

        // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É body
        document.body.style.overflow = 'hidden';

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏
        this.emit('modalOpened', { modalId, data });

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        this.metrics.modalOpens++;

        console.log(`ü™ü Opened modal: ${modalId}`);
        return true;
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    prepareModalData(modalId, data) {
        switch (modalId) {
            case 'templates-modal':
                this.loadRuleTemplates();
                break;
            case 'component-config-modal':
                this.loadComponentConfig(data);
                break;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–∞–≤–∏–ª
     */
    loadRuleTemplates() {
        const templatesGrid = document.querySelector('.templates-grid');
        if (!templatesGrid) return;

        // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã
        const templates = this.core?.getRuleTemplates?.() || {};

        let html = '';
        Object.entries(templates).forEach(([templateId, template]) => {
            html += `
                <div class="template-card" onclick="uiManager.loadTemplate('${templateId}')">
                    <div class="template-icon">${template.icon || 'üìã'}</div>
                    <h4>${template.name}</h4>
                    <p>${template.description}</p>
                    <div class="template-stats">
                        <span class="template-complexity ${template.complexity || 'medium'}">
                            ${template.complexity || 'Medium'}
                        </span>
                        <span class="template-components">
                            ${template.components?.length || 0} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                        </span>
                    </div>
                </div>
            `;
        });

        if (html === '') {
            html = `
                <div class="no-templates">
                    <div class="no-templates-icon">üìã</div>
                    <h4>–®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h4>
                    <p>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —à–∞–±–ª–æ–Ω –ø—Ä–∞–≤–∏–ª–∞</p>
                </div>
            `;
        }

        templatesGrid.innerHTML = html;
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞
     */
    loadTemplate(templateId) {
        if (this.core?.loadRuleTemplate) {
            const success = this.core.loadRuleTemplate(templateId);
            if (success) {
                this.closeModal('templates-modal');
                this.showSuccessMessage(`–®–∞–±–ª–æ–Ω "${templateId}" –∑–∞–≥—Ä—É–∂–µ–Ω`);
            }
        } else {
            this.showErrorMessage('–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    closeModal(modalId) {
        const modal = this.modals.get(modalId);
        if (!modal || !modal.isOpen) return false;

        // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è
        modal.element.classList.remove('show');

        setTimeout(() => {
            modal.element.style.display = 'none';
        }, this.settings.animationDuration);

        modal.isOpen = false;
        this.activeModals.delete(modalId);

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É body –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        if (this.activeModals.size === 0) {
            document.body.style.overflow = '';
        }

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–∫—Ä—ã—Ç–∏–∏
        this.emit('modalClosed', { modalId });

        console.log(`ü™ü Closed modal: ${modalId}`);
        return true;
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
     */
    closeAllModals() {
        Array.from(this.activeModals).forEach(modalId => {
            this.closeModal(modalId);
        });
    }

    // =======================================================
    // –ü–û–ò–°–ö –ò –§–ò–õ–¨–¢–†–ê–¶–ò–Ø
    // =======================================================

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    setupSearchAndFilters() {
        const searchInput = this.elements.get('componentSearch');
        const categoryFilter = this.elements.get('categoryFilter');

        // –ü–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        if (searchInput) {
            searchInput.addEventListener('input', (e) => {
                this.handleSearchInput(e.target.value);
            });
        }

        // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if (categoryFilter) {
            categoryFilter.addEventListener('change', (e) => {
                this.handleCategoryFilter(e.target.value);
            });
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        this.updateComponentFilters();

        console.log('üîç Search and filters initialized');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤ –ø–æ–∏—Å–∫
     */
    handleSearchInput(query) {
        this.searchQuery = query.toLowerCase();

        // Debounce –ø–æ–∏—Å–∫–∞
        this.debounce('component-search', () => {
            this.filterComponents();
            this.metrics.searchQueries++;
        }, this.settings.searchDebounceTime);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
     */
    handleCategoryFilter(category) {
        this.selectedCategory = category;
        this.filterComponents();

        console.log(`üìÇ Applied category filter: ${category}`);
    }

    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
     */
    filterComponents() {
        const components = document.querySelectorAll('.component-item');
        let visibleCount = 0;

        components.forEach(component => {
            const componentId = component.dataset.component;
            const componentType = component.dataset.type;
            const componentName = component.querySelector('.component-name')?.textContent?.toLowerCase() || '';
            const componentDesc = component.querySelector('.component-description')?.textContent?.toLowerCase() || '';

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            const matchesSearch = !this.searchQuery ||
                componentId.toLowerCase().includes(this.searchQuery) ||
                componentName.includes(this.searchQuery) ||
                componentDesc.includes(this.searchQuery);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            const matchesCategory = !this.selectedCategory || componentType === this.selectedCategory;

            const isVisible = matchesSearch && matchesCategory;

            component.style.display = isVisible ? 'flex' : 'none';

            if (isVisible) {
                visibleCount++;
                this.highlightSearchTerms(component);
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        this.updateCategoryCounters(visibleCount);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        this.emit('componentsFiltered', {
            query: this.searchQuery,
            category: this.selectedCategory,
            visibleCount
        });

        console.log(`üîç Filtered components: ${visibleCount} visible`);
    }

    /**
     * –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
     */
    highlightSearchTerms(component) {
        if (!this.searchQuery) return;

        const textElements = component.querySelectorAll('.component-name, .component-description');
        textElements.forEach(element => {
            const text = element.textContent;
            const regex = new RegExp(`(${this.escapeRegex(this.searchQuery)})`, 'gi');
            const highlightedText = text.replace(regex, '<mark>$1</mark>');

            if (highlightedText !== text) {
                element.innerHTML = highlightedText;
            }
        });
    }

    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
     */
    escapeRegex(string) {
        return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    updateCategoryCounters(totalVisible) {
        document.querySelectorAll('.component-category').forEach(category => {
            const categoryId = category.dataset.category;
            const categoryComponents = category.querySelectorAll('.component-item:not([style*="display: none"])');
            const count = categoryComponents.length;

            const countElement = category.querySelector('.category-count');
            if (countElement) {
                countElement.textContent = count;
            }

            // –°–∫—Ä—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ
            if (this.searchQuery && count === 0) {
                category.style.display = 'none';
            } else {
                category.style.display = '';
            }
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
     */
    updateComponentFilters() {
        // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        const categories = new Set();
        document.querySelectorAll('.component-item').forEach(item => {
            const type = item.dataset.type;
            if (type) categories.add(type);
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º select —Ñ–∏–ª—å—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        const categoryFilter = this.elements.get('categoryFilter');
        if (categoryFilter) {
            const currentValue = categoryFilter.value;
            categoryFilter.innerHTML = '<option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>';

            Array.from(categories).sort().forEach(category => {
                const option = document.createElement('option');
                option.value = category;
                option.textContent = this.formatCategoryName(category);
                if (category === currentValue) {
                    option.selected = true;
                }
                categoryFilter.appendChild(option);
            });
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    formatCategoryName(category) {
        const categoryNames = {
            'network': '–°–µ—Ç–µ–≤—ã–µ',
            'file': '–§–∞–π–ª–æ–≤—ã–µ',
            'content': '–ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ',
            'behavioral': '–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ',
            'temporal': '–í—Ä–µ–º–µ–Ω–Ω—ã–µ'
        };

        return categoryNames[category] || category.charAt(0).toUpperCase() + category.slice(1);
    }

    // =======================================================
    // –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
    // =======================================================

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    setupNotificationSystem() {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        let container = document.getElementById('notification-container');
        if (!container) {
            container = document.createElement('div');
            container.id = 'notification-container';
            container.className = 'notification-container';
            document.body.appendChild(container);
        }

        this.notificationContainer = container;
        console.log('üîî Notification system initialized');
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
     */
    showSuccessMessage(message, duration = null) {
        return this.showNotification(message, 'success', duration);
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
     */
    showErrorMessage(message, duration = null) {
        return this.showNotification(message, 'error', duration);
    }

    /**
     * –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    showInfoMessage(message, duration = null) {
        return this.showNotification(message, 'info', duration);
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è-–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
     */
    showWarningMessage(message, duration = null) {
        return this.showNotification(message, 'warning', duration);
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    showValidationError(message) {
        return this.showNotification(message, 'validation', 8000);
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    showNotification(message, type = 'info', duration = null) {
        const id = `notification-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
        const actualDuration = duration || this.settings.notificationTimeout;

        const notification = {
            id,
            message,
            type,
            timestamp: Date.now(),
            duration: actualDuration
        };

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (this.notifications.length >= this.settings.maxNotifications) {
            const oldestNotification = this.notifications.shift();
            this.removeNotificationElement(oldestNotification.id);
        }

        this.notifications.push(notification);

        // –°–æ–∑–¥–∞–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç
        const element = this.createNotificationElement(notification);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        this.notificationContainer.appendChild(element);

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        requestAnimationFrame(() => {
            element.classList.add('show');
        });

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        setTimeout(() => {
            this.hideNotification(id);
        }, actualDuration);

        console.log(`üîî Notification shown: ${type} - ${message}`);
        return id;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    createNotificationElement(notification) {
        const element = document.createElement('div');
        element.className = `notification notification--${notification.type}`;
        element.id = notification.id;

        const icons = {
            success: '‚úÖ',
            error: '‚ùå',
            warning: '‚ö†Ô∏è',
            info: '‚ÑπÔ∏è',
            validation: 'üö´'
        };

        element.innerHTML = `
            <div class="notification-content">
                <div class="notification-icon">${icons[notification.type] || '‚ÑπÔ∏è'}</div>
                <div class="notification-message">${notification.message}</div>
                <button class="notification-close" onclick="uiManager.hideNotification('${notification.id}')">
                    √ó
                </button>
            </div>
            <div class="notification-progress"></div>
        `;

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        const progressBar = element.querySelector('.notification-progress');
        if (progressBar) {
            progressBar.style.animationDuration = `${notification.duration}ms`;
        }

        return element;
    }

    /**
     * –°–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    hideNotification(notificationId) {
        const element = document.getElementById(notificationId);
        if (element) {
            element.classList.remove('show');
            element.classList.add('hide');

            setTimeout(() => {
                this.removeNotificationElement(notificationId);
            }, this.settings.animationDuration);
        }

        // –£–¥–∞–ª—è–µ–º –∏–∑ –º–∞—Å—Å–∏–≤–∞
        this.notifications = this.notifications.filter(n => n.id !== notificationId);
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    removeNotificationElement(notificationId) {
        const element = document.getElementById(notificationId);
        if (element && element.parentNode) {
            element.parentNode.removeChild(element);
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    clearAllNotifications() {
        this.notifications.forEach(notification => {
            this.hideNotification(notification.id);
        });
        this.notifications = [];
    }

    // =======================================================
    // –§–û–†–ú–´ –ò –≠–õ–ï–ú–ï–ù–¢–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø
    // =======================================================

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ–æ—Ä–º
     */
    setupFormHandlers() {
        // –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–æ–º
        const ruleControls = {
            ruleName: this.elements.get('ruleName'),
            ruleType: this.elements.get('ruleType'),
            rulePriority: this.elements.get('rulePriority'),
            outputFormat: this.elements.get('outputFormat')
        };

        Object.entries(ruleControls).forEach(([key, element]) => {
            if (element) {
                element.addEventListener('change', (e) => {
                    this.handleRuleControlChange(key, e.target.value);
                });

                element.addEventListener('input', (e) => {
                    this.handleRuleControlInput(key, e.target.value);
                });
            }
        });

        // –§–æ—Ä–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.setupTestingForm();

        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º
        this.setupFormAutoSave();

        console.log('üìù Form handlers initialized');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–æ–º
     */
    handleRuleControlChange(controlName, value) {
        if (!this.core?.currentRule) return;

        switch (controlName) {
            case 'ruleName':
                this.core.currentRule.name = value;
                this.markRuleAsModified();
                break;
            case 'ruleType':
                this.core.currentRule.type = value;
                this.generateRuleOutput(); // –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
                break;
            case 'rulePriority':
                this.core.currentRule.priority = value;
                this.generateRuleOutput(); // –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
                break;
            case 'outputFormat':
                this.generateRuleOutput(); // –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
                break;
        }

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        this.emit('ruleControlChanged', { controlName, value });

        console.log(`üéõÔ∏è Rule control changed: ${controlName} = ${value}`);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (debounced)
     */
    handleRuleControlInput(controlName, value) {
        // Debounce –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á–∞—Å—Ç—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        this.debounce(`rule-control-${controlName}`, () => {
            this.handleRuleControlChange(controlName, value);
        }, 500);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    setupTestingForm() {
        const testDataSource = this.elements.get('testDataSource');
        const testInput = this.elements.get('testInput');

        if (testDataSource) {
            testDataSource.addEventListener('change', (e) => {
                this.handleTestDataSourceChange(e.target.value);
            });
        }

        if (testInput) {
            testInput.addEventListener('input', (e) => {
                this.updateTestingInterface();
            });
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    handleTestDataSourceChange(source) {
        const testInput = this.elements.get('testInput');
        if (!testInput) return;

        switch (source) {
            case 'sample':
                testInput.placeholder = '–ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –æ–±—Ä–∞–∑—Ü—ã –¥–∞–Ω–Ω—ã—Ö...';
                testInput.disabled = true;
                break;
            case 'live':
                testInput.placeholder = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∂–∏–≤–æ–º—É —Ç—Ä–∞—Ñ–∏–∫—É...';
                testInput.disabled = true;
                break;
            case 'upload':
                testInput.placeholder = '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏...';
                testInput.disabled = true;
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
                break;
            case 'manual':
                testInput.placeholder = '–í–≤–µ–¥–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...';
                testInput.disabled = false;
                break;
        }

        console.log(`üß™ Test data source changed: ${source}`);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º
     */
    setupFormAutoSave() {
        if (!this.settings.autoSave) return;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        document.addEventListener('input', (e) => {
            if (e.target.matches('.form-control, .parameter-input')) {
                this.debounce('form-autosave', () => {
                    this.saveFormState();
                }, 2000);
            }
        });

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        this.restoreFormState();
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º
     */
    saveFormState() {
        const formState = {
            timestamp: Date.now(),
            ruleName: this.elements.get('ruleName')?.value || '',
            ruleType: this.elements.get('ruleType')?.value || 'detection',
            rulePriority: this.elements.get('rulePriority')?.value || 'medium',
            outputFormat: this.elements.get('outputFormat')?.value || 'snort',
            searchQuery: this.searchQuery,
            selectedCategory: this.selectedCategory,
            currentTab: this.currentTab
        };

        try {
            localStorage.setItem('ui-manager-form-state', JSON.stringify(formState));
            console.log('üíæ Form state saved');
        } catch (error) {
            console.error('‚ùå Error saving form state:', error);
        }
    }

    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º
     */
    restoreFormState() {
        try {
            const saved = localStorage.getItem('ui-manager-form-state');
            if (!saved) return;

            const formState = JSON.parse(saved);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å (–Ω–µ —Å—Ç–∞—Ä—à–µ —á–∞—Å–∞)
            const ageMinutes = (Date.now() - formState.timestamp) / (1000 * 60);
            if (ageMinutes > 60) return;

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            Object.entries(formState).forEach(([key, value]) => {
                if (key === 'timestamp') return;

                const element = this.elements.get(key);
                if (element && element.value !== undefined) {
                    element.value = value;
                } else if (key === 'searchQuery' && value) {
                    this.searchQuery = value;
                    const searchInput = this.elements.get('componentSearch');
                    if (searchInput) searchInput.value = value;
                } else if (key === 'selectedCategory' && value) {
                    this.selectedCategory = value;
                } else if (key === 'currentTab' && value !== this.currentTab) {
                    this.currentTab = value;
                }
            });

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if (formState.searchQuery || formState.selectedCategory) {
                this.filterComponents();
            }

            console.log('üîÑ Form state restored');
        } catch (error) {
            console.error('‚ùå Error restoring form state:', error);
        }
    }

    // =======================================================
    // –ì–û–†–Ø–ß–ò–ï –ö–õ–ê–í–ò–®–ò –ò –î–û–°–¢–£–ü–ù–û–°–¢–¨
    // =======================================================

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
     */
    setupKeyboardShortcuts() {
        document.addEventListener('keydown', (e) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
            if (e.target.matches('input, textarea, select')) return;

            // –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å Ctrl
            if (e.ctrlKey || e.metaKey) {
                switch (e.key) {
                    case '1':
                        e.preventDefault();
                        this.switchTab('properties');
                        break;
                    case '2':
                        e.preventDefault();
                        this.switchTab('testing');
                        break;
                    case '3':
                        e.preventDefault();
                        this.switchTab('output');
                        break;
                    case 'f':
                        e.preventDefault();
                        this.focusSearch();
                        break;
                    case 'm':
                        e.preventDefault();
                        this.showModal('templates-modal');
                        break;
                }
            }
            // –û—Ç–¥–µ–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
            else {
                switch (e.key) {
                    case 'Escape':
                        this.handleEscapeKey();
                        break;
                    case 'F1':
                        e.preventDefault();
                        this.showHelpModal();
                        break;
                    case '/':
                        if (!e.target.matches('input, textarea')) {
                            e.preventDefault();
                            this.focusSearch();
                        }
                        break;
                }
            }
        });

        console.log('‚å®Ô∏è Keyboard shortcuts initialized');
    }

    /**
     * –§–æ–∫—É—Å –Ω–∞ –ø–æ–∏—Å–∫–µ
     */
    focusSearch() {
        const searchInput = this.elements.get('componentSearch');
        if (searchInput) {
            searchInput.focus();
            searchInput.select();
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à–∏ Escape
     */
    handleEscapeKey() {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        if (this.activeModals.size > 0) {
            this.closeAllModals();
            return;
        }

        // –û—á–∏—â–∞–µ–º –ø–æ–∏—Å–∫
        if (this.searchQuery) {
            const searchInput = this.elements.get('componentSearch');
            if (searchInput) {
                searchInput.value = '';
                this.handleSearchInput('');
            }
            return;
        }

        // –û—á–∏—â–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        if (this.core?.clearSelection) {
            this.core.clearSelection();
        }
    }

    /**
     * –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–º–æ—â–∏
     */
    showHelpModal() {
        const helpContent = `
            <div class="help-content">
                <h3>–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏</h3>
                <div class="shortcuts-grid">
                    <div class="shortcut-item">
                        <kbd>Ctrl+1</kbd>
                        <span>–í–∫–ª–∞–¥–∫–∞ "–°–≤–æ–π—Å—Ç–≤–∞"</span>
                    </div>
                    <div class="shortcut-item">
                        <kbd>Ctrl+2</kbd>
                        <span>–í–∫–ª–∞–¥–∫–∞ "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"</span>
                    </div>
                    <div class="shortcut-item">
                        <kbd>Ctrl+3</kbd>
                        <span>–í–∫–ª–∞–¥–∫–∞ "–í—ã–≤–æ–¥"</span>
                    </div>
                    <div class="shortcut-item">
                        <kbd>Ctrl+F</kbd>
                        <span>–ü–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</span>
                    </div>
                    <div class="shortcut-item">
                        <kbd>Ctrl+M</kbd>
                        <span>–®–∞–±–ª–æ–Ω—ã –ø—Ä–∞–≤–∏–ª</span>
                    </div>
                    <div class="shortcut-item">
                        <kbd>Escape</kbd>
                        <span>–û—Ç–º–µ–Ω–∞/–ó–∞–∫—Ä—ã—Ç–∏–µ</span>
                    </div>
                    <div class="shortcut-item">
                        <kbd>/</kbd>
                        <span>–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫</span>
                    </div>
                </div>
            </div>
        `;

        this.showInfoMessage('–ù–∞–∂–º–∏—Ç–µ F1 –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏', 3000);

        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–º–æ—â–∏
        console.log('‚ùì Help requested - shortcuts available');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (accessibility)
     */
    setupAccessibility() {
        // ARIA labels –∏ —Ä–æ–ª–∏
        this.setupAriaLabels();

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        this.setupKeyboardNavigation();

        // –§–æ–∫—É—Å-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        this.setupFocusIndicators();

        console.log('‚ôø Accessibility features initialized');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ARIA –º–µ—Ç–æ–∫
     */
    setupAriaLabels() {
        // –í–∫–ª–∞–¥–∫–∏
        document.querySelectorAll('.tab-button').forEach((button, index) => {
            button.setAttribute('role', 'tab');
            button.setAttribute('aria-selected', button.classList.contains('active'));
            button.setAttribute('tabindex', button.classList.contains('active') ? '0' : '-1');
        });

        // –ü–∞–Ω–µ–ª–∏ –≤–∫–ª–∞–¥–æ–∫
        document.querySelectorAll('.tab-content').forEach(content => {
            content.setAttribute('role', 'tabpanel');
            content.setAttribute('aria-hidden', !content.classList.contains('active'));
        });

        // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        document.querySelectorAll('.component-item').forEach(item => {
            const name = item.querySelector('.component-name')?.textContent;
            const description = item.querySelector('.component-description')?.textContent;
            if (name) {
                item.setAttribute('aria-label', `${name}: ${description}`);
            }
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
     */
    setupKeyboardNavigation() {
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–∫–ª–∞–¥–∫–∞–º —Å—Ç—Ä–µ–ª–∫–∞–º–∏
        document.querySelector('.section-tabs')?.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowLeft' || e.key === 'ArrowRight') {
                e.preventDefault();
                const tabs = [...document.querySelectorAll('.tab-button')];
                const currentIndex = tabs.findIndex(tab => tab.classList.contains('active'));

                let nextIndex;
                if (e.key === 'ArrowLeft') {
                    nextIndex = currentIndex > 0 ? currentIndex - 1 : tabs.length - 1;
                } else {
                    nextIndex = currentIndex < tabs.length - 1 ? currentIndex + 1 : 0;
                }

                const nextTab = tabs[nextIndex];
                if (nextTab) {
                    const tabName = this.extractTabName(nextTab);
                    this.switchTab(tabName);
                    nextTab.focus();
                }
            }
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ñ–æ–∫—É—Å–∞
     */
    setupFocusIndicators() {
        // –£–ª—É—á—à–µ–Ω–Ω—ã–µ focus-visible —Å—Ç–∏–ª–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ CSS
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

        document.addEventListener('focusin', (e) => {
            if (e.target.matches('.tab-button, .component-item, .form-control')) {
                this.updateActivity();
            }
        });
    }

    // =======================================================
    // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –¢–ï–ú–´
    // =======================================================

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã
     */
    initializeTheme() {
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É
        const savedTheme = localStorage.getItem('ui-theme') || this.settings.theme;
        this.setTheme(savedTheme);

        // –°–ª—É—à–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
        if (window.matchMedia) {
            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
                if (this.settings.theme === 'auto') {
                    this.setTheme('auto');
                }
            });
        }

        console.log(`üé® Theme initialized: ${savedTheme}`);
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–º—ã
     */
    setTheme(theme) {
        this.settings.theme = theme;

        let actualTheme = theme;
        if (theme === 'auto') {
            actualTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
        }

        document.documentElement.setAttribute('data-theme', actualTheme);
        localStorage.setItem('ui-theme', theme);

        this.emit('themeChanged', { theme: actualTheme, original: theme });
    }

    // =======================================================
    // –£–¢–ò–õ–ò–¢–ê–†–ù–´–ï –ú–ï–¢–û–î–´
    // =======================================================

    /**
     * Debounce —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –≤—ã–∑–æ–≤–æ–≤
     */
    debounce(key, func, wait) {
        if (this.debounceTimers.has(key)) {
            clearTimeout(this.debounceTimers.get(key));
        }

        const timer = setTimeout(() => {
            func();
            this.debounceTimers.delete(key);
        }, wait);

        this.debounceTimers.set(key, timer);
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –∞–Ω–∏–º–∞—Ü–∏–∏
     */
    addToAnimationQueue(animationFunction) {
        this.animationQueue.push(animationFunction);

        if (this.animationQueue.length === 1) {
            this.processAnimationQueue();
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
     */
    async processAnimationQueue() {
        while (this.animationQueue.length > 0) {
            const animation = this.animationQueue.shift();
            try {
                await animation();
            } catch (error) {
                console.error('‚ùå Animation error:', error);
            }
        }
    }

    /**
     * –û—Ç–º–µ—Ç–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ
     */
    markComponentAsModified(componentId) {
        const element = document.getElementById(componentId);
        if (element) {
            element.classList.add('modified');
        }

        this.markRuleAsModified();
    }

    /**
     * –û—Ç–º–µ—Ç–∫–∞ –ø—Ä–∞–≤–∏–ª–∞ –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ
     */
    markRuleAsModified() {
        if (this.core?.state) {
            this.core.state.hasUnsavedChanges = true;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ UI
        document.body.classList.add('has-unsaved-changes');
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    updateActivity() {
        this.metrics.lastActivity = Date.now();

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        this.emit('userActivity', { timestamp: this.metrics.lastActivity });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ UI
     */
    getUIMetrics() {
        return {
            ...this.metrics,
            activeModals: this.activeModals.size,
            notifications: this.notifications.length,
            currentTab: this.currentTab,
            searchQuery: this.searchQuery,
            selectedCategory: this.selectedCategory,
            theme: this.settings.theme
        };
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è UI
     */
    exportUIState() {
        return {
            version: this.version,
            timestamp: Date.now(),
            settings: { ...this.settings },
            currentTab: this.currentTab,
            searchQuery: this.searchQuery,
            selectedCategory: this.selectedCategory,
            metrics: this.getUIMetrics()
        };
    }

    /**
     * –ò–º–ø–æ—Ä—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è UI
     */
    importUIState(state) {
        try {
            if (state.settings) {
                this.settings = { ...this.settings, ...state.settings };
            }

            if (state.currentTab) {
                this.switchTab(state.currentTab, false);
            }

            if (state.searchQuery) {
                this.searchQuery = state.searchQuery;
                const searchInput = this.elements.get('componentSearch');
                if (searchInput) {
                    searchInput.value = state.searchQuery;
                    this.filterComponents();
                }
            }

            if (state.selectedCategory) {
                this.selectedCategory = state.selectedCategory;
                const categoryFilter = this.elements.get('categoryFilter');
                if (categoryFilter) {
                    categoryFilter.value = state.selectedCategory;
                    this.filterComponents();
                }
            }

            console.log('‚úÖ UI state imported successfully');
            return true;
        } catch (error) {
            console.error('‚ùå Error importing UI state:', error);
            return false;
        }
    }

    // =======================================================
    // –°–ò–°–¢–ï–ú–ê –°–û–ë–´–¢–ò–ô
    // =======================================================

    /**
     * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
     */
    on(event, handler) {
        if (!this.eventHandlers.has(event)) {
            this.eventHandlers.set(event, []);
        }
        this.eventHandlers.get(event).push(handler);
    }

    /**
     * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏—è
     */
    off(event, handler) {
        if (this.eventHandlers.has(event)) {
            const handlers = this.eventHandlers.get(event);
            const index = handlers.indexOf(handler);
            if (index > -1) {
                handlers.splice(index, 1);
            }
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è
     */
    emit(event, data) {
        if (this.eventHandlers.has(event)) {
            this.eventHandlers.get(event).forEach(handler => {
                try {
                    handler(data);
                } catch (error) {
                    console.error(`Error in UI event handler for ${event}:`, error);
                }
            });
        }
    }

    // =======================================================
    // –ú–ï–¢–û–î–´ –ñ–ò–ó–ù–ï–ù–ù–û–ì–û –¶–ò–ö–õ–ê
    // =======================================================

    /**
     * –ê–∫—Ç–∏–≤–∞—Ü–∏—è UI Manager
     */
    activate() {
        if (!this.isInitialized) {
            console.warn('‚ö†Ô∏è UI Manager not initialized');
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ UI —ç–ª–µ–º–µ–Ω—Ç—ã
        this.updateAllInterfaces();

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.restoreFormState();

        console.log('üü¢ UI Manager activated');
        this.emit('activated');
    }

    /**
     * –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è UI Manager
     */
    deactivate() {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.saveFormState();

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        this.closeAllModals();

        // –û—á–∏—â–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        this.clearAllNotifications();

        console.log('üü° UI Manager deactivated');
        this.emit('deactivated');
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    cleanup() {
        console.log('üßπ Cleaning up UI Manager...');

        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.saveFormState();

            // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
            this.debounceTimers.forEach(timer => clearTimeout(timer));
            this.debounceTimers.clear();

            // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.eventHandlers.clear();

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
            this.closeAllModals();

            // –û—á–∏—â–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            this.clearAllNotifications();

            // –û—á–∏—â–∞–µ–º –∫—ç—à —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            this.elements.clear();
            this.forms.clear();
            this.modals.clear();

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.isInitialized = false;
            this.currentTab = 'properties';
            this.searchQuery = '';
            this.selectedCategory = '';

            console.log('‚úÖ UI Manager cleanup completed');

        } catch (error) {
            console.error('‚ùå Error during UI Manager cleanup:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
     */
    updateAllInterfaces() {
        this.updateTabContent(this.currentTab);
        this.updateComponentFilters();
        this.filterComponents();
        this.updateTestingInterface();
        this.updateRuleStatistics();
    }
}

// =======================================================
// –≠–ö–°–ü–û–†–¢ –ò –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø
// =======================================================

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è UI Manager
 */
function createUIManager(coreInstance) {
    return new UIManager(coreInstance);
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–¥—É–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        UIManager,
        createUIManager
    };
}

// ES6 —ç–∫—Å–ø–æ—Ä—Ç—ã
if (typeof window !== 'undefined') {
    window.UIManager = UIManager;
    window.createUIManager = createUIManager;

    // –î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π attack-constructor
    window.UIManagerExports = {
        UIManager,
        createUIManager,
        version: '4.0.0-Enhanced-UI'
    };

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è HTML –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    window.uiManager = null;
}

console.log('‚úÖ UI Manager v4.0.0-Enhanced loaded successfully');

/**
 * =======================================================
 * –ö–û–ù–ï–¶ –§–ê–ô–õ–ê ui-manager.js
 * 
 * IP Roast Enterprise 4.0 - UI Manager Module
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
 * –í–µ—Ä—Å–∏—è: 4.0.0-Enhanced-UI
 * 
 * –ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - –ü–æ–ª–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
 * - –°–∏—Å—Ç–µ–º–∞ –≤–∫–ª–∞–¥–æ–∫ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
 * - –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å—Ç–µ–∫–æ–º
 * - –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –æ—á–µ—Ä–µ–¥—å—é –∏ –ª–∏–º–∏—Ç–∞–º–∏
 * - –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞–º–∏ —Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
 * - –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –∏ accessibility –ø–æ–¥–¥–µ—Ä–∂–∫–∞
 * - –°–∏—Å—Ç–µ–º–∞ —Ç–µ–º –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
 * - Debounced –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
 * - Enterprise-—É—Ä–æ–≤–µ–Ω—å UX/UI –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
 * =======================================================
 */
