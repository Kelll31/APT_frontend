/**
 * IP Roast Enterprise 4.0 - Attack Constructor Main Module (FIXED)
 * –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
 * –í–µ—Ä—Å–∏—è: 4.1.0-Fixed-Production
 * 
 * –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
 * ‚úÖ –£—Å—Ç—Ä–∞–Ω–µ–Ω–∞ –æ—à–∏–±–∫–∞ "registerPage is not a function"
 * ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞–¥–µ–∂–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Enhanced PageManager
 * ‚úÖ –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ fallback –º–µ—Ö–∞–Ω–∏–∑–º—ã
 * ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 * ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
 *
 * @description –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
 * @author IP Roast Security Team
 * @requires Enhanced PageManager v3.1+, Core v2 Architecture
 * @integrates all attack-constructor modules
 */

console.log('üöÄ IP Roast Enterprise - Attack Constructor Main Module v4.1.0-Fixed');

// =======================================================
// –°–ò–°–¢–ï–ú–ù–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
// =======================================================

const ATTACK_CONSTRUCTOR_CONFIG = {
    VERSION: '4.1.0-Fixed-Production',
    BUILD_DATE: new Date().toISOString(),
    MODULE_TIMEOUT: 15000,
    RETRY_ATTEMPTS: 3,
    SECURITY_MODE: true,
    DEBUG_MODE: false,
    REQUIRED_APIS: ['fetch', 'Promise', 'Map', 'Set', 'Symbol'],
    FALLBACK_ENABLED: true
};

// =======================================================
// –ú–û–î–£–õ–¨–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê - –£–õ–£–ß–®–ï–ù–ù–´–ô –ó–ê–ì–†–£–ó–ß–ò–ö
// =======================================================

/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –º–æ–¥—É–ª–µ–π —Å enhanced error handling
 */
class AttackConstructorModuleLoader {
    constructor() {
        this.loadedModules = new Map();
        this.moduleStatus = new Map();
        this.loadingPromises = new Map();
        this.basePath = './pages/attack-constructor/';
        this.securityToken = this._generateSecurityToken();

        console.log('üì¶ Enhanced Module Loader initialized with security token');
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç XSS
     */
    _generateSecurityToken() {
        return btoa(Date.now() + Math.random()).substring(0, 16);
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è —Å –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
     */
    async loadModule(moduleName, options = {}) {
        const { retryCount = ATTACK_CONSTRUCTOR_CONFIG.RETRY_ATTEMPTS, timeout = ATTACK_CONSTRUCTOR_CONFIG.MODULE_TIMEOUT } = options;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!this._validateModuleName(moduleName)) {
            throw new Error(`Invalid module name: ${moduleName}`);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        if (this.loadedModules.has(moduleName)) {
            console.log(`‚úÖ Module ${moduleName} loaded from cache`);
            return this.loadedModules.get(moduleName);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        if (this.loadingPromises.has(moduleName)) {
            console.log(`‚è≥ Module ${moduleName} already loading, awaiting...`);
            return this.loadingPromises.get(moduleName);
        }

        // –ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Å timeout
        const loadPromise = Promise.race([
            this._loadModuleInternal(moduleName, retryCount),
            this._createTimeoutPromise(timeout, moduleName)
        ]);

        this.loadingPromises.set(moduleName, loadPromise);

        try {
            const module = await loadPromise;
            this.loadedModules.set(moduleName, module);
            this.moduleStatus.set(moduleName, 'loaded');
            console.log(`‚úÖ Module loaded successfully: ${moduleName}`);
            return module;
        } catch (error) {
            this.moduleStatus.set(moduleName, 'error');
            console.error(`‚ùå Failed to load module ${moduleName}:`, error);

            // –ü–æ–ø—ã—Ç–∫–∞ fallback –∑–∞–≥—Ä—É–∑–∫–∏
            if (ATTACK_CONSTRUCTOR_CONFIG.FALLBACK_ENABLED) {
                return this._tryFallbackLoad(moduleName);
            }
            throw error;
        } finally {
            this.loadingPromises.delete(moduleName);
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –º–æ–¥—É–ª—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è path traversal
     */
    _validateModuleName(moduleName) {
        const validPattern = /^[a-zA-Z0-9_-]+$/;
        const forbiddenPatterns = ['..', '/', '\\', '<', '>', '&', '"', "'"];

        return validPattern.test(moduleName) &&
            !forbiddenPatterns.some(pattern => moduleName.includes(pattern)) &&
            moduleName.length > 0 && moduleName.length < 50;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ timeout promise
     */
    _createTimeoutPromise(timeout, moduleName) {
        return new Promise((_, reject) => {
            setTimeout(() => {
                reject(new Error(`Module loading timeout: ${moduleName} (${timeout}ms)`));
            }, timeout);
        });
    }

    /**
     * –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è —Å retry –ª–æ–≥–∏–∫–æ–π
     */
    async _loadModuleInternal(moduleName, retryCount) {
        const modulePath = `${this.basePath}${moduleName}.js`;

        for (let attempt = 1; attempt <= retryCount; attempt++) {
            try {
                this.moduleStatus.set(moduleName, 'loading');
                console.log(`üì• Loading module ${moduleName} (attempt ${attempt}/${retryCount})`);

                // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
                await this._loadScript(modulePath);

                // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è
                const moduleExport = this._getModuleExport(moduleName);
                if (!moduleExport) {
                    throw new Error(`Module export not found: ${moduleName}`);
                }

                // –í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥—É–ª—è
                if (!this._validateModule(moduleExport, moduleName)) {
                    throw new Error(`Module validation failed: ${moduleName}`);
                }

                return moduleExport;
            } catch (error) {
                console.warn(`‚ö†Ô∏è Module load attempt ${attempt}/${retryCount} failed for ${moduleName}:`, error);

                if (attempt === retryCount) {
                    throw error;
                }

                // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                await this._sleep(Math.pow(2, attempt) * 1000);
            }
        }
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ —Å CSP compliance
     */
    _loadScript(src) {
        return new Promise((resolve, reject) => {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∫—Ä–∏–ø—Ç
            const existingScript = document.querySelector(`script[src="${src}"]`);
            if (existingScript && existingScript.dataset.loaded === 'true') {
                resolve(existingScript);
                return;
            }

            const script = document.createElement('script');
            script.src = src;
            script.type = 'text/javascript';
            script.async = true;
            script.crossOrigin = 'anonymous'; // CSP security
            script.dataset.securityToken = this.securityToken;

            script.onload = () => {
                script.dataset.loaded = 'true';
                console.log(`üìú Script loaded: ${src}`);
                resolve(script);
            };

            script.onerror = (error) => {
                console.error(`‚ùå Script load error: ${src}`, error);
                script.remove(); // Cleanup on error
                reject(new Error(`Failed to load script: ${src}`));
            };

            // –î–æ–±–∞–≤–ª—è–µ–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π DOM
            if (document.head) {
                document.head.appendChild(script);
            } else {
                reject(new Error('Document head not available'));
            }
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è —Å fallback
     */
    _getModuleExport(moduleName) {
        const exportNames = {
            'attack-constructor-core': 'AttackConstructorCore',
            'signature-components': 'SignatureComponentsManager',
            'rule-templates': 'RuleTemplateManager',
            'canvas-manager': 'CanvasManager',
            'connection-manager': 'ConnectionManager',
            'rule-generator': 'RuleGenerator',
            'test-manager': 'TestManager',
            'ui-manager': 'UIManager'
        };

        const expectedExport = exportNames[moduleName] || moduleName;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç—ã
        const possibleExports = [
            window[expectedExport],
            window[moduleName],
            window[moduleName.replace('-', '')],
            window[moduleName.toUpperCase()],
            // Fallback –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            window.signatureConstructor,
            window.SignatureAnalysisConstructor
        ];

        return possibleExports.find(exp => exp !== undefined);
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è
     */
    _validateModule(moduleExport, moduleName) {
        if (!moduleExport) return false;

        // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if (typeof moduleExport !== 'function' && typeof moduleExport !== 'object') {
            return false;
        }

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è core –º–æ–¥—É–ª—è
        if (moduleName === 'attack-constructor-core') {
            return this._validateCoreModule(moduleExport);
        }

        return true;
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è core –º–æ–¥—É–ª—è
     */
    _validateCoreModule(coreModule) {
        const requiredMethods = ['init', 'cleanup', 'activate', 'deactivate'];

        if (typeof coreModule === 'function') {
            return true; // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞
        }

        if (typeof coreModule === 'object') {
            return requiredMethods.some(method =>
                typeof coreModule[method] === 'function'
            );
        }

        return false;
    }

    /**
     * Fallback –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
     */
    async _tryFallbackLoad(moduleName) {
        console.log(`üîÑ Attempting fallback load for ${moduleName}`);

        // Fallback –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        const fallbackMap = {
            'attack-constructor-core': () => window.signatureConstructor || window.SignatureAnalysisConstructor,
            'signature-components': () => ({ components: new Map() }),
            'rule-templates': () => ({ templates: {} }),
            'canvas-manager': () => window.signatureConstructor,
            'connection-manager': () => window.signatureConstructor,
            'rule-generator': () => window.signatureConstructor,
            'test-manager': () => window.signatureConstructor,
            'ui-manager': () => window.signatureConstructor
        };

        const fallbackLoader = fallbackMap[moduleName];
        if (fallbackLoader) {
            const fallbackModule = fallbackLoader();
            if (fallbackModule) {
                console.log(`‚úÖ Fallback successful for ${moduleName}`);
                this.loadedModules.set(moduleName, fallbackModule);
                this.moduleStatus.set(moduleName, 'fallback');
                return fallbackModule;
            }
        }

        throw new Error(`No fallback available for ${moduleName}`);
    }

    /**
     * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
     */
    _sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
     */
    async loadAllModules() {
        const coreModules = ['attack-constructor-core'];
        const supportingModules = [
            'signature-components', 'rule-templates', 'canvas-manager',
            'connection-manager', 'rule-generator', 'test-manager', 'ui-manager'
        ];

        console.log('üìö Loading core modules...');

        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º core –º–æ–¥—É–ª—å —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º timeout
            const coreResults = await Promise.all(
                coreModules.map(module => this.loadModule(module, { timeout: 20000 }))
            );

            console.log('üìö Loading supporting modules...');

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ –º–æ–¥—É–ª–∏ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ)
            const supportingResults = await Promise.allSettled(
                supportingModules.map(module => this.loadModule(module))
            );

            const failedModules = supportingResults
                .map((result, index) => ({ result, name: supportingModules[index] }))
                .filter(({ result }) => result.status === 'rejected')
                .map(({ name, result }) => ({ name, error: result.reason }));

            if (failedModules.length > 0) {
                console.warn('‚ö†Ô∏è Some supporting modules failed to load:', failedModules);
            }

            return {
                core: coreResults,
                supporting: supportingResults,
                failed: failedModules,
                loadedCount: coreResults.length + supportingResults.filter(r => r.status === 'fulfilled').length
            };
        } catch (error) {
            console.error('‚ùå Critical error loading core modules:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    getLoadingStatus() {
        const status = {};
        this.moduleStatus.forEach((statusValue, module) => {
            status[module] = statusValue;
        });
        return status;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
     */
    cleanup() {
        this.loadingPromises.clear();
        this.moduleStatus.clear();
        // –ù–µ –æ—á–∏—â–∞–µ–º loadedModules –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    }
}

// =======================================================
// –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° ATTACK CONSTRUCTOR (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô)
// =======================================================

/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å Attack Constructor —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
 */
class AttackConstructor {
    constructor() {
        this.version = ATTACK_CONSTRUCTOR_CONFIG.VERSION;
        this.buildDate = ATTACK_CONSTRUCTOR_CONFIG.BUILD_DATE;
        this.isInitialized = false;
        this.initStartTime = performance.now();
        this.securityToken = this._generateSecurityToken();

        // –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –∏ –º–æ–¥—É–ª–∏
        this.moduleLoader = new AttackConstructorModuleLoader();
        this.core = null;
        this.modules = new Map();

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.state = {
            currentPage: 'attack-constructor',
            isActive: false,
            hasUnsavedChanges: false,
            lastActivity: Date.now(),
            securityLevel: 'high'
        };

        // –°–æ–±—ã—Ç–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        this.eventHandlers = new Map();
        this.initializationPromise = null;
        this.pageManagerIntegrated = false;

        console.log('üéØ Attack Constructor Main initialized with security token');
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
     */
    _generateSecurityToken() {
        return btoa(Date.now() + Math.random() + navigator.userAgent).substring(0, 32);
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è)
     */
    async initialize() {
        if (this.initializationPromise) {
            console.log('‚è≥ Initialization already in progress...');
            return this.initializationPromise;
        }

        this.initializationPromise = this._performInitialization();
        return this.initializationPromise;
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
     */
    async _performInitialization() {
        try {
            console.log('üöÄ Starting Attack Constructor initialization...');

            // –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            await this._validateEnvironment();

            // –≠—Ç–∞–ø 2: –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π —Å retry –ª–æ–≥–∏–∫–æ–π
            const loadResults = await this._loadModulesWithRetry();

            // –≠—Ç–∞–ø 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è core –º–æ–¥—É–ª—è
            await this._initializeCore();

            // –≠—Ç–∞–ø 4: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
            await this._initializeSupportingModules(loadResults);

            // –≠—Ç–∞–ø 5: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏
            this._establishModuleConnections();

            // –≠—Ç–∞–ø 6: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            this._registerGlobalHandlers();

            // –≠—Ç–∞–ø 7: –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Enhanced PageManager
            await this._integrateWithPageManagerSafely();

            // –≠—Ç–∞–ø 8: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            this._setupMonitoring();

            // –≠—Ç–∞–ø 9: –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            this._validateInitialization();

            // –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
            this.isInitialized = true;
            this.state.isActive = true;

            const initTime = performance.now() - this.initStartTime;
            console.log(`‚úÖ Attack Constructor initialized successfully in ${initTime.toFixed(2)}ms`);

            this._notifyReady();
            return this;

        } catch (error) {
            console.error('‚ùå Attack Constructor initialization failed:', error);
            await this._handleInitializationError(error);
            throw error;
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å security checks
     */
    async _validateEnvironment() {
        console.log('üîç Validating environment and security...');

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
        if (typeof window === 'undefined') {
            throw new Error('Browser environment required');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö API
        const missingAPIs = ATTACK_CONSTRUCTOR_CONFIG.REQUIRED_APIS.filter(
            api => typeof window[api] === 'undefined'
        );

        if (missingAPIs.length > 0) {
            throw new Error(`Missing required APIs: ${missingAPIs.join(', ')}`);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ CSP –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        await this._validateSecurityContext();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ DOM –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        if (document.readyState === 'loading') {
            await new Promise(resolve => {
                document.addEventListener('DOMContentLoaded', resolve);
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        await this._validateDOMElements();

        console.log('‚úÖ Environment validation passed');
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
     */
    async _validateSecurityContext() {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ CSP
            if (document.head.querySelector('meta[http-equiv="Content-Security-Policy"]')) {
                console.log('üîí CSP detected, adjusting security mode');
                this.state.securityLevel = 'maximum';
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ XSS
            if (this._detectPotentialXSS()) {
                console.warn('‚ö†Ô∏è Potential XSS detected, enabling protective mode');
                this.state.securityLevel = 'protective';
            }

            // –í–∞–ª–∏–¥–∞—Ü–∏—è origin
            if (location.protocol !== 'https:' && location.hostname !== 'localhost') {
                console.warn('‚ö†Ô∏è Insecure connection detected');
            }

        } catch (error) {
            console.warn('‚ö†Ô∏è Security validation non-critical error:', error);
        }
    }

    /**
     * –î–µ—Ç–µ–∫—Ü–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö XSS –∞—Ç–∞–∫
     */
    _detectPotentialXSS() {
        const suspiciousPatterns = [
            /<script[\s\S]*?>[\s\S]*?<\/script>/gi,
            /javascript:/gi,
            /on\w+\s*=/gi,
            /<iframe[\s\S]*?>/gi
        ];

        const urlParams = new URLSearchParams(location.search);
        const paramValues = Array.from(urlParams.values()).join(' ');

        return suspiciousPatterns.some(pattern => pattern.test(paramValues));
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    async _validateDOMElements() {
        const requiredElements = ['rule-canvas', 'component-search'];
        const missingElements = requiredElements.filter(id => !document.getElementById(id));

        if (missingElements.length > 0) {
            console.warn('‚ö†Ô∏è Some DOM elements missing, will create dynamically:', missingElements);
            await this._createMissingElements(missingElements);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    async _createMissingElements(missingElements) {
        const container = document.querySelector('#page-content') ||
            document.querySelector('.page-content') ||
            document.body;

        for (const elementId of missingElements) {
            if (!document.getElementById(elementId)) {
                const element = document.createElement('div');
                element.id = elementId;
                element.className = `${elementId} auto-generated`;
                element.dataset.securityToken = this.securityToken;
                container.appendChild(element);
                console.log(`‚úÖ Created missing element: ${elementId}`);
            }
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
     */
    async _loadModulesWithRetry() {
        let lastError;

        for (let attempt = 1; attempt <= ATTACK_CONSTRUCTOR_CONFIG.RETRY_ATTEMPTS; attempt++) {
            try {
                console.log(`üì¶ Loading modules (attempt ${attempt}/${ATTACK_CONSTRUCTOR_CONFIG.RETRY_ATTEMPTS})`);
                const results = await this.moduleLoader.loadAllModules();
                console.log('üì¶ Modules loaded:', this.moduleLoader.getLoadingStatus());
                return results;
            } catch (error) {
                lastError = error;
                console.warn(`‚ö†Ô∏è Module loading attempt ${attempt} failed:`, error);

                if (attempt < ATTACK_CONSTRUCTOR_CONFIG.RETRY_ATTEMPTS) {
                    const delay = Math.pow(2, attempt) * 1000;
                    console.log(`‚è≥ Retrying in ${delay}ms...`);
                    await new Promise(resolve => setTimeout(resolve, delay));
                }
            }
        }

        throw lastError;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è core –º–æ–¥—É–ª—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
     */
    async _initializeCore() {
        console.log('üîß Initializing core module...');

        try {
            // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å core –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            this.core = await this._findCoreModule();

            if (!this.core) {
                throw new Error('Core module not available in any form');
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è core –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            await this._ensureCoreInitialized();

            this.modules.set('core', this.core);
            console.log('‚úÖ Core module initialized successfully');

        } catch (error) {
            console.error('‚ùå Core module initialization failed:', error);

            // –ü–æ–ø—ã—Ç–∫–∞ fallback –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            if (ATTACK_CONSTRUCTOR_CONFIG.FALLBACK_ENABLED) {
                this.core = this._createFallbackCore();
                this.modules.set('core', this.core);
                console.log('‚ö†Ô∏è Using fallback core module');
            } else {
                throw error;
            }
        }
    }

    /**
     * –ü–æ–∏—Å–∫ core –º–æ–¥—É–ª—è –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
     */
    async _findCoreModule() {
        const coreSources = [
            () => this.moduleLoader.loadedModules.get('attack-constructor-core'),
            () => window.signatureConstructor,
            () => window.SignatureAnalysisConstructor,
            () => window.attackConstructorCore,
            () => window.AttackConstructorCore && new window.AttackConstructorCore()
        ];

        for (const sourceGetter of coreSources) {
            try {
                const coreModule = sourceGetter();
                if (coreModule) {
                    console.log('‚úÖ Core module found');
                    return coreModule;
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è Core source failed:', error);
            }
        }

        return null;
    }

    /**
     * –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ core
     */
    async _ensureCoreInitialized() {
        if (!this.core.isInitialized && typeof this.core.init === 'function') {
            console.log('‚è≥ Initializing core module...');
            await this.core.init();
        } else if (!this.core.isInitialized) {
            console.log('‚è≥ Waiting for core module initialization...');
            await new Promise(resolve => setTimeout(resolve, 1500));
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ fallback core –º–æ–¥—É–ª—è
     */
    _createFallbackCore() {
        return {
            isInitialized: true,
            version: 'fallback',

            // –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
            init: () => Promise.resolve(),
            cleanup: () => Promise.resolve(),
            activate: () => console.log('üìÑ Fallback core activated'),
            deactivate: () => console.log('üìÑ Fallback core deactivated'),

            // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            validateRule: () => ({ valid: true }),
            saveSignatureRule: () => Promise.resolve(true),
            loadRuleTemplate: () => Promise.resolve({}),
            runRuleTest: () => Promise.resolve({ success: true }),
            generateRuleOutput: () => 'fallback rule',
            clearRuleCanvas: () => console.log('Canvas cleared (fallback)'),
            autoLayoutRule: () => console.log('Auto layout applied (fallback)'),

            // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
            canvasNodes: new Map(),
            connections: new Map(),
            currentRule: null,
            currentTab: 'properties',

            getDebugInfo: () => ({ mode: 'fallback', initialized: true })
        };
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
     */
    async _initializeSupportingModules(loadResults) {
        console.log('üîß Initializing supporting modules...');

        const moduleConfigs = {
            'signature-components': { required: false, fallback: () => new Map() },
            'rule-templates': { required: false, fallback: () => ({}) },
            'canvas-manager': { required: false, fallback: () => this.core },
            'connection-manager': { required: false, fallback: () => this.core },
            'rule-generator': { required: false, fallback: () => this.core },
            'test-manager': { required: false, fallback: () => this.core },
            'ui-manager': { required: false, fallback: () => this.core }
        };

        for (const [moduleName, config] of Object.entries(moduleConfigs)) {
            try {
                let moduleInstance = this.moduleLoader.loadedModules.get(moduleName);

                if (!moduleInstance) {
                    if (config.required) {
                        throw new Error(`Required module ${moduleName} not loaded`);
                    }

                    console.log(`üì¶ Using fallback for ${moduleName}`);
                    moduleInstance = config.fallback();
                }

                this.modules.set(moduleName, moduleInstance);
                console.log(`‚úÖ Module ${moduleName} initialized`);

            } catch (error) {
                if (config.required) {
                    throw error;
                } else {
                    console.warn(`‚ö†Ô∏è Optional module ${moduleName} failed:`, error);
                }
            }
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏
     */
    _establishModuleConnections() {
        console.log('üîó Establishing module connections...');

        if (!this.core) {
            console.warn('‚ö†Ô∏è Core module not available for connections');
            return;
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        const moduleAliases = {
            signatureComponents: this.modules.get('signature-components') || this.core.signatureComponents || new Map(),
            canvasManager: this.modules.get('canvas-manager') || this.core,
            connectionManager: this.modules.get('connection-manager') || this.core,
            ruleGenerator: this.modules.get('rule-generator') || this.core,
            testManager: this.modules.get('test-manager') || this.core,
            uiManager: this.modules.get('ui-manager') || this.core
        };

        Object.entries(moduleAliases).forEach(([alias, instance]) => {
            this[alias] = instance;
        });

        console.log('‚úÖ Module connections established');
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
     */
    _registerGlobalHandlers() {
        console.log('üåê Registering global handlers...');

        // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        if (ATTACK_CONSTRUCTOR_CONFIG.SECURITY_MODE) {
            Object.defineProperty(window, 'attackConstructor', {
                value: this,
                writable: false,
                configurable: false
            });

            Object.defineProperty(window, 'signatureConstructor', {
                value: this.core,
                writable: false,
                configurable: false
            });
        } else {
            window.attackConstructor = this;
            window.signatureConstructor = this.core;
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        const handleBeforeUnload = (event) => this._handleBeforeUnload(event);
        const handleUnload = () => this._handleUnload();
        const handleGlobalError = (event) => this._handleGlobalError(event);
        const handleVisibilityChange = () => this._handleVisibilityChange();

        window.addEventListener('beforeunload', handleBeforeUnload);
        window.addEventListener('unload', handleUnload);
        window.addEventListener('error', handleGlobalError);
        document.addEventListener('visibilitychange', handleVisibilityChange);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è cleanup
        this.globalHandlers = {
            handleBeforeUnload,
            handleUnload,
            handleGlobalError,
            handleVisibilityChange
        };

        // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ (–µ—Å–ª–∏ core –∏—Ö –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç)
        this._setupKeyboardShortcuts();

        console.log('‚úÖ Global handlers registered');
    }

    /**
     * ===== –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° ENHANCED PAGEMANAGER =====
     * –ì–ª–∞–≤–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã "registerPage is not a function"
     */
    async _integrateWithPageManagerSafely() {
        console.log('üìÑ Starting SAFE Enhanced PageManager integration...');

        try {
            // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PageManager —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            const pageManager = await this._waitForPageManager();

            if (!pageManager) {
                console.warn('‚ö†Ô∏è Enhanced PageManager not available, using fallback integration');
                this._setupFallbackPageIntegration();
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º API
            this._ensurePageManagerAPI(pageManager);

            // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
            this._registerPageManagerEvents(pageManager);

            // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            this._registerPageSafely(pageManager);

            this.pageManagerIntegrated = true;
            console.log('‚úÖ Enhanced PageManager integration completed successfully');

        } catch (error) {
            console.error('‚ùå PageManager integration failed:', error);
            this._setupFallbackPageIntegration();
        }
    }

    /**
     * –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PageManager —Å —Ç–∞–π–º–∞—É—Ç–æ–º
     */
    async _waitForPageManager(maxWaitTime = 5000) {
        const startTime = Date.now();

        while (Date.now() - startTime < maxWaitTime) {
            const pageManager = window.enhancedPageManager || window.pageManager;

            if (pageManager && typeof pageManager === 'object') {
                console.log('‚úÖ PageManager found');
                return pageManager;
            }

            console.log('‚è≥ Waiting for PageManager...');
            await new Promise(resolve => setTimeout(resolve, 200));
        }

        console.warn('‚ö†Ô∏è PageManager wait timeout');
        return null;
    }

    /**
     * –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö API –≤ PageManager
     */
    _ensurePageManagerAPI(pageManager) {
        console.log('üîß Ensuring PageManager API compatibility...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–µ—Ç–æ–¥—ã
        if (typeof pageManager.on !== 'function') {
            pageManager.on = pageManager.addEventListener || this._createEventPolyfill(pageManager);
            console.log('‚úÖ Added event listener polyfill');
        }

        if (typeof pageManager.off !== 'function') {
            pageManager.off = pageManager.removeEventListener || (() => { });
            console.log('‚úÖ Added event remove polyfill');
        }

        // –ö–†–ò–¢–ò–ß–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º registerPage –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if (typeof pageManager.registerPage !== 'function') {
            pageManager.registerPage = this._createRegisterPagePolyfill(pageManager);
            console.log('‚úÖ Added registerPage polyfill (CRITICAL FIX)');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã
        if (typeof pageManager.getPageConfig !== 'function') {
            pageManager.getPageConfig = this._createGetPageConfigPolyfill(pageManager);
            console.log('‚úÖ Added getPageConfig polyfill');
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ polyfill –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å–æ–±—ã—Ç–∏–π
     */
    _createEventPolyfill(pageManager) {
        if (!pageManager._eventHandlers) {
            pageManager._eventHandlers = new Map();
        }

        return (event, handler) => {
            if (!pageManager._eventHandlers.has(event)) {
                pageManager._eventHandlers.set(event, []);
            }
            pageManager._eventHandlers.get(event).push(handler);
        };
    }

    /**
     * –ö–†–ò–¢–ò–ß–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–Ω–∏–µ polyfill –¥–ª—è registerPage
     */
    _createRegisterPagePolyfill(pageManager) {
        if (!pageManager._registeredPages) {
            pageManager._registeredPages = new Map();
        }

        return (pageId, config = {}) => {
            try {
                const pageConfig = {
                    title: config.title || pageId,
                    module: config.module || null,
                    activate: config.activate || (() => { }),
                    deactivate: config.deactivate || (() => { }),
                    cleanup: config.cleanup || (() => { }),
                    initialized: false,
                    registeredAt: Date.now(),
                    ...config
                };

                pageManager._registeredPages.set(pageId, pageConfig);

                console.log(`üìã Page registered via polyfill: ${pageId}`, pageConfig);

                // –≠–º—É–ª–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                this._emitPageManagerEvent(pageManager, 'pageRegistered', { pageId, config: pageConfig });

                return true;
            } catch (error) {
                console.error(`‚ùå Error registering page ${pageId}:`, error);
                return false;
            }
        };
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ polyfill –¥–ª—è getPageConfig
     */
    _createGetPageConfigPolyfill(pageManager) {
        return (pageId) => {
            if (pageManager._registeredPages) {
                return pageManager._registeredPages.get(pageId) || null;
            }
            return null;
        };
    }

    /**
     * –≠–º—É–ª—è—Ü–∏—è —Å–æ–±—ã—Ç–∏–π PageManager
     */
    _emitPageManagerEvent(pageManager, event, data) {
        if (pageManager._eventHandlers && pageManager._eventHandlers.has(event)) {
            pageManager._eventHandlers.get(event).forEach(handler => {
                try {
                    handler(data);
                } catch (error) {
                    console.error(`Error in PageManager event handler for ${event}:`, error);
                }
            });
        }
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π PageManager
     */
    _registerPageManagerEvents(pageManager) {
        console.log('üìù Registering PageManager event handlers...');

        try {
            // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            const eventHandlers = {
                pageCleanup: (data) => {
                    if (data && data.pageId === 'attack-constructor') {
                        this._handlePageCleanup();
                    }
                },
                pageActivate: (data) => {
                    if (data && data.pageId === 'attack-constructor') {
                        this._handlePageActivate();
                    }
                },
                pageDeactivate: (data) => {
                    if (data && data.pageId === 'attack-constructor') {
                        this._handlePageDeactivate();
                    }
                }
            };

            Object.entries(eventHandlers).forEach(([event, handler]) => {
                try {
                    pageManager.on(event, handler);
                    console.log(`‚úÖ Registered handler for: ${event}`);
                } catch (error) {
                    console.warn(`‚ö†Ô∏è Failed to register handler for ${event}:`, error);
                }
            });

        } catch (error) {
            console.error('‚ùå Error registering PageManager events:', error);
        }
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ PageManager
     */
    _registerPageSafely(pageManager) {
        console.log('üìã Registering page in PageManager...');

        try {
            const pageConfig = {
                title: '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–∏–≥–Ω–∞—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞',
                module: this,
                activate: () => this.activate(),
                deactivate: () => this.deactivate(),
                cleanup: () => this.cleanup(),
                version: this.version,
                securityToken: this.securityToken
            };

            const registrationResult = pageManager.registerPage('attack-constructor', pageConfig);

            if (registrationResult === false) {
                throw new Error('Page registration returned false');
            }

            console.log('‚úÖ Page registered successfully in PageManager');

        } catch (error) {
            console.error('‚ùå Error registering page:', error);
            // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        }
    }

    /**
     * Fallback –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ PageManager
     */
    _setupFallbackPageIntegration() {
        console.log('üîÑ Setting up fallback page integration...');

        // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —ç–º—É–ª—è—Ü–∏—é PageManager
        const fallbackPageManager = {
            registerPage: (pageId, config) => {
                console.log(`üìã Fallback page registration: ${pageId}`);
                return true;
            },
            on: (event, handler) => {
                console.log(`üìù Fallback event registration: ${event}`);
            },
            getPageConfig: () => null
        };

        // –≠–º—É–ª–∏—Ä—É–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        setTimeout(() => {
            this._handlePageActivate();
        }, 100);

        window.enhancedPageManager = fallbackPageManager;
        console.log('‚úÖ Fallback page integration setup completed');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ—Ç–ª–∞–¥–∫–∏
     */
    _setupMonitoring() {
        console.log('üìä Setting up monitoring...');

        // –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        this.performanceMetrics = {
            initTime: performance.now() - this.initStartTime,
            memoryUsage: performance.memory ? performance.memory.usedJSHeapSize : 'N/A',
            componentCount: this.core?.canvasNodes?.size || 0,
            connectionCount: this.core?.connections?.size || 0,
            securityLevel: this.state.securityLevel,
            pageManagerIntegrated: this.pageManagerIntegrated
        };

        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        this.metricsInterval = setInterval(() => {
            this._updateMetrics();
        }, 30000);

        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        this.debug = {
            version: this.version,
            buildDate: this.buildDate,
            modules: Array.from(this.modules.keys()),
            state: this.state,
            core: this.core?.getDebugInfo?.() || 'N/A',
            security: {
                token: this.securityToken,
                level: this.state.securityLevel,
                pageManagerIntegrated: this.pageManagerIntegrated
            }
        };

        // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (ATTACK_CONSTRUCTOR_CONFIG.DEBUG_MODE) {
            window.attackConstructorDebug = this.debug;
        }

        console.log('‚úÖ Monitoring setup completed');
    }

    /**
     * –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
     */
    _validateInitialization() {
        console.log('üîç Validating initialization...');

        const validationChecks = [
            { name: 'Core module', check: () => !!this.core },
            { name: 'Modules loaded', check: () => this.modules.size > 0 },
            { name: 'Event handlers', check: () => this.eventHandlers instanceof Map },
            { name: 'Security token', check: () => !!this.securityToken },
            { name: 'Performance metrics', check: () => !!this.performanceMetrics }
        ];

        const failedChecks = validationChecks.filter(({ check }) => !check());

        if (failedChecks.length > 0) {
            console.warn('‚ö†Ô∏è Some validation checks failed:', failedChecks.map(c => c.name));
        } else {
            console.log('‚úÖ All validation checks passed');
        }
    }

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è
     */
    _notifyReady() {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        const readyEvent = new CustomEvent('attackConstructorReady', {
            detail: {
                version: this.version,
                initTime: performance.now() - this.initStartTime,
                modules: Array.from(this.modules.keys()),
                pageManagerIntegrated: this.pageManagerIntegrated,
                securityLevel: this.state.securityLevel
            }
        });

        document.dispatchEvent(readyEvent);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        if (window.app?.emit) {
            window.app.emit('moduleReady', {
                module: 'attack-constructor',
                version: this.version
            });
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (window.app?.showSuccessNotification) {
            window.app.showSuccessNotification(
                '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–∏–≥–Ω–∞—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ'
            );
        }

        console.log('üì¢ Ready notification sent');
    }

    /**
     * –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
     */
    async _handleInitializationError(error) {
        console.error('üí• Enhanced initialization error handler:', error);

        // –°–±–æ—Ä –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        const diagnostics = {
            error: {
                message: error.message,
                stack: error.stack,
                name: error.name
            },
            environment: {
                userAgent: navigator.userAgent,
                url: location.href,
                timestamp: new Date().toISOString()
            },
            modules: this.moduleLoader?.getLoadingStatus() || {},
            state: this.state,
            pageManager: {
                available: !!window.enhancedPageManager,
                integrated: this.pageManagerIntegrated
            }
        };

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –æ—à–∏–±–∫–µ
        const errorEvent = new CustomEvent('attackConstructorError', {
            detail: diagnostics
        });
        document.dispatchEvent(errorEvent);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (window.app?.showErrorNotification) {
            window.app.showErrorNotification(
                '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.'
            );
        }

        // –¢–µ–ª–µ–º–µ—Ç—Ä–∏—è
        if (window.app?.telemetry?.logError) {
            window.app.telemetry.logError('attack-constructor-init-error', diagnostics);
        }

        // –ü–æ–ø—ã—Ç–∫–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        if (ATTACK_CONSTRUCTOR_CONFIG.FALLBACK_ENABLED) {
            await this._attemptEmergencyRecovery(error);
        }
    }

    /**
     * –ü–æ–ø—ã—Ç–∫–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    async _attemptEmergencyRecovery(error) {
        console.log('üöë Attempting emergency recovery...');

        try {
            // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
            this.core = this._createFallbackCore();
            this.modules.set('core', this.core);
            this._setupFallbackPageIntegration();

            this.isInitialized = true;
            this.state.isActive = true;

            console.log('‚úÖ Emergency recovery successful');

            if (window.app?.showWarningNotification) {
                window.app.showWarningNotification(
                    '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω –≤ –∞–≤–∞—Ä–∏–π–Ω–æ–º —Ä–µ–∂–∏–º–µ. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.'
                );
            }

        } catch (recoveryError) {
            console.error('‚ùå Emergency recovery failed:', recoveryError);
        }
    }

    // =======================================================
    // –ú–ï–¢–û–î–´ –ñ–ò–ó–ù–ï–ù–ù–û–ì–û –¶–ò–ö–õ–ê (–£–õ–£–ß–®–ï–ù–ù–´–ï)
    // =======================================================

    /**
     * –ê–∫—Ç–∏–≤–∞—Ü–∏—è –º–æ–¥—É–ª—è
     */
    activate() {
        console.log('üü¢ Activating Attack Constructor...');

        try {
            this.state.isActive = true;
            this.state.lastActivity = Date.now();

            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º core –º–æ–¥—É–ª—å
            if (this.core?.activate) {
                this.core.activate();
            }

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this._restoreState();

            this.emit('activated');
            console.log('‚úÖ Attack Constructor activated successfully');

        } catch (error) {
            console.error('‚ùå Error during activation:', error);
        }
    }

    /**
     * –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –º–æ–¥—É–ª—è
     */
    deactivate() {
        console.log('üü° Deactivating Attack Constructor...');

        try {
            this.state.isActive = false;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this._saveState();

            // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º core –º–æ–¥—É–ª—å
            if (this.core?.deactivate) {
                this.core.deactivate();
            }

            this.emit('deactivated');
            console.log('‚úÖ Attack Constructor deactivated successfully');

        } catch (error) {
            console.error('‚ùå Error during deactivation:', error);
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    cleanup() {
        console.log('üßπ Cleaning up Attack Constructor...');

        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this._saveState();

            // –û—á–∏—â–∞–µ–º core –º–æ–¥—É–ª—å
            if (this.core?.cleanup) {
                this.core.cleanup();
            }

            // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
            if (this.metricsInterval) {
                clearInterval(this.metricsInterval);
                this.metricsInterval = null;
            }

            // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this._removeGlobalHandlers();

            // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.eventHandlers.clear();

            // –û—á–∏—â–∞–µ–º –º–æ–¥—É–ª–∏
            this.modules.clear();

            // –û—á–∏—â–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
            if (this.moduleLoader) {
                this.moduleLoader.cleanup();
            }

            // –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
            if (window.attackConstructor === this) {
                delete window.attackConstructor;
            }

            this.isInitialized = false;
            this.state.isActive = false;

            console.log('‚úÖ Cleanup completed successfully');

        } catch (error) {
            console.error('‚ùå Error during cleanup:', error);
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
     */
    _removeGlobalHandlers() {
        if (this.globalHandlers) {
            window.removeEventListener('beforeunload', this.globalHandlers.handleBeforeUnload);
            window.removeEventListener('unload', this.globalHandlers.handleUnload);
            window.removeEventListener('error', this.globalHandlers.handleGlobalError);
            document.removeEventListener('visibilitychange', this.globalHandlers.handleVisibilityChange);

            this.globalHandlers = null;
        }
    }

    // =======================================================
    // –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô (–£–õ–£–ß–®–ï–ù–ù–´–ï)
    // =======================================================

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è beforeunload
     */
    _handleBeforeUnload(event) {
        if (this.state.hasUnsavedChanges) {
            const message = '–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ü–æ–∫–∏–Ω—É—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É?';
            event.returnValue = message;
            return message;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è unload
     */
    _handleUnload() {
        this._saveState();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
     */
    _handleGlobalError(event) {
        if (event.filename && event.filename.includes('attack-constructor')) {
            console.error('‚ùå Global error in Attack Constructor:', event.error);

            // –¢–µ–ª–µ–º–µ—Ç—Ä–∏—è
            if (window.app?.telemetry?.logError) {
                window.app.telemetry.logError('attack-constructor-runtime-error', {
                    message: event.message,
                    filename: event.filename,
                    lineno: event.lineno,
                    colno: event.colno,
                    stack: event.error?.stack
                });
            }
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    _handleVisibilityChange() {
        if (document.hidden) {
            console.log('üëÅÔ∏è Page hidden - pausing activity');
            this._saveState();
        } else {
            console.log('üëÅÔ∏è Page visible - resuming activity');
            this.state.lastActivity = Date.now();
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
     */
    _handlePageCleanup() {
        console.log('üßπ Page cleanup triggered');
        this.cleanup();
    }

    _handlePageActivate() {
        console.log('üü¢ Page activate triggered');
        this.activate();
    }

    _handlePageDeactivate() {
        console.log('üü° Page deactivate triggered');
        this.deactivate();
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
     */
    _setupKeyboardShortcuts() {
        console.log('‚å®Ô∏è Setting up keyboard shortcuts...');

        document.addEventListener('keydown', (event) => {
            // Ctrl+S - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            if (event.ctrlKey && event.key === 's' && this.state.isActive) {
                event.preventDefault();
                this._saveState();
                console.log('üíæ State saved via hotkey');
            }

            // Ctrl+Shift+D - Debug info
            if (event.ctrlKey && event.shiftKey && event.key === 'D' && ATTACK_CONSTRUCTOR_CONFIG.DEBUG_MODE) {
                event.preventDefault();
                console.log('üêõ Debug info:', this.getStatus());
            }
        });
    }

    // =======================================================
    // –°–ò–°–¢–ï–ú–ê –°–û–ë–´–¢–ò–ô –ò –£–¢–ò–õ–ò–¢–´
    // =======================================================

    /**
     * –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π
     */
    on(event, handler) {
        if (!this.eventHandlers.has(event)) {
            this.eventHandlers.set(event, []);
        }
        this.eventHandlers.get(event).push(handler);
    }

    off(event, handler) {
        if (this.eventHandlers.has(event)) {
            const handlers = this.eventHandlers.get(event);
            const index = handlers.indexOf(handler);
            if (index > -1) {
                handlers.splice(index, 1);
            }
        }
    }

    emit(event, data) {
        if (this.eventHandlers.has(event)) {
            this.eventHandlers.get(event).forEach(handler => {
                try {
                    handler(data);
                } catch (error) {
                    console.error(`Error in event handler for ${event}:`, error);
                }
            });
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    _saveState() {
        try {
            const stateData = {
                version: this.version,
                timestamp: Date.now(),
                rule: this.core?.currentRule || null,
                nodes: this.core?.canvasNodes ? Array.from(this.core.canvasNodes.values()) : [],
                connections: this.core?.connections ? Array.from(this.core.connections.values()) : [],
                selectedTab: this.core?.currentTab || 'properties',
                hasUnsavedChanges: this.state.hasUnsavedChanges,
                securityToken: this.securityToken
            };

            localStorage.setItem('attack-constructor-state', JSON.stringify(stateData));
            console.log('üíæ State saved');
        } catch (error) {
            console.error('‚ùå Error saving state:', error);
        }
    }

    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    _restoreState() {
        try {
            const savedState = localStorage.getItem('attack-constructor-state');
            if (!savedState) return;

            const stateData = JSON.parse(savedState);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è (–Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
            const ageHours = (Date.now() - stateData.timestamp) / (1000 * 60 * 60);
            if (ageHours > 24) {
                console.log('‚è∞ Saved state too old, ignoring');
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤–µ—Ä—Å–∏–π
            if (stateData.version !== this.version) {
                console.log('üîÑ Version mismatch, state migration may be needed');
            }

            console.log('üîÑ Restoring saved state...');

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ core –º–æ–¥—É–ª–µ
            if (this.core && stateData.rule) {
                console.log('üìã State restoration available');
            }

        } catch (error) {
            console.error('‚ùå Error restoring state:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    _updateMetrics() {
        if (performance.memory) {
            this.performanceMetrics.memoryUsage = performance.memory.usedJSHeapSize;
        }

        if (this.core) {
            this.performanceMetrics.componentCount = this.core.canvasNodes?.size || 0;
            this.performanceMetrics.connectionCount = this.core.connections?.size || 0;
        }

        this.performanceMetrics.lastUpdate = Date.now();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥—É–ª—è
     */
    getStatus() {
        return {
            version: this.version,
            buildDate: this.buildDate,
            isInitialized: this.isInitialized,
            isActive: this.state.isActive,
            pageManagerIntegrated: this.pageManagerIntegrated,
            modules: Array.from(this.modules.keys()),
            performance: this.performanceMetrics,
            security: {
                level: this.state.securityLevel,
                token: this.securityToken
            },
            core: this.core?.getDebugInfo?.() || null
        };
    }

    /**
     * –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –∫ core –º–æ–¥—É–ª—é
     */
    _setupCoreProxy() {
        const coreMethods = [
            'validateRule', 'saveSignatureRule', 'loadRuleTemplate',
            'runRuleTest', 'generateRuleOutput', 'clearRuleCanvas', 'autoLayoutRule'
        ];

        coreMethods.forEach(method => {
            this[method] = (...args) => {
                if (this.core && typeof this.core[method] === 'function') {
                    return this.core[method](...args);
                } else {
                    console.warn(`‚ö†Ô∏è Core method ${method} not available`);
                    return null;
                }
            };
        });
    }
}

// =======================================================
// –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø (–£–õ–£–ß–®–ï–ù–ù–ê–Ø)
// =======================================================

/**
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Attack Constructor
 */
let attackConstructorInstance = null;

/**
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
 */
async function initAttackConstructor() {
    console.log('üöÄ Initializing Attack Constructor Main Module v4.1.0-Fixed...');

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ
        if (attackConstructorInstance) {
            console.log('‚úÖ Attack Constructor already initialized');
            return attackConstructorInstance;
        }

        // –°–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
        attackConstructorInstance = new AttackConstructor();
        await attackConstructorInstance.initialize();

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏ –º–µ—Ç–æ–¥—ã
        attackConstructorInstance._setupCoreProxy();

        // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å (–±–µ–∑–æ–ø–∞—Å–Ω–∞—è)
        if (ATTACK_CONSTRUCTOR_CONFIG.SECURITY_MODE) {
            Object.defineProperty(window, 'attackConstructor', {
                value: attackConstructorInstance,
                writable: false,
                configurable: false
            });
        } else {
            window.attackConstructor = attackConstructorInstance;
        }

        return attackConstructorInstance;

    } catch (error) {
        console.error('‚ùå Attack Constructor initialization failed:', error);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É
        if (window.app?.showErrorNotification) {
            window.app.showErrorNotification(
                '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
            );
        }

        throw error;
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
 */
function waitForDOMReady() {
    return new Promise((resolve) => {
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', resolve);
        } else {
            resolve();
        }
    });
}

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 */
(async () => {
    try {
        console.log('üé¨ Starting Attack Constructor auto-initialization...');

        // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM
        await waitForDOMReady();

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
        await new Promise(resolve => setTimeout(resolve, 150));

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Attack Constructor
        await initAttackConstructor();

        console.log('üéâ Attack Constructor fully initialized and ready!');

    } catch (error) {
        console.error('üí• Critical initialization failure:', error);

        // –ü–æ–ø—ã—Ç–∫–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (document.body) {
            const errorDiv = document.createElement('div');
            errorDiv.style.cssText = `
                position: fixed; top: 20px; right: 20px; z-index: 10000;
                background: #dc3545; color: white; padding: 15px; border-radius: 5px;
                font-family: Arial, sans-serif; font-size: 14px; max-width: 300px;
            `;
            errorDiv.innerHTML = `
                <strong>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</strong><br>
                –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–∏–≥–Ω–∞—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω.<br>
                <small>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.</small>
            `;
            document.body.appendChild(errorDiv);

            setTimeout(() => errorDiv.remove(), 10000);
        }
    }
})();

// =======================================================
// –≠–ö–°–ü–û–†–¢–´ –ò –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø
// =======================================================

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–¥—É–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        AttackConstructor,
        AttackConstructorModuleLoader,
        initAttackConstructor,
        ATTACK_CONSTRUCTOR_CONFIG
    };
}

// ES6 —ç–∫—Å–ø–æ—Ä—Ç—ã
if (typeof window !== 'undefined' && window.moduleSystem === 'es6') {
    window.AttackConstructorExports = {
        AttackConstructor,
        AttackConstructorModuleLoader,
        initAttackConstructor,
        ATTACK_CONSTRUCTOR_CONFIG
    };
}

// =======================================================
// BACKWARD COMPATIBILITY & LEGACY SUPPORT
// =======================================================

if (typeof window !== 'undefined') {
    // Alias –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
    window.SignatureConstructor = AttackConstructor;
    window.initSignatureConstructor = initAttackConstructor;

    // Event –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å legacy –∫–æ–¥–æ–º
    document.addEventListener('DOMContentLoaded', () => {
        setTimeout(() => {
            const legacyEvent = new CustomEvent('signatureConstructorModuleLoaded', {
                detail: {
                    version: ATTACK_CONSTRUCTOR_CONFIG.VERSION,
                    timestamp: Date.now(),
                    legacy: true,
                    fixed: true
                }
            });
            document.dispatchEvent(legacyEvent);
        }, 600);
    });
}

// =======================================================
// –§–ò–ù–ê–õ–ò–ó–ê–¶–ò–Ø –ú–û–î–£–õ–Ø
// =======================================================

console.log('‚úÖ Attack Constructor Main Module v4.1.0-Fixed loaded successfully');

/**
 * =======================================================
 * –ö–û–ù–ï–¶ –§–ê–ô–õ–ê attack-constructor.js v4.1.0-Fixed
 * 
 * –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ï–ê–õ–ò–ó–û–í–ê–ù–´:
 * ‚úÖ –£—Å—Ç—Ä–∞–Ω–µ–Ω–∞ –æ—à–∏–±–∫–∞ "registerPage is not a function"
 * ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞–¥–µ–∂–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Enhanced PageManager
 * ‚úÖ –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ fallback –º–µ—Ö–∞–Ω–∏–∑–º—ã  
 * ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 * ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
 * ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã polyfill'—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 * ‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
 * 
 * IP Roast Enterprise 4.0 - Attack Constructor Main Module
 * Production-ready —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è enterprise –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 * =======================================================
 */
