/**
 * IP Roast Enterprise 4.0 - Connection Manager Module
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –ø—Ä–∞–≤–∏–ª
 * –í–µ—Ä—Å–∏—è: 4.0.0-Enhanced-Connection
 * 
 * @description –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
 * @author IP Roast Security Team
 * @requires attack-constructor-core.js, canvas-manager.js
 * @integrates signature-components, rule-generator
 */

console.log('üîó Loading Connection Manager v4.0.0-Enhanced');

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
 */
class ConnectionManager {
    constructor(coreInstance, canvasManager) {
        this.version = '4.0.0-Enhanced-Connection';
        this.core = coreInstance;
        this.canvasManager = canvasManager;
        this.isInitialized = false;

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        this.connections = new Map();
        this.svgLayer = null;
        this.isConnecting = false;
        this.connectionStart = null;
        this.tempConnectionPath = null;

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        this.connectionStyle = {
            strokeWidth: 2,
            strokeColor: 'var(--color-primary)',
            strokeColorHover: 'var(--color-primary-hover)',
            strokeColorSelected: 'var(--color-accent)',
            strokeDasharray: 'none',
            curveOffset: 100
        };

        // –¢–∏–ø—ã –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        this.logicalOperators = {
            'AND': {
                symbol: '‚àß',
                color: 'var(--color-success)',
                description: '–õ–æ–≥–∏—á–µ—Å–∫–æ–µ –ò - –≤—Å–µ —É—Å–ª–æ–≤–∏—è –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è'
            },
            'OR': {
                symbol: '‚à®',
                color: 'var(--color-warning)',
                description: '–õ–æ–≥–∏—á–µ—Å–∫–æ–µ –ò–õ–ò - –ª—é–±–æ–µ —É—Å–ª–æ–≤–∏–µ –¥–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è'
            },
            'NOT': {
                symbol: '¬¨',
                color: 'var(--color-error)',
                description: '–õ–æ–≥–∏—á–µ—Å–∫–æ–µ –ù–ï - –∏–Ω–≤–µ—Ä—Å–∏—è —É—Å–ª–æ–≤–∏—è'
            },
            'XOR': {
                symbol: '‚äï',
                color: 'var(--color-info)',
                description: '–ò—Å–∫–ª—é—á–∞—é—â–µ–µ –ò–õ–ò - —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ'
            },
            'NAND': {
                symbol: '‚äº',
                color: 'var(--color-purple)',
                description: '–ù–ï –ò - –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ò'
            },
            'NOR': {
                symbol: '‚äΩ',
                color: 'var(--color-cyan)',
                description: '–ù–ï –ò–õ–ò - –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ò–õ–ò'
            }
        };

        // –°—á–µ—Ç—á–∏–∫–∏ –∏ ID
        this.nextConnectionId = 1;
        this.connectionIdPrefix = 'connection';

        // –°–æ–±—ã—Ç–∏—è
        this.eventHandlers = new Map();
        this.connectionEventListeners = new Map();

        // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
        this.maxConnections = 200;
        this.validationRules = {
            allowSelfConnection: false,
            allowMultipleConnections: true,
            allowCycles: false,
            maxInputConnections: 10,
            maxOutputConnections: 10
        };

        console.log('üîó Connection Manager initialized');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Connection Manager
     */
    async initialize() {
        try {
            console.log('üöÄ Initializing Connection Manager...');

            await this.setupSvgLayer();
            this.bindCanvasEvents();
            this.setupConnectionGestures();
            this.initializeValidation();

            this.isInitialized = true;
            console.log('‚úÖ Connection Manager initialized successfully');

        } catch (error) {
            console.error('‚ùå Connection Manager initialization failed:', error);
            throw error;
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SVG —Å–ª–æ—è –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
     */
    async setupSvgLayer() {
        const canvasElement = this.canvasManager?.canvasElement || document.getElementById('rule-canvas');
        if (!canvasElement) {
            throw new Error('Canvas element not found for SVG layer');
        }

        // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π SVG —Å–ª–æ–π –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        this.svgLayer = canvasElement.querySelector('#connection-layer');

        if (!this.svgLayer) {
            this.svgLayer = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
            this.svgLayer.id = 'connection-layer';
            this.svgLayer.className = 'connection-svg-layer';

            this.applySvgStyles();
            canvasElement.appendChild(this.svgLayer);
        }

        // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        this.createSvgGroups();

        console.log('üé® SVG layer setup completed');
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –∫ SVG —Å–ª–æ—é
     */
    applySvgStyles() {
        Object.assign(this.svgLayer.style, {
            position: 'absolute',
            top: '0',
            left: '0',
            width: '100%',
            height: '100%',
            pointerEvents: 'none',
            zIndex: '15',
            overflow: 'visible'
        });

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã SVG
        this.svgLayer.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
        this.svgLayer.setAttribute('viewBox', '0 0 100% 100%');
        this.svgLayer.setAttribute('preserveAspectRatio', 'none');
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø SVG —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    createSvgGroups() {
        // –ì—Ä—É–ø–ø–∞ –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        this.connectionsGroup = this.createSvgGroup('connections-group');

        // –ì—Ä—É–ø–ø–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (preview)
        this.tempGroup = this.createSvgGroup('temp-group');

        // –ì—Ä—É–ø–ø–∞ –¥–ª—è –º–µ—Ç–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        this.labelsGroup = this.createSvgGroup('labels-group');

        // –ì—Ä—É–ø–ø–∞ –¥–ª—è —Ç–æ—á–µ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        this.pointsGroup = this.createSvgGroup('points-group');
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ SVG –≥—Ä—É–ø–ø—ã
     */
    createSvgGroup(className) {
        const group = document.createElementNS('http://www.w3.org/2000/svg', 'g');
        group.className = className;
        this.svgLayer.appendChild(group);
        return group;
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π canvas –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
     */
    bindCanvasEvents() {
        if (!this.canvasManager) {
            console.warn('‚ö†Ô∏è Canvas Manager not available for connection events');
            return;
        }

        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç canvas manager
        this.canvasManager.on('connectionStarted', this.handleConnectionStart.bind(this));
        this.canvasManager.on('nodePositionChanged', this.handleNodePositionChanged.bind(this));
        this.canvasManager.on('nodeDeleted', this.handleNodeDeleted.bind(this));
        this.canvasManager.on('canvasCleared', this.handleCanvasCleared.bind(this));

        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –º—ã—à–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        document.addEventListener('mousemove', this.handleGlobalMouseMove.bind(this));
        document.addEventListener('mouseup', this.handleGlobalMouseUp.bind(this));

        console.log('‚ö° Connection events bound to canvas');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∂–µ—Å—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
     */
    setupConnectionGestures() {
        // Touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        if (this.canvasManager?.canvasElement) {
            const canvas = this.canvasManager.canvasElement;

            canvas.addEventListener('touchstart', this.handleTouchStart.bind(this), { passive: false });
            canvas.addEventListener('touchmove', this.handleTouchMove.bind(this), { passive: false });
            canvas.addEventListener('touchend', this.handleTouchEnd.bind(this), { passive: false });
        }

        console.log('üëÜ Connection gestures initialized');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    initializeValidation() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–∏–ª –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.validationCache = new Map();

        console.log('‚úÖ Connection validation initialized');
    }

    // =======================================================
    // –°–û–ó–î–ê–ù–ò–ï –°–û–ï–î–ò–ù–ï–ù–ò–ô
    // =======================================================

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    handleConnectionStart(data) {
        const { nodeId, pointType, position } = data;

        if (this.isConnecting) {
            console.warn('‚ö†Ô∏è Connection already in progress');
            return;
        }

        console.log(`üîó Starting connection from ${nodeId} (${pointType})`);

        this.isConnecting = true;
        this.connectionStart = {
            nodeId,
            pointType,
            position: this.getNodeConnectionPoint(nodeId, pointType)
        };

        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ª–∏–Ω–∏—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        this.createTempConnection(this.connectionStart.position, position);

        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        this.highlightAvailableConnectionPoints(nodeId);

        this.emit('connectionStarted', { nodeId, pointType });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ç–æ—á–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —É–∑–ª–∞
     */
    getNodeConnectionPoint(nodeId, pointType) {
        const node = this.canvasManager?.canvasNodes?.get(nodeId);
        if (!node) {
            console.error(`‚ùå Node ${nodeId} not found for connection point`);
            return { x: 0, y: 0 };
        }

        const nodeElement = document.getElementById(nodeId);
        if (!nodeElement) {
            return { x: node.position.x, y: node.position.y };
        }

        const rect = nodeElement.getBoundingClientRect();
        const canvasRect = this.canvasManager.canvasElement.getBoundingClientRect();

        // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        let x, y;

        if (pointType === 'output') {
            x = (rect.right - canvasRect.left);
            y = (rect.top + rect.height / 2 - canvasRect.top);
        } else { // input
            x = (rect.left - canvasRect.left);
            y = (rect.top + rect.height / 2 - canvasRect.top);
        }

        return { x, y };
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    createTempConnection(startPos, endPos) {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –ª–∏–Ω–∏—é
        this.removeTempConnection();

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –ª–∏–Ω–∏—é
        this.tempConnectionPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');
        this.tempConnectionPath.className = 'temp-connection-path';

        this.applyConnectionStyles(this.tempConnectionPath, {
            stroke: this.connectionStyle.strokeColor,
            strokeWidth: this.connectionStyle.strokeWidth,
            strokeDasharray: '5,5',
            fill: 'none',
            opacity: '0.7',
            pointerEvents: 'none'
        });

        // –°—Ç—Ä–æ–∏–º –ø—É—Ç—å
        const pathData = this.buildConnectionPath(startPos, endPos);
        this.tempConnectionPath.setAttribute('d', pathData);

        this.tempGroup.appendChild(this.tempConnectionPath);
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ SVG –ø—É—Ç–∏ –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    buildConnectionPath(startPos, endPos) {
        const dx = endPos.x - startPos.x;
        const controlOffset = Math.max(Math.abs(dx) / 2, this.connectionStyle.curveOffset);

        // –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –∫—Ä–∏–≤–æ–π –ë–µ–∑—å–µ
        const cp1x = startPos.x + controlOffset;
        const cp1y = startPos.y;
        const cp2x = endPos.x - controlOffset;
        const cp2y = endPos.y;

        return `M ${startPos.x} ${startPos.y} C ${cp1x} ${cp1y}, ${cp2x} ${cp2y}, ${endPos.x} ${endPos.y}`;
    }

    /**
     * –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—á–µ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    highlightAvailableConnectionPoints(excludeNodeId) {
        if (!this.canvasManager?.canvasNodes) return;

        this.canvasManager.canvasNodes.forEach((node, nodeId) => {
            if (nodeId === excludeNodeId) return;

            const nodeElement = document.getElementById(nodeId);
            if (!nodeElement) return;

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Ç–æ—á–µ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            const connectionPoints = nodeElement.querySelectorAll('.connection-point');
            connectionPoints.forEach(point => {
                point.classList.add('connection-available');

                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                point.addEventListener('mouseenter', this.handleConnectionPointHover.bind(this, nodeId));
                point.addEventListener('mouseleave', this.handleConnectionPointLeave.bind(this, nodeId));
                point.addEventListener('mouseup', this.handleConnectionPointClick.bind(this, nodeId));
            });
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Ç–æ—á–µ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    handleConnectionPointHover(nodeId, event) {
        if (!this.isConnecting) return;

        event.target.classList.add('connection-target');

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ª–∏–Ω–∏—é –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏
        const pointType = event.target.dataset.type || 'input';
        const targetPos = this.getNodeConnectionPoint(nodeId, pointType);

        if (this.tempConnectionPath && this.connectionStart) {
            const pathData = this.buildConnectionPath(this.connectionStart.position, targetPos);
            this.tempConnectionPath.setAttribute('d', pathData);
        }
    }

    handleConnectionPointLeave(nodeId, event) {
        event.target.classList.remove('connection-target');
    }

    handleConnectionPointClick(nodeId, event) {
        if (!this.isConnecting) return;

        event.stopPropagation();
        event.preventDefault();

        const pointType = event.target.dataset.type || 'input';
        this.completeConnection(nodeId, pointType);
    }

    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    completeConnection(targetNodeId, targetPointType) {
        if (!this.isConnecting || !this.connectionStart) {
            return false;
        }

        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            const validation = this.validateConnection(
                this.connectionStart.nodeId,
                targetNodeId,
                this.connectionStart.pointType,
                targetPointType
            );

            if (!validation.isValid) {
                console.warn('‚ö†Ô∏è Connection validation failed:', validation.errors);
                this.showValidationError(validation.errors);
                this.cancelConnection();
                return false;
            }

            // –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            const connectionId = this.generateConnectionId();
            const connection = this.createConnectionData(
                connectionId,
                this.connectionStart.nodeId,
                targetNodeId,
                this.connectionStart.pointType,
                targetPointType
            );

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            this.connections.set(connectionId, connection);

            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            this.renderConnection(connection);

            // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            this.cancelConnection();

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            this.emit('connectionCreated', { connectionId, connection });

            console.log(`‚úÖ Connection created: ${this.connectionStart.nodeId} -> ${targetNodeId}`);
            return true;

        } catch (error) {
            console.error('‚ùå Error completing connection:', error);
            this.showError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
            this.cancelConnection();
            return false;
        }
    }

    /**
     * –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    cancelConnection() {
        this.isConnecting = false;
        this.connectionStart = null;

        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        this.removeTempConnection();
        this.clearConnectionHighlights();

        console.log('üö´ Connection cancelled');
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    removeTempConnection() {
        if (this.tempConnectionPath) {
            this.tempConnectionPath.remove();
            this.tempConnectionPath = null;
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Ç–æ—á–µ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    clearConnectionHighlights() {
        document.querySelectorAll('.connection-point').forEach(point => {
            point.classList.remove('connection-available', 'connection-target');

            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            const newPoint = point.cloneNode(true);
            point.parentNode.replaceChild(newPoint, point);
        });
    }

    // =======================================================
    // –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–ï–î–ò–ù–ï–ù–ò–Ø–ú–ò
    // =======================================================

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    createConnectionData(connectionId, fromNodeId, toNodeId, fromPointType, toPointType) {
        return {
            id: connectionId,
            from: {
                nodeId: fromNodeId,
                pointType: fromPointType
            },
            to: {
                nodeId: toNodeId,
                pointType: toPointType
            },
            operator: 'AND', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            metadata: {
                created: new Date().toISOString(),
                updated: new Date().toISOString(),
                version: '1.0'
            },
            style: {
                strokeWidth: this.connectionStyle.strokeWidth,
                strokeColor: this.connectionStyle.strokeColor,
                strokeDasharray: this.connectionStyle.strokeDasharray
            },
            state: {
                selected: false,
                valid: true,
                visible: true
            }
        };
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    renderConnection(connection) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —É–∑–ª–æ–≤
            const fromPos = this.getNodeConnectionPoint(connection.from.nodeId, connection.from.pointType);
            const toPos = this.getNodeConnectionPoint(connection.to.nodeId, connection.to.pointType);

            // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            const connectionGroup = this.createConnectionGroup(connection.id);

            // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–∏–Ω–∏—é
            const pathElement = this.createConnectionPath(connection, fromPos, toPos);
            connectionGroup.appendChild(pathElement);

            // –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∫—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            const operatorLabel = this.createOperatorLabel(connection, fromPos, toPos);
            connectionGroup.appendChild(operatorLabel);

            // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
            this.bindConnectionEvents(connectionGroup, connection);

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            this.connectionsGroup.appendChild(connectionGroup);

            console.log(`üé® Connection ${connection.id} rendered`);

        } catch (error) {
            console.error(`‚ùå Error rendering connection ${connection.id}:`, error);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    createConnectionGroup(connectionId) {
        const group = document.createElementNS('http://www.w3.org/2000/svg', 'g');
        group.id = connectionId;
        group.className = 'connection-group';
        group.style.pointerEvents = 'all';
        return group;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ SVG –ø—É—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    createConnectionPath(connection, fromPos, toPos) {
        const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
        path.className = 'connection-path';

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
        this.applyConnectionStyles(path, {
            stroke: connection.style.strokeColor,
            strokeWidth: connection.style.strokeWidth,
            strokeDasharray: connection.style.strokeDasharray,
            fill: 'none',
            cursor: 'pointer'
        });

        // –°—Ç—Ä–æ–∏–º –ø—É—Ç—å
        const pathData = this.buildConnectionPath(fromPos, toPos);
        path.setAttribute('d', pathData);

        return path;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∫–∏ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
     */
    createOperatorLabel(connection, fromPos, toPos) {
        const operator = this.logicalOperators[connection.operator];
        const centerX = (fromPos.x + toPos.x) / 2;
        const centerY = (fromPos.y + toPos.y) / 2;

        // –ì—Ä—É–ø–ø–∞ –¥–ª—è –º–µ—Ç–∫–∏
        const labelGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');
        labelGroup.className = 'operator-label';

        // –§–æ–Ω –º–µ—Ç–∫–∏
        const background = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
        background.setAttribute('cx', centerX);
        background.setAttribute('cy', centerY);
        background.setAttribute('r', '18');
        background.setAttribute('fill', 'var(--color-surface-elevated)');
        background.setAttribute('stroke', operator.color);
        background.setAttribute('stroke-width', '2');

        // –¢–µ–∫—Å—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');
        text.setAttribute('x', centerX);
        text.setAttribute('y', centerY);
        text.setAttribute('text-anchor', 'middle');
        text.setAttribute('dominant-baseline', 'middle');
        text.setAttribute('font-size', '14');
        text.setAttribute('font-weight', 'bold');
        text.setAttribute('fill', operator.color);
        text.textContent = operator.symbol;

        labelGroup.appendChild(background);
        labelGroup.appendChild(text);

        return labelGroup;
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –∫ SVG —ç–ª–µ–º–µ–Ω—Ç—É
     */
    applyConnectionStyles(element, styles) {
        Object.entries(styles).forEach(([property, value]) => {
            element.setAttribute(this.camelToKebab(property), value);
        });
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è camelCase –≤ kebab-case
     */
    camelToKebab(str) {
        return str.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—é
     */
    bindConnectionEvents(connectionGroup, connection) {
        const eventHandler = {
            click: this.handleConnectionClick.bind(this, connection.id),
            contextmenu: this.handleConnectionContextMenu.bind(this, connection.id),
            mouseenter: this.handleConnectionMouseEnter.bind(this, connection.id),
            mouseleave: this.handleConnectionMouseLeave.bind(this, connection.id)
        };

        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        Object.entries(eventHandler).forEach(([event, handler]) => {
            connectionGroup.addEventListener(event, handler);
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        this.connectionEventListeners.set(connection.id, eventHandler);
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    generateConnectionId() {
        return `${this.connectionIdPrefix}-${this.nextConnectionId++}`;
    }

    // =======================================================
    // –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô –°–û–ï–î–ò–ù–ï–ù–ò–ô
    // =======================================================

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—é
     */
    handleConnectionClick(connectionId, event) {
        event.stopPropagation();

        const connection = this.connections.get(connectionId);
        if (!connection) return;

        // –í—ã–±–∏—Ä–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        this.selectConnection(connectionId);

        console.log(`üéØ Selected connection: ${connectionId}`);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    handleConnectionContextMenu(connectionId, event) {
        event.preventDefault();
        event.stopPropagation();

        this.showConnectionContextMenu(connectionId, event.clientX, event.clientY);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
     */
    handleConnectionMouseEnter(connectionId, event) {
        const connectionGroup = document.getElementById(connectionId);
        if (connectionGroup) {
            connectionGroup.classList.add('connection-hover');

            // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –ø—É—Ç—å
            const path = connectionGroup.querySelector('.connection-path');
            if (path) {
                path.setAttribute('stroke', this.connectionStyle.strokeColorHover);
                path.setAttribute('stroke-width', this.connectionStyle.strokeWidth + 1);
            }
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Ö–æ–¥–∞ –∫—É—Ä—Å–æ—Ä–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    handleConnectionMouseLeave(connectionId, event) {
        const connectionGroup = document.getElementById(connectionId);
        if (connectionGroup) {
            connectionGroup.classList.remove('connection-hover');

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å—Ç–∏–ª–∏
            const path = connectionGroup.querySelector('.connection-path');
            const connection = this.connections.get(connectionId);
            if (path && connection) {
                path.setAttribute('stroke', connection.style.strokeColor);
                path.setAttribute('stroke-width', connection.style.strokeWidth);
            }
        }
    }

    /**
     * –í—ã–±–æ—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    selectConnection(connectionId) {
        // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        this.clearConnectionSelection();

        const connection = this.connections.get(connectionId);
        if (!connection) return;

        // –í—ã–¥–µ–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        connection.state.selected = true;

        const connectionGroup = document.getElementById(connectionId);
        if (connectionGroup) {
            connectionGroup.classList.add('connection-selected');

            const path = connectionGroup.querySelector('.connection-path');
            if (path) {
                path.setAttribute('stroke', this.connectionStyle.strokeColorSelected);
                path.setAttribute('stroke-width', this.connectionStyle.strokeWidth + 2);
            }
        }

        this.emit('connectionSelected', { connectionId, connection });
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
     */
    clearConnectionSelection() {
        this.connections.forEach((connection, connectionId) => {
            if (connection.state.selected) {
                connection.state.selected = false;

                const connectionGroup = document.getElementById(connectionId);
                if (connectionGroup) {
                    connectionGroup.classList.remove('connection-selected');

                    const path = connectionGroup.querySelector('.connection-path');
                    if (path) {
                        path.setAttribute('stroke', connection.style.strokeColor);
                        path.setAttribute('stroke-width', connection.style.strokeWidth);
                    }
                }
            }
        });
    }

    /**
     * –ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    showConnectionContextMenu(connectionId, x, y) {
        const connection = this.connections.get(connectionId);
        if (!connection) return;

        const menuItems = [
            {
                label: '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä',
                icon: 'üîÑ',
                submenu: Object.keys(this.logicalOperators).map(op => ({
                    label: `${this.logicalOperators[op].symbol} ${op}`,
                    action: () => this.changeConnectionOperator(connectionId, op)
                }))
            },
            {
                label: '–°—Ç–∏–ª—å –ª–∏–Ω–∏–∏',
                icon: 'üé®',
                submenu: [
                    {
                        label: '–°–ø–ª–æ—à–Ω–∞—è',
                        action: () => this.changeConnectionStyle(connectionId, { strokeDasharray: 'none' })
                    },
                    {
                        label: '–®—Ç—Ä–∏—Ö–æ–≤–∞—è',
                        action: () => this.changeConnectionStyle(connectionId, { strokeDasharray: '5,5' })
                    },
                    {
                        label: '–¢–æ—á–µ—á–Ω–∞—è',
                        action: () => this.changeConnectionStyle(connectionId, { strokeDasharray: '2,2' })
                    }
                ]
            },
            { separator: true },
            {
                label: '–£–¥–∞–ª–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ',
                icon: 'üóëÔ∏è',
                action: () => this.deleteConnection(connectionId),
                danger: true
            }
        ];

        this.createContextMenu(connectionId, x, y, menuItems);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
     */
    createContextMenu(connectionId, x, y, items) {
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
        this.removeContextMenu();

        const menu = document.createElement('div');
        menu.className = 'connection-context-menu';
        menu.style.cssText = `
            position: fixed;
            left: ${x}px;
            top: ${y}px;
            background: var(--color-surface-elevated);
            border: 1px solid var(--color-border);
            border-radius: var(--radius-base);
            box-shadow: var(--shadow-lg);
            padding: var(--space-4);
            z-index: 1000;
            min-width: 180px;
        `;

        items.forEach(item => {
            if (item.separator) {
                const separator = document.createElement('div');
                separator.style.cssText = `
                    height: 1px;
                    background: var(--color-border);
                    margin: var(--space-4) 0;
                `;
                menu.appendChild(separator);
            } else {
                const menuItem = this.createMenuItem(item);
                menu.appendChild(menuItem);
            }
        });

        document.body.appendChild(menu);

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
        const closeHandler = (e) => {
            if (!menu.contains(e.target)) {
                this.removeContextMenu();
                document.removeEventListener('click', closeHandler);
            }
        };

        setTimeout(() => {
            document.addEventListener('click', closeHandler);
        }, 0);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–Ω—é
     */
    createMenuItem(item) {
        const menuItem = document.createElement('div');
        menuItem.className = 'context-menu-item';
        menuItem.style.cssText = `
            display: flex;
            align-items: center;
            gap: var(--space-8);
            padding: var(--space-8) var(--space-12);
            cursor: pointer;
            border-radius: var(--radius-sm);
            transition: var(--transition-all);
            ${item.danger ? 'color: var(--color-error);' : ''}
        `;

        menuItem.innerHTML = `
            <span class="menu-icon">${item.icon}</span>
            <span class="menu-label">${item.label}</span>
            ${item.submenu ? '<span class="menu-arrow">‚ñ∂</span>' : ''}
        `;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        if (item.action) {
            menuItem.addEventListener('click', () => {
                item.action();
                this.removeContextMenu();
            });
        }

        if (item.submenu) {
            menuItem.addEventListener('mouseenter', () => {
                this.showSubmenu(menuItem, item.submenu);
            });
        }

        menuItem.addEventListener('mouseenter', () => {
            menuItem.style.background = item.danger ?
                'rgba(var(--color-error-rgb), 0.1)' :
                'var(--color-surface-hover)';
        });

        menuItem.addEventListener('mouseleave', () => {
            menuItem.style.background = 'transparent';
        });

        return menuItem;
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
     */
    removeContextMenu() {
        const existingMenu = document.querySelector('.connection-context-menu');
        if (existingMenu) {
            existingMenu.remove();
        }
    }

    // =======================================================
    // –û–ü–ï–†–ê–¶–ò–ò –° –°–û–ï–î–ò–ù–ï–ù–ò–Ø–ú–ò
    // =======================================================

    /**
     * –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    changeConnectionOperator(connectionId, newOperator) {
        const connection = this.connections.get(connectionId);
        if (!connection || !this.logicalOperators[newOperator]) {
            console.warn(`‚ö†Ô∏è Invalid connection or operator: ${connectionId}, ${newOperator}`);
            return false;
        }

        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            connection.operator = newOperator;
            connection.metadata.updated = new Date().toISOString();

            // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            this.redrawConnection(connectionId);

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            this.emit('connectionOperatorChanged', { connectionId, operator: newOperator });

            console.log(`üîÑ Changed operator for ${connectionId} to ${newOperator}`);
            return true;

        } catch (error) {
            console.error(`‚ùå Error changing connection operator:`, error);
            return false;
        }
    }

    /**
     * –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    changeConnectionStyle(connectionId, styleChanges) {
        const connection = this.connections.get(connectionId);
        if (!connection) return false;

        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å
            Object.assign(connection.style, styleChanges);
            connection.metadata.updated = new Date().toISOString();

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ SVG —ç–ª–µ–º–µ–Ω—Ç—É
            const connectionGroup = document.getElementById(connectionId);
            const path = connectionGroup?.querySelector('.connection-path');

            if (path) {
                Object.entries(styleChanges).forEach(([property, value]) => {
                    path.setAttribute(this.camelToKebab(property), value);
                });
            }

            this.emit('connectionStyleChanged', { connectionId, style: styleChanges });
            return true;

        } catch (error) {
            console.error(`‚ùå Error changing connection style:`, error);
            return false;
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    deleteConnection(connectionId) {
        const connection = this.connections.get(connectionId);
        if (!connection) {
            console.warn(`‚ö†Ô∏è Connection ${connectionId} not found for deletion`);
            return false;
        }

        const confirmMessage = `–£–¥–∞–ª–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏?`;
        if (!confirm(confirmMessage)) {
            return false;
        }

        try {
            console.log(`üóëÔ∏è Deleting connection: ${connectionId}`);

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º —É–¥–∞–ª–µ–Ω–∏–∏
            this.emit('connectionDeleting', { connectionId, connection });

            // –£–¥–∞–ª—è–µ–º SVG —ç–ª–µ–º–µ–Ω—Ç—ã
            const connectionGroup = document.getElementById(connectionId);
            if (connectionGroup) {
                connectionGroup.remove();
            }

            // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.connectionEventListeners.delete(connectionId);

            // –£–¥–∞–ª—è–µ–º –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            this.connections.delete(connectionId);

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
            this.emit('connectionDeleted', { connectionId });

            console.log(`‚úÖ Connection ${connectionId} deleted successfully`);
            return true;

        } catch (error) {
            console.error(`‚ùå Error deleting connection ${connectionId}:`, error);
            this.showError(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`);
            return false;
        }
    }

    /**
     * –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    redrawConnection(connectionId) {
        const connection = this.connections.get(connectionId);
        if (!connection) return;

        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
        const existingGroup = document.getElementById(connectionId);
        if (existingGroup) {
            existingGroup.remove();
        }

        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º
        this.renderConnection(connection);
    }

    /**
     * –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
     */
    redrawAllConnections() {
        console.log('üé® Redrawing all connections...');

        // –û—á–∏—â–∞–µ–º –≥—Ä—É–ø–ø—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        this.connectionsGroup.innerHTML = '';

        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        this.connections.forEach((connection) => {
            this.renderConnection(connection);
        });

        console.log(`‚úÖ Redrawn ${this.connections.size} connections`);
    }

    // =======================================================
    // –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô CANVAS
    // =======================================================

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ —É–∑–ª–∞
     */
    handleNodePositionChanged(data) {
        const { nodeId } = data;

        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º —É–∑–ª–æ–º
        const relatedConnections = Array.from(this.connections.values()).filter(
            connection => connection.from.nodeId === nodeId || connection.to.nodeId === nodeId
        );

        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        relatedConnections.forEach(connection => {
            this.redrawConnection(connection.id);
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —É–∑–ª–∞
     */
    handleNodeDeleted(data) {
        const { nodeId } = data;

        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —É–∑–ª–æ–º
        const connectionsToDelete = Array.from(this.connections.entries()).filter(
            ([connectionId, connection]) =>
                connection.from.nodeId === nodeId || connection.to.nodeId === nodeId
        );

        // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        connectionsToDelete.forEach(([connectionId]) => {
            this.deleteConnection(connectionId);
        });

        console.log(`üóëÔ∏è Deleted ${connectionsToDelete.length} connections related to node ${nodeId}`);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ canvas
     */
    handleCanvasCleared() {
        console.log('üßπ Clearing all connections...');

        // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        this.connections.clear();
        this.connectionEventListeners.clear();

        // –û—á–∏—â–∞–µ–º SVG —Å–ª–æ–π
        if (this.connectionsGroup) {
            this.connectionsGroup.innerHTML = '';
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.cancelConnection();

        console.log('‚úÖ All connections cleared');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏
     */
    handleGlobalMouseMove(event) {
        if (!this.isConnecting || !this.tempConnectionPath || !this.connectionStart) {
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ª–∏–Ω–∏—é
        const canvasRect = this.canvasManager.canvasElement.getBoundingClientRect();
        const currentPos = {
            x: event.clientX - canvasRect.left,
            y: event.clientY - canvasRect.top
        };

        const pathData = this.buildConnectionPath(this.connectionStart.position, currentPos);
        this.tempConnectionPath.setAttribute('d', pathData);
    }

    handleGlobalMouseUp(event) {
        if (!this.isConnecting) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ø–∞–ª–∏ –ª–∏ –≤ —Ç–æ—á–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        const target = event.target;
        if (target.classList.contains('connection-point')) {
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ —Å—Ä–∞–±–æ—Ç–∞–ª –≤ handleConnectionPointClick
            return;
        }

        // –û—Ç–º–µ–Ω—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        this.cancelConnection();
    }

    // =======================================================
    // TOUCH –°–û–ë–´–¢–ò–Ø
    // =======================================================

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ touch —Å–æ–±—ã—Ç–∏–π
     */
    handleTouchStart(event) {
        // –ò–º–∏—Ç–∏—Ä—É–µ–º mouse —Å–æ–±—ã—Ç–∏—è –¥–ª—è touch —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        if (event.touches.length === 1) {
            const touch = event.touches[0];

            if (touch.target.classList.contains('connection-point')) {
                event.preventDefault();
                this.simulateTouchAsMouseEvent('mousedown', touch);
            }
        }
    }

    handleTouchMove(event) {
        if (this.isConnecting && event.touches.length === 1) {
            event.preventDefault();
            const touch = event.touches[0];
            this.simulateTouchAsMouseEvent('mousemove', touch);
        }
    }

    handleTouchEnd(event) {
        if (this.isConnecting) {
            event.preventDefault();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏–º –∫–∞—Å–∞–Ω–∏–µ–º
            const touch = event.changedTouches[0];
            const elementUnder = document.elementFromPoint(touch.clientX, touch.clientY);

            if (elementUnder && elementUnder.classList.contains('connection-point')) {
                this.simulateTouchAsMouseEvent('mouseup', touch, elementUnder);
            } else {
                this.cancelConnection();
            }
        }
    }

    /**
     * –ò–º–∏—Ç–∞—Ü–∏—è mouse —Å–æ–±—ã—Ç–∏—è –∏–∑ touch
     */
    simulateTouchAsMouseEvent(type, touch, target = null) {
        const mouseEvent = new MouseEvent(type, {
            bubbles: true,
            cancelable: true,
            clientX: touch.clientX,
            clientY: touch.clientY,
            button: 0
        });

        (target || touch.target).dispatchEvent(mouseEvent);
    }

    // =======================================================
    // –í–ê–õ–ò–î–ê–¶–ò–Ø –°–û–ï–î–ò–ù–ï–ù–ò–ô
    // =======================================================

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    validateConnection(fromNodeId, toNodeId, fromPointType, toPointType) {
        const errors = [];
        const warnings = [];

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∞–º–æ—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if (fromNodeId === toNodeId && !this.validationRules.allowSelfConnection) {
            errors.push('–°–∞–º–æ—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∑–ª–∞ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if (fromPointType === 'input' && toPointType === 'output') {
            errors.push('–ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: –≤—ã—Ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è —Å –≤—Ö–æ–¥–æ–º');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if (!this.validationRules.allowMultipleConnections) {
            const existingConnection = Array.from(this.connections.values()).find(
                conn => conn.from.nodeId === fromNodeId && conn.to.nodeId === toNodeId
            );

            if (existingConnection) {
                errors.push('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–µ–∂–¥—É —ç—Ç–∏–º–∏ —É–∑–ª–∞–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏–∫–ª—ã
        if (!this.validationRules.allowCycles && this.wouldCreateCycle(fromNodeId, toNodeId)) {
            errors.push('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Å—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        const inputConnections = this.getNodeInputConnections(toNodeId);
        const outputConnections = this.getNodeOutputConnections(fromNodeId);

        if (inputConnections.length >= this.validationRules.maxInputConnections) {
            warnings.push(`–£–∑–µ–ª –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (${this.validationRules.maxInputConnections})`);
        }

        if (outputConnections.length >= this.validationRules.maxOutputConnections) {
            warnings.push(`–£–∑–µ–ª –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (${this.validationRules.maxOutputConnections})`);
        }

        return {
            isValid: errors.length === 0,
            errors,
            warnings
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ü–∏–∫–ª–∞
     */
    wouldCreateCycle(fromNodeId, toNodeId) {
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –ø—É—Ç—å –æ—Ç toNodeId –∫ fromNodeId
        const visited = new Set();

        const hasPath = (startNode, targetNode) => {
            if (startNode === targetNode) return true;
            if (visited.has(startNode)) return false;

            visited.add(startNode);

            // –ò—â–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ—Ç startNode
            const outgoingConnections = Array.from(this.connections.values()).filter(
                conn => conn.from.nodeId === startNode
            );

            return outgoingConnections.some(conn => hasPath(conn.to.nodeId, targetNode));
        };

        return hasPath(toNodeId, fromNodeId);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —É–∑–ª–∞
     */
    getNodeInputConnections(nodeId) {
        return Array.from(this.connections.values()).filter(
            conn => conn.to.nodeId === nodeId
        );
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —É–∑–ª–∞
     */
    getNodeOutputConnections(nodeId) {
        return Array.from(this.connections.values()).filter(
            conn => conn.from.nodeId === nodeId
        );
    }

    /**
     * –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    showValidationError(errors) {
        const message = errors.join('\n');

        if (window.app?.showErrorNotification) {
            window.app.showErrorNotification(message);
        } else {
            alert(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:\n${message}`);
        }
    }

    // =======================================================
    // –≠–ö–°–ü–û–†–¢ –ò –ò–ú–ü–û–†–¢
    // =======================================================

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
     */
    exportConnectionsData() {
        const connectionsData = Array.from(this.connections.values()).map(connection => ({
            id: connection.id,
            from: { ...connection.from },
            to: { ...connection.to },
            operator: connection.operator,
            metadata: { ...connection.metadata },
            style: { ...connection.style }
        }));

        return {
            version: this.version,
            timestamp: new Date().toISOString(),
            settings: {
                validationRules: { ...this.validationRules },
                connectionStyle: { ...this.connectionStyle }
            },
            connections: connectionsData
        };
    }

    /**
     * –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
     */
    async importConnectionsData(data) {
        try {
            console.log('üì• Importing connections data...');

            // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            this.clearAllConnections();

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if (data.settings) {
                if (data.settings.validationRules) {
                    this.validationRules = { ...this.validationRules, ...data.settings.validationRules };
                }

                if (data.settings.connectionStyle) {
                    this.connectionStyle = { ...this.connectionStyle, ...data.settings.connectionStyle };
                }
            }

            // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if (data.connections && Array.isArray(data.connections)) {
                for (const connectionData of data.connections) {
                    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º, —á—Ç–æ —É–∑–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
                    const fromExists = this.canvasManager?.canvasNodes?.has(connectionData.from.nodeId);
                    const toExists = this.canvasManager?.canvasNodes?.has(connectionData.to.nodeId);

                    if (fromExists && toExists) {
                        this.connections.set(connectionData.id, connectionData);
                        this.renderConnection(connectionData);
                    } else {
                        console.warn(`‚ö†Ô∏è Skipping connection ${connectionData.id} - nodes not found`);
                    }
                }
            }

            console.log(`‚úÖ Imported ${data.connections?.length || 0} connections`);
            this.emit('connectionsImported', { count: data.connections?.length || 0 });

        } catch (error) {
            console.error('‚ùå Error importing connections data:', error);
            this.showError('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π');
            throw error;
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
     */
    clearAllConnections() {
        console.log('üßπ Clearing all connections...');

        this.connections.clear();
        this.connectionEventListeners.clear();

        if (this.connectionsGroup) {
            this.connectionsGroup.innerHTML = '';
        }

        this.cancelConnection();
    }

    // =======================================================
    // –£–¢–ò–õ–ò–¢–ê–†–ù–´–ï –ú–ï–¢–û–î–´
    // =======================================================

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
     */
    generateLogicExpression() {
        if (this.connections.size === 0) {
            return '';
        }

        try {
            // –ü—Ä–æ—Å—Ç–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            const expressions = [];

            this.connections.forEach(connection => {
                const fromNode = this.canvasManager?.canvasNodes?.get(connection.from.nodeId);
                const toNode = this.canvasManager?.canvasNodes?.get(connection.to.nodeId);

                if (fromNode && toNode) {
                    const fromName = fromNode.definition?.name || connection.from.nodeId;
                    const toName = toNode.definition?.name || connection.to.nodeId;
                    expressions.push(`${fromName} ${connection.operator} ${toName}`);
                }
            });

            return expressions.join(' ');

        } catch (error) {
            console.error('‚ùå Error generating logic expression:', error);
            return '';
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
     */
    getConnectionStats() {
        const operatorCounts = {};

        this.connections.forEach(connection => {
            operatorCounts[connection.operator] = (operatorCounts[connection.operator] || 0) + 1;
        });

        return {
            version: this.version,
            totalConnections: this.connections.size,
            operatorCounts,
            maxConnections: this.maxConnections,
            validationRules: { ...this.validationRules },
            initialized: this.isInitialized
        };
    }

    /**
     * –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
     */
    showError(message) {
        if (window.app?.showErrorNotification) {
            window.app.showErrorNotification(message);
        } else {
            console.error('‚ùå', message);
        }
    }

    /**
     * –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
     */
    showSuccess(message) {
        if (window.app?.showSuccessNotification) {
            window.app.showSuccessNotification(message);
        } else {
            console.log('‚úÖ', message);
        }
    }

    // =======================================================
    // –°–ò–°–¢–ï–ú–ê –°–û–ë–´–¢–ò–ô
    // =======================================================

    /**
     * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
     */
    on(event, handler) {
        if (!this.eventHandlers.has(event)) {
            this.eventHandlers.set(event, []);
        }
        this.eventHandlers.get(event).push(handler);
    }

    /**
     * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏—è
     */
    off(event, handler) {
        if (this.eventHandlers.has(event)) {
            const handlers = this.eventHandlers.get(event);
            const index = handlers.indexOf(handler);
            if (index > -1) {
                handlers.splice(index, 1);
            }
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è
     */
    emit(event, data) {
        if (this.eventHandlers.has(event)) {
            this.eventHandlers.get(event).forEach(handler => {
                try {
                    handler(data);
                } catch (error) {
                    console.error(`Error in event handler for ${event}:`, error);
                }
            });
        }
    }

    // =======================================================
    // –ú–ï–¢–û–î–´ –ñ–ò–ó–ù–ï–ù–ù–û–ì–û –¶–ò–ö–õ–ê
    // =======================================================

    /**
     * –ê–∫—Ç–∏–≤–∞—Ü–∏—è Connection Manager
     */
    activate() {
        if (!this.isInitialized) {
            console.warn('‚ö†Ô∏è Connection Manager not initialized');
            return;
        }

        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        this.redrawAllConnections();

        console.log('üü¢ Connection Manager activated');
        this.emit('activated');
    }

    /**
     * –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è Connection Manager
     */
    deactivate() {
        // –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        this.cancelConnection();

        console.log('üü° Connection Manager deactivated');
        this.emit('deactivated');
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    cleanup() {
        console.log('üßπ Cleaning up Connection Manager...');

        try {
            // –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            this.cancelConnection();

            // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            this.clearAllConnections();

            // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.eventHandlers.clear();
            this.connectionEventListeners.clear();

            // –û—á–∏—â–∞–µ–º SVG —Å–ª–æ–π
            if (this.svgLayer) {
                this.svgLayer.innerHTML = '';
            }

            // –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
            this.removeContextMenu();

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.isInitialized = false;
            this.isConnecting = false;
            this.connectionStart = null;

            console.log('‚úÖ Connection Manager cleanup completed');

        } catch (error) {
            console.error('‚ùå Error during Connection Manager cleanup:', error);
        }
    }
}

// =======================================================
// –≠–ö–°–ü–û–†–¢ –ò –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø
// =======================================================

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è Connection Manager
 */
function createConnectionManager(coreInstance, canvasManager) {
    return new ConnectionManager(coreInstance, canvasManager);
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–¥—É–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        ConnectionManager,
        createConnectionManager
    };
}

// ES6 —ç–∫—Å–ø–æ—Ä—Ç—ã
if (typeof window !== 'undefined') {
    window.ConnectionManager = ConnectionManager;
    window.createConnectionManager = createConnectionManager;

    // –î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π attack-constructor
    window.ConnectionManagerExports = {
        ConnectionManager,
        createConnectionManager,
        version: '4.0.0-Enhanced-Connection'
    };
}

console.log('‚úÖ Connection Manager v4.0.0-Enhanced loaded successfully');

/**
 * =======================================================
 * –ö–û–ù–ï–¶ –§–ê–ô–õ–ê connection-manager.js
 * 
 * IP Roast Enterprise 4.0 - Connection Manager Module
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
 * –í–µ—Ä—Å–∏—è: 4.0.0-Enhanced-Connection
 * 
 * –ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ (CRUD)
 * - Drag & Drop —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –º–µ–∂–¥—É —É–∑–ª–∞–º–∏
 * - 6 —Ç–∏–ø–æ–≤ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ (AND, OR, NOT, XOR, NAND, NOR)
 * - SVG –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å –∫—Ä–∏–≤—ã–º–∏ –ë–µ–∑—å–µ
 * - –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Ü–∏–∫–ª–æ–≤
 * - –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –º–µ–Ω—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * - Touch gestures –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
 * - –≠–∫—Å–ø–æ—Ä—Ç/–∏–º–ø–æ—Ä—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å canvas-manager –∏ core –º–æ–¥—É–ª–µ–º
 * - Enterprise-—É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
 * =======================================================
 */
