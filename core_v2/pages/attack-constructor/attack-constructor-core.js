/**
 * IP Roast Enterprise - Attack Constructor Core Module v2.0
 * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –º–æ–¥—É–ª–µ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–µ–Ω—Ç–µ—Å—Ç–∞
 * –í–µ—Ä—Å–∏—è: 2.0.0-Pentest-Core
 * 
 * @description –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏ –ø–µ–Ω—Ç–µ—Å—Ç–∞
 * @author IP Roast Security Team
 * @requires Enhanced PageManager, SPA Architecture
 * @integrates canvas-manager, connection-manager, ui-manager
 */

console.log('üéØ Loading Attack Constructor Core v2.0.0-Pentest');

// =======================================================
// –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ú–û–î–£–õ–ï–ô –ê–¢–ê–ö
// =======================================================

/**
 * –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –º–æ–¥—É–ª–µ–π –∞—Ç–∞–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–µ–Ω—Ç–µ—Å—Ç–∞
 */
const ATTACK_MODULES_LIBRARY = {
    // ========== –†–ê–ó–í–ï–î–ö–ê (DISCOVERY) ==========
    'nmap-discovery': {
        id: 'nmap-discovery',
        name: 'Nmap Network Discovery',
        category: 'discovery',
        icon: 'üîç',
        description: '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤',
        difficulty: 'easy',
        estimated_time: '1-5 –º–∏–Ω—É—Ç',
        parameters: {
            target_range: {
                type: 'string',
                label: '–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–ª–µ–π',
                placeholder: '192.168.1.0/24',
                required: true,
                validation: /^(\d{1,3}\.){3}\d{1,3}(\/\d{1,2})?$/
            },
            scan_type: {
                type: 'select',
                label: '–¢–∏–ø —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
                options: [
                    { value: 'ping', label: 'Ping Sweep (-sn)' },
                    { value: 'tcp_syn', label: 'TCP SYN (-sS)' },
                    { value: 'tcp_connect', label: 'TCP Connect (-sT)' },
                    { value: 'udp', label: 'UDP Scan (-sU)' }
                ],
                default: 'ping'
            },
            timing: {
                type: 'select',
                label: '–°–∫–æ—Ä–æ—Å—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
                options: [
                    { value: 'T0', label: 'Paranoid (T0)' },
                    { value: 'T1', label: 'Sneaky (T1)' },
                    { value: 'T2', label: 'Polite (T2)' },
                    { value: 'T3', label: 'Normal (T3)' },
                    { value: 'T4', label: 'Aggressive (T4)' }
                ],
                default: 'T3'
            },
            exclude_hosts: {
                type: 'string',
                label: '–ò—Å–∫–ª—é—á–∏—Ç—å —Ö–æ—Å—Ç—ã',
                placeholder: '192.168.1.1,192.168.1.254',
                required: false
            }
        },
        outputs: ['alive_hosts', 'network_topology', 'response_times'],
        requirements: ['network_access'],
        tags: ['nmap', 'discovery', 'scanning']
    },

    'port-scan': {
        id: 'port-scan',
        name: 'Port Scanning',
        category: 'discovery',
        icon: 'üö™',
        description: '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤',
        difficulty: 'easy',
        estimated_time: '2-10 –º–∏–Ω—É—Ç',
        parameters: {
            targets: {
                type: 'string',
                label: '–¶–µ–ª–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
                placeholder: '192.168.1.1-254',
                required: true
            },
            port_range: {
                type: 'string',
                label: '–î–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ç–æ–≤',
                placeholder: '1-1000, 22,80,443,8080',
                default: '1-1000',
                required: true
            },
            scan_technique: {
                type: 'select',
                label: '–¢–µ—Ö–Ω–∏–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
                options: [
                    { value: 'syn', label: 'SYN Stealth' },
                    { value: 'connect', label: 'TCP Connect' },
                    { value: 'fin', label: 'FIN Scan' },
                    { value: 'null', label: 'NULL Scan' },
                    { value: 'xmas', label: 'XMAS Scan' }
                ],
                default: 'syn'
            },
            rate_limit: {
                type: 'number',
                label: '–°–∫–æ—Ä–æ—Å—Ç—å (–ø–∞–∫–µ—Ç–æ–≤/—Å–µ–∫)',
                min: 1,
                max: 10000,
                default: 1000
            }
        },
        outputs: ['open_ports', 'service_banners', 'os_fingerprint'],
        requirements: ['network_access'],
        tags: ['ports', 'services', 'scanning']
    },

    // ========== –ü–ï–†–ï–ß–ò–°–õ–ï–ù–ò–ï (ENUMERATION) ==========
    'ssh-enum': {
        id: 'ssh-enum',
        name: 'SSH Service Enumeration',
        category: 'enum',
        icon: 'üîê',
        description: '–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ SSH —Å–µ—Ä–≤–∏—Å–∞ –∏ —Å–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
        difficulty: 'medium',
        estimated_time: '1-3 –º–∏–Ω—É—Ç—ã',
        parameters: {
            target_host: {
                type: 'string',
                label: '–¶–µ–ª–µ–≤–æ–π —Ö–æ—Å—Ç',
                placeholder: '192.168.1.100',
                required: true,
                validation: /^(\d{1,3}\.){3}\d{1,3}$/
            },
            port: {
                type: 'number',
                label: '–ü–æ—Ä—Ç SSH',
                min: 1,
                max: 65535,
                default: 22
            },
            timeout: {
                type: 'number',
                label: 'Timeout (—Å–µ–∫)',
                min: 1,
                max: 60,
                default: 5
            },
            check_algorithms: {
                type: 'checkbox',
                label: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è',
                default: true
            },
            banner_grab: {
                type: 'checkbox',
                label: '–ó–∞—Ö–≤–∞—Ç –±–∞–Ω–Ω–µ—Ä–∞',
                default: true
            }
        },
        outputs: ['ssh_version', 'supported_algorithms', 'banner_info', 'auth_methods'],
        requirements: ['network_access'],
        tags: ['ssh', 'enumeration', 'banner']
    },

    'web-enum': {
        id: 'web-enum',
        name: 'Web Application Enumeration',
        category: 'enum',
        icon: 'üåê',
        description: '–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π',
        difficulty: 'medium',
        estimated_time: '3-10 –º–∏–Ω—É—Ç',
        parameters: {
            target_url: {
                type: 'string',
                label: 'URL —Ü–µ–ª–∏',
                placeholder: 'http://192.168.1.100',
                required: true,
                validation: /^https?:\/\/.+/
            },
            check_directories: {
                type: 'checkbox',
                label: '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π',
                default: true
            },
            wordlist: {
                type: 'select',
                label: '–°–ª–æ–≤–∞—Ä—å –¥–ª—è –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞',
                options: [
                    { value: 'small', label: '–ú–∞–ª—ã–π (100 –∑–∞–ø–∏—Å–µ–π)' },
                    { value: 'medium', label: '–°—Ä–µ–¥–Ω–∏–π (1000 –∑–∞–ø–∏—Å–µ–π)' },
                    { value: 'large', label: '–ë–æ–ª—å—à–æ–π (10000 –∑–∞–ø–∏—Å–µ–π)' }
                ],
                default: 'medium'
            },
            check_technologies: {
                type: 'checkbox',
                label: '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π',
                default: true
            },
            follow_redirects: {
                type: 'checkbox',
                label: '–°–ª–µ–¥–æ–≤–∞—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞–º',
                default: true
            }
        },
        outputs: ['technologies', 'directories', 'files', 'headers', 'cookies'],
        requirements: ['network_access', 'http_client'],
        tags: ['web', 'http', 'enumeration']
    },

    // ========== BRUTEFORCE ==========
    'ssh-bruteforce': {
        id: 'ssh-bruteforce',
        name: 'SSH Bruteforce Attack',
        category: 'brute',
        icon: 'üî®',
        description: '–ê—Ç–∞–∫–∞ –º–µ—Ç–æ–¥–æ–º –ø–µ—Ä–µ–±–æ—Ä–∞ SSH —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
        difficulty: 'medium',
        estimated_time: '5-30 –º–∏–Ω—É—Ç',
        risk_level: 'medium',
        parameters: {
            target_host: {
                type: 'string',
                label: '–¶–µ–ª–µ–≤–æ–π —Ö–æ—Å—Ç',
                placeholder: '192.168.1.100',
                required: true
            },
            port: {
                type: 'number',
                label: '–ü–æ—Ä—Ç SSH',
                default: 22,
                min: 1,
                max: 65535
            },
            username_list: {
                type: 'select',
                label: '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
                options: [
                    { value: 'common', label: '–û–±—â–∏–π —Å–ø–∏—Å–æ–∫' },
                    { value: 'custom', label: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π' },
                    { value: 'single', label: '–û–¥–∏–Ω–æ—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' }
                ],
                default: 'common'
            },
            username_custom: {
                type: 'textarea',
                label: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ø–æ —Å—Ç—Ä–æ–∫–µ)',
                placeholder: 'admin\nroot\nuser',
                depends_on: { username_list: 'custom' }
            },
            single_username: {
                type: 'string',
                label: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                placeholder: 'admin',
                depends_on: { username_list: 'single' }
            },
            password_list: {
                type: 'select',
                label: '–°–ø–∏—Å–æ–∫ –ø–∞—Ä–æ–ª–µ–π',
                options: [
                    { value: 'top100', label: '–¢–æ–ø 100 –ø–∞—Ä–æ–ª–µ–π' },
                    { value: 'top1000', label: '–¢–æ–ø 1000 –ø–∞—Ä–æ–ª–µ–π' },
                    { value: 'custom', label: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π' }
                ],
                default: 'top100'
            },
            password_custom: {
                type: 'textarea',
                label: '–ü–∞—Ä–æ–ª–∏ (–ø–æ —Å—Ç—Ä–æ–∫–µ)',
                placeholder: 'password\n123456\nadmin',
                depends_on: { password_list: 'custom' }
            },
            max_attempts: {
                type: 'number',
                label: '–ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫',
                min: 1,
                max: 10000,
                default: 100
            },
            delay: {
                type: 'number',
                label: '–ó–∞–¥–µ—Ä–∂–∫–∞ (–º—Å)',
                min: 0,
                max: 5000,
                default: 100
            },
            stop_on_success: {
                type: 'checkbox',
                label: '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ø—Ä–∏ —É—Å–ø–µ—Ö–µ',
                default: true
            }
        },
        outputs: ['valid_credentials', 'failed_attempts', 'service_response'],
        requirements: ['network_access', 'legal_authorization'],
        warnings: ['–ú–æ–∂–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã', '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–Ω–æ–≥–æ –ª–æ–≥–æ–≤'],
        tags: ['ssh', 'bruteforce', 'credentials']
    },

    'ftp-bruteforce': {
        id: 'ftp-bruteforce',
        name: 'FTP Bruteforce Attack',
        category: 'brute',
        icon: 'üìÅ',
        description: '–ê—Ç–∞–∫–∞ –Ω–∞ FTP —Å–µ—Ä–≤–µ—Ä –º–µ—Ç–æ–¥–æ–º –ø–µ—Ä–µ–±–æ—Ä–∞',
        difficulty: 'easy',
        estimated_time: '3-20 –º–∏–Ω—É—Ç',
        risk_level: 'medium',
        parameters: {
            target_host: {
                type: 'string',
                label: '–¶–µ–ª–µ–≤–æ–π —Ö–æ—Å—Ç',
                required: true
            },
            port: {
                type: 'number',
                label: '–ü–æ—Ä—Ç FTP',
                default: 21
            },
            username_list: {
                type: 'select',
                label: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
                options: [
                    { value: 'common', label: '–û–±—â–∏–π —Å–ø–∏—Å–æ–∫' },
                    { value: 'single', label: '–û–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' }
                ],
                default: 'common'
            },
            single_username: {
                type: 'string',
                label: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                placeholder: 'ftp',
                depends_on: { username_list: 'single' }
            },
            check_anonymous: {
                type: 'checkbox',
                label: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å anonymous –¥–æ—Å—Ç—É–ø',
                default: true
            },
            password_list: {
                type: 'select',
                label: '–°–ª–æ–≤–∞—Ä—å –ø–∞—Ä–æ–ª–µ–π',
                options: [
                    { value: 'common', label: '–û–±—â–∏–µ –ø–∞—Ä–æ–ª–∏' },
                    { value: 'empty', label: '–ü—É—Å—Ç—ã–µ –ø–∞—Ä–æ–ª–∏' }
                ],
                default: 'common'
            },
            max_threads: {
                type: 'number',
                label: '–ü–æ—Ç–æ–∫–æ–≤',
                min: 1,
                max: 50,
                default: 5
            }
        },
        outputs: ['ftp_credentials', 'anonymous_access', 'directory_listing'],
        requirements: ['network_access'],
        tags: ['ftp', 'bruteforce', 'anonymous']
    },

    // ========== –≠–ö–°–ü–õ–£–ê–¢–ê–¶–ò–Ø (EXPLOITATION) ==========
    'default-credentials': {
        id: 'default-credentials',
        name: 'Default Credentials Check',
        category: 'exploit',
        icon: 'üîë',
        description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
        difficulty: 'easy',
        estimated_time: '1-5 –º–∏–Ω—É—Ç',
        risk_level: 'low',
        parameters: {
            target_host: {
                type: 'string',
                label: '–¶–µ–ª–µ–≤–æ–π —Ö–æ—Å—Ç',
                required: true
            },
            services: {
                type: 'multiselect',
                label: '–°–µ—Ä–≤–∏—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏',
                options: [
                    { value: 'ssh', label: 'SSH (22)' },
                    { value: 'telnet', label: 'Telnet (23)' },
                    { value: 'ftp', label: 'FTP (21)' },
                    { value: 'http', label: 'HTTP (80)' },
                    { value: 'snmp', label: 'SNMP (161)' }
                ],
                default: ['ssh', 'http']
            },
            device_types: {
                type: 'multiselect',
                label: '–¢–∏–ø—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤',
                options: [
                    { value: 'router', label: '–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä—ã' },
                    { value: 'switch', label: '–ö–æ–º–º—É—Ç–∞—Ç–æ—Ä—ã' },
                    { value: 'camera', label: 'IP –∫–∞–º–µ—Ä—ã' },
                    { value: 'printer', label: '–ü—Ä–∏–Ω—Ç–µ—Ä—ã' },
                    { value: 'iot', label: 'IoT —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞' }
                ],
                default: ['router', 'camera']
            },
            vendors: {
                type: 'multiselect',
                label: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏',
                options: [
                    { value: 'cisco', label: 'Cisco' },
                    { value: 'dlink', label: 'D-Link' },
                    { value: 'tplink', label: 'TP-Link' },
                    { value: 'hikvision', label: 'Hikvision' },
                    { value: 'dahua', label: 'Dahua' }
                ],
                default: ['cisco', 'dlink']
            },
            quick_check: {
                type: 'checkbox',
                label: '–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (—Ç–æ–ø 10)',
                default: false
            }
        },
        outputs: ['default_creds', 'vulnerable_services', 'device_fingerprint'],
        requirements: ['network_access'],
        tags: ['default', 'credentials', 'iot']
    },

    'iot-exploit': {
        id: 'iot-exploit',
        name: 'IoT Device Exploitation',
        category: 'exploit',
        icon: 'üì±',
        description: '–≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π IoT —É—Å—Ç—Ä–æ–π—Å—Ç–≤',
        difficulty: 'hard',
        estimated_time: '5-15 –º–∏–Ω—É—Ç',
        risk_level: 'high',
        parameters: {
            target_host: {
                type: 'string',
                label: '–¶–µ–ª–µ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
                required: true
            },
            device_type: {
                type: 'select',
                label: '–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞',
                options: [
                    { value: 'camera', label: 'IP –ö–∞–º–µ—Ä–∞' },
                    { value: 'router', label: '–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä' },
                    { value: 'smart_tv', label: 'Smart TV' },
                    { value: 'printer', label: '–ü—Ä–∏–Ω—Ç–µ—Ä' },
                    { value: 'unknown', label: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' }
                ],
                default: 'camera'
            },
            exploit_methods: {
                type: 'multiselect',
                label: '–ú–µ—Ç–æ–¥—ã —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏',
                options: [
                    { value: 'cve_check', label: '–ü—Ä–æ–≤–µ—Ä–∫–∞ CVE' },
                    { value: 'default_creds', label: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–æ–ª–∏' },
                    { value: 'firmware_bugs', label: '–ë–∞–≥–∏ –ø—Ä–æ—à–∏–≤–∫–∏' },
                    { value: 'web_vulns', label: '–í–µ–± —É—è–∑–≤–∏–º–æ—Å—Ç–∏' }
                ],
                default: ['cve_check', 'default_creds']
            },
            payload_type: {
                type: 'select',
                label: '–¢–∏–ø –Ω–∞–≥—Ä—É–∑–∫–∏',
                options: [
                    { value: 'info', label: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è' },
                    { value: 'shell', label: 'Reverse Shell' },
                    { value: 'download', label: '–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤' }
                ],
                default: 'info'
            },
            safe_mode: {
                type: 'checkbox',
                label: '–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º',
                default: true,
                description: '–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞, –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏'
            }
        },
        outputs: ['exploit_success', 'device_info', 'shell_access', 'files'],
        requirements: ['network_access', 'legal_authorization'],
        warnings: ['–ú–æ–∂–µ—Ç –ø–æ–≤—Ä–µ–¥–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', '–¢—Ä–µ–±—É–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è'],
        tags: ['iot', 'exploit', 'cve']
    },

    // ========== WEB –ê–¢–ê–ö–ò ==========
    'web-sqli': {
        id: 'web-sqli',
        name: 'SQL Injection Testing',
        category: 'web',
        icon: 'üíâ',
        description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ SQL –∏–Ω—ä–µ–∫—Ü–∏–∏',
        difficulty: 'hard',
        estimated_time: '10-30 –º–∏–Ω—É—Ç',
        risk_level: 'high',
        parameters: {
            target_url: {
                type: 'string',
                label: 'URL —Ü–µ–ª–∏',
                placeholder: 'http://target.com/login.php',
                required: true
            },
            test_parameters: {
                type: 'multiselect',
                label: '–¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã',
                options: [
                    { value: 'get', label: 'GET –ø–∞—Ä–∞–º–µ—Ç—Ä—ã' },
                    { value: 'post', label: 'POST –¥–∞–Ω–Ω—ã–µ' },
                    { value: 'cookies', label: 'Cookies' },
                    { value: 'headers', label: 'HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏' }
                ],
                default: ['get', 'post']
            },
            injection_types: {
                type: 'multiselect',
                label: '–¢–∏–ø—ã –∏–Ω—ä–µ–∫—Ü–∏–π',
                options: [
                    { value: 'boolean', label: 'Boolean-based' },
                    { value: 'union', label: 'UNION-based' },
                    { value: 'time', label: 'Time-based' },
                    { value: 'error', label: 'Error-based' }
                ],
                default: ['boolean', 'union']
            },
            dbms_detect: {
                type: 'checkbox',
                label: '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –°–£–ë–î',
                default: true
            },
            risk_level: {
                type: 'select',
                label: '–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞',
                options: [
                    { value: 1, label: '–ù–∏–∑–∫–∏–π (—Ç–æ–ª—å–∫–æ GET)' },
                    { value: 2, label: '–°—Ä–µ–¥–Ω–∏–π (GET+POST)' },
                    { value: 3, label: '–í—ã—Å–æ–∫–∏–π (–≤—Å–µ –º–µ—Ç–æ–¥—ã)' }
                ],
                default: 1
            },
            custom_payloads: {
                type: 'textarea',
                label: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ payloads',
                placeholder: "' OR 1=1--\n' UNION SELECT null--"
            }
        },
        outputs: ['sqli_vulns', 'dbms_info', 'payloads_success', 'extracted_data'],
        requirements: ['network_access', 'legal_authorization'],
        warnings: ['–ú–æ–∂–µ—Ç –ø–æ–≤—Ä–µ–¥–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö', '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤'],
        tags: ['web', 'sqli', 'database']
    },

    'web-xss': {
        id: 'web-xss',
        name: 'XSS Vulnerability Testing',
        category: 'web',
        icon: 'üé≠',
        description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Cross-Site Scripting',
        difficulty: 'medium',
        estimated_time: '5-15 –º–∏–Ω—É—Ç',
        risk_level: 'medium',
        parameters: {
            target_url: {
                type: 'string',
                label: 'URL —Ü–µ–ª–∏',
                required: true
            },
            xss_types: {
                type: 'multiselect',
                label: '–¢–∏–ø—ã XSS',
                options: [
                    { value: 'reflected', label: 'Reflected XSS' },
                    { value: 'stored', label: 'Stored XSS' },
                    { value: 'dom', label: 'DOM-based XSS' }
                ],
                default: ['reflected', 'stored']
            },
            test_vectors: {
                type: 'select',
                label: '–ù–∞–±–æ—Ä –≤–µ–∫—Ç–æ—Ä–æ–≤',
                options: [
                    { value: 'basic', label: '–ë–∞–∑–æ–≤—ã–µ (50 –≤–µ–∫—Ç–æ—Ä–æ–≤)' },
                    { value: 'advanced', label: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ (200 –≤–µ–∫—Ç–æ—Ä–æ–≤)' },
                    { value: 'custom', label: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ' }
                ],
                default: 'basic'
            },
            custom_vectors: {
                type: 'textarea',
                label: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –≤–µ–∫—Ç–æ—Ä—ã',
                placeholder: '<script>alert("XSS")</script>',
                depends_on: { test_vectors: 'custom' }
            },
            form_testing: {
                type: 'checkbox',
                label: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º',
                default: true
            },
            url_params: {
                type: 'checkbox',
                label: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤',
                default: true
            }
        },
        outputs: ['xss_vulns', 'vulnerable_params', 'successful_payloads'],
        requirements: ['network_access'],
        tags: ['web', 'xss', 'javascript']
    },

    // ========== POST-EXPLOITATION ==========
    'privilege-escalation': {
        id: 'privilege-escalation',
        name: 'Privilege Escalation Check',
        category: 'post',
        icon: '‚¨ÜÔ∏è',
        description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π',
        difficulty: 'hard',
        estimated_time: '10-20 –º–∏–Ω—É—Ç',
        risk_level: 'high',
        parameters: {
            target_system: {
                type: 'select',
                label: '–¶–µ–ª–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞',
                options: [
                    { value: 'linux', label: 'Linux' },
                    { value: 'windows', label: 'Windows' },
                    { value: 'auto', label: '–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ' }
                ],
                default: 'auto'
            },
            check_methods: {
                type: 'multiselect',
                label: '–ú–µ—Ç–æ–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏',
                options: [
                    { value: 'sudo', label: 'Sudo –ø—Ä–∞–≤–∞' },
                    { value: 'suid', label: 'SUID —Ñ–∞–π–ª—ã' },
                    { value: 'cron', label: 'Cron –∑–∞–¥–∞—á–∏' },
                    { value: 'services', label: '–£—è–∑–≤–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã' },
                    { value: 'kernel', label: 'Kernel exploits' }
                ],
                default: ['sudo', 'suid', 'services']
            },
            deep_scan: {
                type: 'checkbox',
                label: '–ì–ª—É–±–æ–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
                default: false
            },
            exploit_suggestion: {
                type: 'checkbox',
                label: '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —ç–∫—Å–ø–ª–æ–π—Ç—ã',
                default: true
            }
        },
        outputs: ['escalation_paths', 'vulnerable_files', 'suggested_exploits'],
        requirements: ['system_access', 'legal_authorization'],
        warnings: ['–¢—Ä–µ–±—É–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ'],
        tags: ['privilege', 'escalation', 'post-exploit']
    },

    'data-collection': {
        id: 'data-collection',
        name: 'System Information Gathering',
        category: 'post',
        icon: 'üìä',
        description: '–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ',
        difficulty: 'medium',
        estimated_time: '3-10 –º–∏–Ω—É—Ç',
        risk_level: 'low',
        parameters: {
            collection_scope: {
                type: 'multiselect',
                label: '–û–±–ª–∞—Å—Ç—å —Å–±–æ—Ä–∞',
                options: [
                    { value: 'system', label: '–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' },
                    { value: 'network', label: '–°–µ—Ç–µ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è' },
                    { value: 'users', label: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –≥—Ä—É–ø–ø—ã' },
                    { value: 'processes', label: '–ü—Ä–æ—Ü–µ—Å—Å—ã' },
                    { value: 'files', label: '–§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞' }
                ],
                default: ['system', 'network', 'users']
            },
            sensitive_data: {
                type: 'checkbox',
                label: '–ü–æ–∏—Å–∫ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
                default: false
            },
            output_format: {
                type: 'select',
                label: '–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞',
                options: [
                    { value: 'json', label: 'JSON' },
                    { value: 'txt', label: '–¢–µ–∫—Å—Ç' },
                    { value: 'xml', label: 'XML' }
                ],
                default: 'json'
            }
        },
        outputs: ['system_info', 'network_config', 'user_accounts', 'installed_software'],
        requirements: ['system_access'],
        tags: ['information', 'gathering', 'enumeration']
    }
};

// =======================================================
// –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° ATTACK CONSTRUCTOR CORE
// =======================================================

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –º–æ–¥—É–ª–µ–π –∞—Ç–∞–∫
 */
class AttackConstructorCore {
    constructor() {
        this.version = '2.0.0-Pentest-Core';
        this.buildDate = new Date().toISOString();
        this.isInitialized = false;

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
        this.currentScenario = {
            id: null,
            name: '–ù–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∞—Ç–∞–∫–∏',
            description: '',
            category: 'network',
            risk_level: 'medium',
            created: new Date().toISOString(),
            modules: [],
            connections: [],
            targets: {
                range: '',
                exclusions: [],
                credentials: {}
            },
            settings: {
                concurrency: 5,
                timeout: 30,
                safe_mode: true,
                auto_stop: true
            }
        };

        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏ –∞—Ç–∞–∫
        this.attackModules = new Map();
        this.loadedModules = new Map();
        this.moduleCategories = new Map();

        // Canvas –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        this.canvasNodes = new Map();
        this.connections = new Map();
        this.selectedNode = null;

        // –°—á–µ—Ç—á–∏–∫–∏
        this.nextNodeId = 1;
        this.nextConnectionId = 1;

        // UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.currentTab = 'target';
        this.isExecuting = false;
        this.executionResults = new Map();

        // –°–æ–±—ã—Ç–∏—è
        this.eventHandlers = new Map();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        this.settings = {
            canvas: {
                gridSize: 20,
                snapToGrid: true,
                autoLayout: false
            },
            execution: {
                maxConcurrency: 10,
                defaultTimeout: 30000,
                retryAttempts: 3
            },
            security: {
                requireConfirmation: true,
                logAllActions: true,
                safeMode: true
            }
        };

        console.log(`üéØ Attack Constructor Core v${this.version} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`);
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Core –º–æ–¥—É–ª—è
     */
    async initialize() {
        if (this.isInitialized) {
            console.log('‚ö†Ô∏è Core —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
        }

        try {
            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Attack Constructor Core...');

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –º–æ–¥—É–ª–µ–π –∞—Ç–∞–∫
            this.loadAttackModulesLibrary();

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            this.buildCategoryStructure();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—ã
            this.initializeEventSystem();
            this.initializeValidation();
            this.setupSecurityPolicies();

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.restoreState();

            this.isInitialized = true;
            console.log('‚úÖ Attack Constructor Core –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

            this.emit('initialized', { version: this.version });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Core:', error);
            throw error;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –º–æ–¥—É–ª–µ–π –∞—Ç–∞–∫
     */
    loadAttackModulesLibrary() {
        console.log('üìö –ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –º–æ–¥—É–ª–µ–π –∞—Ç–∞–∫...');

        Object.entries(ATTACK_MODULES_LIBRARY).forEach(([moduleId, module]) => {
            // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            const enhancedModule = {
                ...module,
                instances: 0,
                lastUsed: null,
                enabled: true,
                loaded: new Date().toISOString()
            };

            this.attackModules.set(moduleId, enhancedModule);
        });

        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.attackModules.size} –º–æ–¥—É–ª–µ–π –∞—Ç–∞–∫`);
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    buildCategoryStructure() {
        const categories = {
            'discovery': {
                name: '–†–∞–∑–≤–µ–¥–∫–∞',
                icon: 'üîç',
                description: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤ –∏ —Å–µ—Ä–≤–∏—Å–æ–≤',
                color: '#2196F3',
                order: 1
            },
            'enum': {
                name: '–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ',
                icon: 'üìã',
                description: '–î–µ—Ç–∞–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤',
                color: '#4CAF50',
                order: 2
            },
            'brute': {
                name: 'Bruteforce',
                icon: 'üî®',
                description: '–ê—Ç–∞–∫–∏ –º–µ—Ç–æ–¥–æ–º –ø–µ—Ä–µ–±–æ—Ä–∞',
                color: '#FF9800',
                order: 3
            },
            'exploit': {
                name: '–≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è',
                icon: 'üí•',
                description: '–≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π',
                color: '#F44336',
                order: 4
            },
            'web': {
                name: '–í–µ–±-–∞—Ç–∞–∫–∏',
                icon: 'üåê',
                description: '–ê—Ç–∞–∫–∏ –Ω–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
                color: '#9C27B0',
                order: 5
            },
            'post': {
                name: 'Post-Exploitation',
                icon: '‚ö°',
                description: '–î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∫–æ–º–ø—Ä–æ–º–µ—Ç–∞—Ü–∏–∏',
                color: '#607D8B',
                order: 6
            }
        };

        Object.entries(categories).forEach(([categoryId, category]) => {
            this.moduleCategories.set(categoryId, {
                ...category,
                modules: [],
                count: 0
            });
        });

        // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥—É–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        this.attackModules.forEach((module, moduleId) => {
            const category = this.moduleCategories.get(module.category);
            if (category) {
                category.modules.push(moduleId);
                category.count++;
            }
        });

        console.log(`üìÇ –°–æ–∑–¥–∞–Ω–æ ${this.moduleCategories.size} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–æ–¥—É–ª–µ–π`);
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å–æ–±—ã—Ç–∏–π
     */
    initializeEventSystem() {
        this.on = (event, handler) => {
            if (!this.eventHandlers.has(event)) {
                this.eventHandlers.set(event, []);
            }
            this.eventHandlers.get(event).push(handler);
        };

        this.emit = (event, data) => {
            if (this.eventHandlers.has(event)) {
                this.eventHandlers.get(event).forEach(handler => {
                    try {
                        handler(data);
                    } catch (error) {
                        console.error(`–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è ${event}:`, error);
                    }
                });
            }
        };

        console.log('üì° –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    initializeValidation() {
        this.validationRules = {
            scenario: {
                name: {
                    required: true,
                    minLength: 3,
                    maxLength: 100
                },
                modules: {
                    minCount: 1,
                    maxCount: 50
                }
            },
            module: {
                parameters: {
                    required: true,
                    validateType: true
                }
            },
            target: {
                range: {
                    required: true,
                    format: 'ip_range'
                }
            }
        };

        console.log('‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–∏—Ç–∏–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
     */
    setupSecurityPolicies() {
        this.securityPolicies = {
            requireConfirmation: ['exploit', 'brute', 'post'],
            safeModeBlocked: ['privilege-escalation', 'data-exfiltration'],
            logRequired: ['all'],
            authRequired: ['exploit', 'post']
        };

        console.log('üîí –ü–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    // =======================================================
    // –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–û–î–£–õ–Ø–ú–ò –ê–¢–ê–ö
    // =======================================================

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥—É–ª—è –∞—Ç–∞–∫–∏
     */
    getAttackModule(moduleId) {
        return this.attackModules.get(moduleId);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    getModulesByCategory(category) {
        return Array.from(this.attackModules.values())
            .filter(module => module.category === category);
    }

    /**
     * –ü–æ–∏—Å–∫ –º–æ–¥—É–ª–µ–π
     */
    searchModules(query, filters = {}) {
        let results = Array.from(this.attackModules.values());

        // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
        if (query) {
            const searchTerm = query.toLowerCase();
            results = results.filter(module =>
                module.name.toLowerCase().includes(searchTerm) ||
                module.description.toLowerCase().includes(searchTerm) ||
                module.tags.some(tag => tag.toLowerCase().includes(searchTerm))
            );
        }

        // –§–∏–ª—å—Ç—Ä—ã
        if (filters.category) {
            results = results.filter(module => module.category === filters.category);
        }

        if (filters.difficulty) {
            results = results.filter(module => module.difficulty === filters.difficulty);
        }

        if (filters.risk_level) {
            results = results.filter(module => module.risk_level === filters.risk_level);
        }

        return results;
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è –Ω–∞ canvas
     */
    addModuleToCanvas(moduleId, x, y, parameters = {}) {
        const module = this.getAttackModule(moduleId);
        if (!module) {
            throw new Error(`–ú–æ–¥—É–ª—å ${moduleId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }

        const nodeId = `node-${this.nextNodeId++}`;
        const node = {
            id: nodeId,
            moduleId,
            module,
            x: Math.round(x / this.settings.canvas.gridSize) * this.settings.canvas.gridSize,
            y: Math.round(y / this.settings.canvas.gridSize) * this.settings.canvas.gridSize,
            parameters: { ...this.getDefaultParameters(module), ...parameters },
            status: 'ready',
            results: null,
            created: new Date().toISOString()
        };

        this.canvasNodes.set(nodeId, node);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ü–µ–Ω–∞—Ä–∏–π
        this.currentScenario.modules.push({
            nodeId,
            moduleId,
            parameters: node.parameters,
            position: { x: node.x, y: node.y }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥—É–ª—è
        module.instances++;
        module.lastUsed = new Date().toISOString();

        this.emit('moduleAdded', { nodeId, module, node });
        this.saveState();

        console.log(`üì¶ –ú–æ–¥—É–ª—å ${moduleId} –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ canvas: ${nodeId}`);
        return node;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –º–æ–¥—É–ª—è
     */
    getDefaultParameters(module) {
        const defaultParams = {};

        Object.entries(module.parameters || {}).forEach(([key, param]) => {
            if (param.default !== undefined) {
                defaultParams[key] = param.default;
            } else if (param.type === 'checkbox') {
                defaultParams[key] = false;
            } else if (param.type === 'multiselect') {
                defaultParams[key] = [];
            } else {
                defaultParams[key] = '';
            }
        });

        return defaultParams;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥—É–ª—è
     */
    updateModuleParameters(nodeId, parameters) {
        const node = this.canvasNodes.get(nodeId);
        if (!node) {
            throw new Error(`–£–∑–µ–ª ${nodeId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        const validation = this.validateModuleParameters(node.module, parameters);
        if (!validation.isValid) {
            throw new Error(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${validation.errors.join(', ')}`);
        }

        node.parameters = { ...node.parameters, ...parameters };
        node.status = 'configured';

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        const scenarioModule = this.currentScenario.modules.find(m => m.nodeId === nodeId);
        if (scenarioModule) {
            scenarioModule.parameters = node.parameters;
        }

        this.emit('moduleUpdated', { nodeId, parameters, node });
        this.saveState();

        return node;
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥—É–ª—è
     */
    validateModuleParameters(module, parameters) {
        const validation = {
            isValid: true,
            errors: [],
            warnings: []
        };

        Object.entries(module.parameters || {}).forEach(([key, param]) => {
            const value = parameters[key];

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if (param.required && (value === undefined || value === null || value === '')) {
                validation.errors.push(`–ü–∞—Ä–∞–º–µ—Ç—Ä "${param.label || key}" –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω`);
                validation.isValid = false;
            }

            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏
            if (value && param.validation && typeof param.validation === 'object' && param.validation.test) {
                if (!param.validation.test(value)) {
                    validation.errors.push(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ "${param.label || key}"`);
                    validation.isValid = false;
                }
            }

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
            if (param.type === 'number' && value !== undefined && value !== '') {
                const numValue = Number(value);
                if (isNaN(numValue)) {
                    validation.errors.push(`–ü–∞—Ä–∞–º–µ—Ç—Ä "${param.label || key}" –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º`);
                    validation.isValid = false;
                } else {
                    if (param.min !== undefined && numValue < param.min) {
                        validation.errors.push(`–ü–∞—Ä–∞–º–µ—Ç—Ä "${param.label || key}" –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è ${param.min}`);
                        validation.isValid = false;
                    }
                    if (param.max !== undefined && numValue > param.max) {
                        validation.errors.push(`–ü–∞—Ä–∞–º–µ—Ç—Ä "${param.label || key}" –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è ${param.max}`);
                        validation.isValid = false;
                    }
                }
            }
        });

        return validation;
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è —Å canvas
     */
    removeModuleFromCanvas(nodeId) {
        const node = this.canvasNodes.get(nodeId);
        if (!node) {
            return false;
        }

        // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        const connectionsToRemove = Array.from(this.connections.values())
            .filter(conn => conn.from.nodeId === nodeId || conn.to.nodeId === nodeId);

        connectionsToRemove.forEach(conn => {
            this.removeConnection(conn.id);
        });

        // –£–¥–∞–ª—è–µ–º —É–∑–µ–ª
        this.canvasNodes.delete(nodeId);

        // –£–¥–∞–ª—è–µ–º –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è
        this.currentScenario.modules = this.currentScenario.modules
            .filter(m => m.nodeId !== nodeId);

        this.emit('moduleRemoved', { nodeId, node });
        this.saveState();

        console.log(`üóëÔ∏è –ú–æ–¥—É–ª—å —É–¥–∞–ª–µ–Ω: ${nodeId}`);
        return true;
    }

    // =======================================================
    // –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–ï–î–ò–ù–ï–ù–ò–Ø–ú–ò
    // =======================================================

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏
     */
    createConnection(fromNodeId, toNodeId, type = 'sequence') {
        const fromNode = this.canvasNodes.get(fromNodeId);
        const toNode = this.canvasNodes.get(toNodeId);

        if (!fromNode || !toNode) {
            throw new Error('–û–¥–∏–Ω –∏–∑ —É–∑–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏–∫–ª—ã
        if (this.wouldCreateCycle(fromNodeId, toNodeId)) {
            throw new Error('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Å—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å');
        }

        const connectionId = `conn-${this.nextConnectionId++}`;
        const connection = {
            id: connectionId,
            from: { nodeId: fromNodeId },
            to: { nodeId: toNodeId },
            type, // 'sequence', 'parallel', 'conditional'
            condition: null,
            created: new Date().toISOString()
        };

        this.connections.set(connectionId, connection);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ü–µ–Ω–∞—Ä–∏–π
        this.currentScenario.connections.push({
            id: connectionId,
            from: fromNodeId,
            to: toNodeId,
            type
        });

        this.emit('connectionCreated', { connectionId, connection });
        this.saveState();

        console.log(`üîó –°–æ–∑–¥–∞–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: ${fromNodeId} -> ${toNodeId}`);
        return connection;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
     */
    wouldCreateCycle(fromNodeId, toNodeId) {
        const visited = new Set();

        const hasPath = (startNode, targetNode) => {
            if (startNode === targetNode) return true;
            if (visited.has(startNode)) return false;

            visited.add(startNode);

            for (const connection of this.connections.values()) {
                if (connection.from.nodeId === startNode) {
                    if (hasPath(connection.to.nodeId, targetNode)) {
                        return true;
                    }
                }
            }

            return false;
        };

        return hasPath(toNodeId, fromNodeId);
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    removeConnection(connectionId) {
        const connection = this.connections.get(connectionId);
        if (!connection) {
            return false;
        }

        this.connections.delete(connectionId);

        // –£–¥–∞–ª—è–µ–º –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è
        this.currentScenario.connections = this.currentScenario.connections
            .filter(c => c.id !== connectionId);

        this.emit('connectionRemoved', { connectionId, connection });
        this.saveState();

        return true;
    }

    // =======================================================
    // –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–¶–ï–ù–ê–†–ò–Ø–ú–ò
    // =======================================================

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
     */
    createNewScenario(name = '–ù–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∞—Ç–∞–∫–∏') {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        this.saveState();

        // –û—á–∏—â–∞–µ–º canvas
        this.clearCanvas();

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        this.currentScenario = {
            id: `scenario-${Date.now()}`,
            name,
            description: '',
            category: 'network',
            risk_level: 'medium',
            created: new Date().toISOString(),
            modules: [],
            connections: [],
            targets: {
                range: '',
                exclusions: [],
                credentials: {}
            },
            settings: {
                concurrency: 5,
                timeout: 30,
                safe_mode: true,
                auto_stop: true
            }
        };

        this.emit('scenarioCreated', { scenario: this.currentScenario });
        console.log(`üìã –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: ${name}`);
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
     */
    validateScenario() {
        const validation = {
            isValid: true,
            errors: [],
            warnings: []
        };

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø–æ–ª–µ–π
        if (!this.currentScenario.name || this.currentScenario.name.trim().length < 3) {
            validation.errors.push('–ò–º—è —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞');
            validation.isValid = false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π
        if (this.canvasNodes.size === 0) {
            validation.errors.push('–°—Ü–µ–Ω–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–æ–¥—É–ª—å');
            validation.isValid = false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–π
        if (!this.currentScenario.targets.range) {
            validation.errors.push('–ù–µ —É–∫–∞–∑–∞–Ω –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–ª–µ–π');
            validation.isValid = false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥—É–ª–µ–π
        for (const [nodeId, node] of this.canvasNodes) {
            const moduleValidation = this.validateModuleParameters(node.module, node.parameters);
            if (!moduleValidation.isValid) {
                validation.errors.push(`–ú–æ–¥—É–ª—å "${node.module.name}": ${moduleValidation.errors.join(', ')}`);
                validation.isValid = false;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        const riskyModules = Array.from(this.canvasNodes.values())
            .filter(node => node.module.risk_level === 'high');

        if (riskyModules.length > 0 && !this.currentScenario.settings.safe_mode) {
            validation.warnings.push(`–°—Ü–µ–Ω–∞—Ä–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç ${riskyModules.length} –º–æ–¥—É–ª–µ–π –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞`);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        const isolatedModules = this.findIsolatedModules();
        if (isolatedModules.length > 0 && this.canvasNodes.size > 1) {
            validation.warnings.push(`–ù–∞–π–¥–µ–Ω–æ ${isolatedModules.length} –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π`);
        }

        return validation;
    }

    /**
     * –ü–æ–∏—Å–∫ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
     */
    findIsolatedModules() {
        const connectedNodes = new Set();

        this.connections.forEach(connection => {
            connectedNodes.add(connection.from.nodeId);
            connectedNodes.add(connection.to.nodeId);
        });

        return Array.from(this.canvasNodes.keys())
            .filter(nodeId => !connectedNodes.has(nodeId));
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è
     */
    exportScenario(format = 'json') {
        const exportData = {
            version: this.version,
            exported: new Date().toISOString(),
            scenario: {
                ...this.currentScenario,
                modules: Array.from(this.canvasNodes.values()).map(node => ({
                    id: node.id,
                    moduleId: node.moduleId,
                    parameters: node.parameters,
                    position: { x: node.x, y: node.y }
                })),
                connections: Array.from(this.connections.values())
            }
        };

        switch (format) {
            case 'json':
                return JSON.stringify(exportData, null, 2);
            case 'yaml':
                // –ü—Ä–æ—Å—Ç–æ–µ YAML –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
                return this.convertToYaml(exportData);
            default:
                throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞: ${format}`);
        }
    }

    /**
     * –ò–º–ø–æ—Ä—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è
     */
    async importScenario(data, format = 'json') {
        try {
            let scenarioData;

            if (format === 'json') {
                scenarioData = typeof data === 'string' ? JSON.parse(data) : data;
            } else {
                throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–ø–æ—Ä—Ç–∞: ${format}`);
            }

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if (!scenarioData.scenario) {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è');
            }

            // –û—á–∏—â–∞–µ–º canvas
            this.clearCanvas();

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
            this.currentScenario = { ...scenarioData.scenario };

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥—É–ª–∏
            if (scenarioData.scenario.modules) {
                for (const moduleData of scenarioData.scenario.modules) {
                    const module = this.getAttackModule(moduleData.moduleId);
                    if (module) {
                        const node = {
                            id: moduleData.id,
                            moduleId: moduleData.moduleId,
                            module,
                            x: moduleData.position.x,
                            y: moduleData.position.y,
                            parameters: moduleData.parameters,
                            status: 'ready',
                            results: null,
                            created: new Date().toISOString()
                        };
                        this.canvasNodes.set(moduleData.id, node);
                    }
                }
            }

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if (scenarioData.scenario.connections) {
                scenarioData.scenario.connections.forEach(connData => {
                    this.connections.set(connData.id, connData);
                });
            }

            this.emit('scenarioImported', { scenario: this.currentScenario });
            this.saveState();

            console.log('üì• –°—Ü–µ–Ω–∞—Ä–∏–π –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω');
            return true;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è:', error);
            throw error;
        }
    }

    // =======================================================
    // –í–´–ü–û–õ–ù–ï–ù–ò–ï –°–¶–ï–ù–ê–†–ò–ï–í
    // =======================================================

    /**
     * –ó–∞–ø—É—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
     */
    async executeScenario() {
        if (this.isExecuting) {
            throw new Error('–°—Ü–µ–Ω–∞—Ä–∏–π —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        const validation = this.validateScenario();
        if (!validation.isValid) {
            throw new Error(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${validation.errors.join(', ')}`);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –æ–ø–∞—Å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        if (this.requiresConfirmation()) {
            const confirmed = await this.requestExecutionConfirmation();
            if (!confirmed) {
                throw new Error('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
            }
        }

        console.log('üöÄ –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è:', this.currentScenario.name);
        this.isExecuting = true;

        try {
            // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            const executionPlan = this.buildExecutionPlan();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            this.executionResults.clear();

            // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            this.emit('executionStarted', {
                scenario: this.currentScenario,
                plan: executionPlan
            });

            // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–ª–∞–Ω
            const results = await this.executeExecutionPlan(executionPlan);

            this.emit('executionCompleted', { results });
            console.log('‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');

            return results;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è:', error);
            this.emit('executionFailed', { error });
            throw error;
        } finally {
            this.isExecuting = false;
        }
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     */
    buildExecutionPlan() {
        const plan = {
            stages: [],
            totalModules: this.canvasNodes.size,
            estimatedTime: 0
        };

        // –¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        const sortedNodes = this.topologicalSort();

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –ø–æ —Å—Ç–∞–¥–∏—è–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        let currentStage = [];
        let stageNumber = 1;

        sortedNodes.forEach(nodeId => {
            const node = this.canvasNodes.get(nodeId);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            const dependencies = this.getNodeDependencies(nodeId);
            const canExecuteNow = dependencies.every(depId =>
                plan.stages.some(stage =>
                    stage.modules.some(m => m.nodeId === depId)
                )
            );

            if (canExecuteNow || dependencies.length === 0) {
                currentStage.push({
                    nodeId,
                    module: node.module,
                    parameters: node.parameters,
                    estimatedTime: this.estimateModuleExecutionTime(node.module)
                });
            } else {
                // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–∞–¥–∏—é
                if (currentStage.length > 0) {
                    plan.stages.push({
                        stage: stageNumber++,
                        modules: [...currentStage],
                        parallel: currentStage.length > 1
                    });
                    currentStage = [];
                }

                currentStage.push({
                    nodeId,
                    module: node.module,
                    parameters: node.parameters,
                    estimatedTime: this.estimateModuleExecutionTime(node.module)
                });
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç–∞–¥–∏—é
        if (currentStage.length > 0) {
            plan.stages.push({
                stage: stageNumber,
                modules: currentStage,
                parallel: currentStage.length > 1
            });
        }

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è
        plan.estimatedTime = plan.stages.reduce((total, stage) => {
            const stageTime = stage.parallel
                ? Math.max(...stage.modules.map(m => m.estimatedTime))
                : stage.modules.reduce((sum, m) => sum + m.estimatedTime, 0);
            return total + stageTime;
        }, 0);

        return plan;
    }

    /**
     * –¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —É–∑–ª–æ–≤
     */
    topologicalSort() {
        const visited = new Set();
        const temp = new Set();
        const result = [];

        const visit = (nodeId) => {
            if (temp.has(nodeId)) {
                throw new Error('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å');
            }
            if (!visited.has(nodeId)) {
                temp.add(nodeId);

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                this.getNodeDependencies(nodeId).forEach(depId => {
                    visit(depId);
                });

                temp.delete(nodeId);
                visited.add(nodeId);
                result.push(nodeId);
            }
        };

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —É–∑–ª—ã
        this.canvasNodes.forEach((_, nodeId) => {
            if (!visited.has(nodeId)) {
                visit(nodeId);
            }
        });

        return result;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —É–∑–ª–∞
     */
    getNodeDependencies(nodeId) {
        return Array.from(this.connections.values())
            .filter(conn => conn.to.nodeId === nodeId)
            .map(conn => conn.from.nodeId);
    }

    /**
     * –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–æ–¥—É–ª—è
     */
    estimateModuleExecutionTime(module) {
        // –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        const baseTime = {
            'discovery': 60,    // 1 –º–∏–Ω—É—Ç–∞
            'enum': 120,        // 2 –º–∏–Ω—É—Ç—ã
            'brute': 600,       // 10 –º–∏–Ω—É—Ç
            'exploit': 300,     // 5 –º–∏–Ω—É—Ç
            'web': 180,         // 3 –º–∏–Ω—É—Ç—ã
            'post': 240         // 4 –º–∏–Ω—É—Ç—ã
        };

        const complexityMultiplier = {
            'easy': 0.5,
            'medium': 1.0,
            'hard': 2.0
        };

        const base = baseTime[module.category] || 120;
        const multiplier = complexityMultiplier[module.difficulty] || 1.0;

        return Math.round(base * multiplier);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
     */
    requiresConfirmation() {
        return Array.from(this.canvasNodes.values()).some(node =>
            this.securityPolicies.requireConfirmation.includes(node.module.category) ||
            node.module.risk_level === 'high'
        );
    }

    /**
     * –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     */
    async requestExecutionConfirmation() {
        return new Promise((resolve) => {
            const riskyModules = Array.from(this.canvasNodes.values())
                .filter(node =>
                    this.securityPolicies.requireConfirmation.includes(node.module.category) ||
                    node.module.risk_level === 'high'
                );

            const message = `–°—Ü–µ–Ω–∞—Ä–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç ${riskyModules.length} –º–æ–¥—É–ª–µ–π –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞:\n\n` +
                riskyModules.map(node => `‚Ä¢ ${node.module.name}`).join('\n') +
                '\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?';

            if (confirm(message)) {
                resolve(true);
            } else {
                resolve(false);
            }
        });
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞
     */
    async executeExecutionPlan(plan) {
        const results = {
            scenario: this.currentScenario.name,
            startTime: new Date().toISOString(),
            stages: [],
            totalModules: plan.totalModules,
            executedModules: 0,
            failedModules: 0,
            artifacts: new Map()
        };

        for (const stage of plan.stages) {
            console.log(`üèÅ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ ${stage.stage} (${stage.modules.length} –º–æ–¥—É–ª–µ–π)`);

            const stageResult = {
                stage: stage.stage,
                modules: [],
                parallel: stage.parallel,
                startTime: new Date().toISOString(),
                duration: 0
            };

            const stageStartTime = Date.now();

            if (stage.parallel) {
                // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                const modulePromises = stage.modules.map(module =>
                    this.executeModule(module, results.artifacts)
                );

                const moduleResults = await Promise.allSettled(modulePromises);

                moduleResults.forEach((result, index) => {
                    const module = stage.modules[index];
                    if (result.status === 'fulfilled') {
                        stageResult.modules.push(result.value);
                        results.executedModules++;
                    } else {
                        stageResult.modules.push({
                            nodeId: module.nodeId,
                            status: 'failed',
                            error: result.reason?.message || 'Unknown error'
                        });
                        results.failedModules++;
                    }
                });
            } else {
                // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                for (const module of stage.modules) {
                    try {
                        const moduleResult = await this.executeModule(module, results.artifacts);
                        stageResult.modules.push(moduleResult);
                        results.executedModules++;
                    } catch (error) {
                        stageResult.modules.push({
                            nodeId: module.nodeId,
                            status: 'failed',
                            error: error.message
                        });
                        results.failedModules++;

                        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
                        if (this.currentScenario.settings.auto_stop) {
                            break;
                        }
                    }
                }
            }

            stageResult.endTime = new Date().toISOString();
            stageResult.duration = Date.now() - stageStartTime;
            results.stages.push(stageResult);

            // –≠–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            this.emit('executionProgress', {
                stage: stage.stage,
                completed: results.executedModules,
                total: results.totalModules,
                failed: results.failedModules
            });
        }

        results.endTime = new Date().toISOString();
        results.totalDuration = Date.now() - new Date(results.startTime).getTime();

        return results;
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –º–æ–¥—É–ª—è (—Å–∏–º—É–ª—è—Ü–∏—è)
     */
    async executeModule(module, artifacts) {
        const startTime = Date.now();

        console.log(`‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–¥—É–ª—è: ${module.module.name}`);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É–∑–ª–∞
        const node = this.canvasNodes.get(module.nodeId);
        if (node) {
            node.status = 'executing';
            this.emit('moduleStatusChanged', { nodeId: module.nodeId, status: 'executing' });
        }

        try {
            // –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–æ–¥—É–ª—è
            const result = await this.simulateModuleExecution(module, artifacts);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if (node) {
                node.status = result.success ? 'completed' : 'failed';
                node.results = result;
                this.emit('moduleStatusChanged', {
                    nodeId: module.nodeId,
                    status: node.status,
                    results: result
                });
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
            if (result.artifacts) {
                Object.entries(result.artifacts).forEach(([key, value]) => {
                    artifacts.set(`${module.nodeId}-${key}`, value);
                });
            }

            return {
                nodeId: module.nodeId,
                moduleName: module.module.name,
                status: result.success ? 'completed' : 'failed',
                duration: Date.now() - startTime,
                results: result,
                artifacts: Object.keys(result.artifacts || {})
            };

        } catch (error) {
            if (node) {
                node.status = 'failed';
                this.emit('moduleStatusChanged', { nodeId: module.nodeId, status: 'failed', error });
            }
            throw error;
        }
    }

    /**
     * –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–æ–¥—É–ª—è
     */
    async simulateModuleExecution(module, artifacts) {
        // –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
        const delay = Math.random() * 3000 + 1000; // 1-4 —Å–µ–∫—É–Ω–¥—ã
        await new Promise(resolve => setTimeout(resolve, delay));

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –º–æ–¥—É–ª—è
        const result = {
            success: Math.random() > 0.1, // 90% —É—Å–ø–µ—Ö–∞
            timestamp: new Date().toISOString(),
            module: module.module.name,
            parameters: module.parameters,
            artifacts: {}
        };

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–¥—É–ª—è
        switch (module.module.category) {
            case 'discovery':
                result.artifacts = {
                    discovered_hosts: this.generateDiscoveredHosts(),
                    network_info: this.generateNetworkInfo()
                };
                break;

            case 'enum':
                result.artifacts = {
                    service_info: this.generateServiceInfo(),
                    banners: this.generateBanners()
                };
                break;

            case 'brute':
                const credentialsFound = Math.random() > 0.7; // 30% —à–∞–Ω—Å –Ω–∞–π—Ç–∏ –∫—Ä–µ–¥—ã
                result.artifacts = {
                    credentials: credentialsFound ? this.generateCredentials() : [],
                    attempts: Math.floor(Math.random() * 100) + 10
                };
                break;

            case 'exploit':
                const exploitSuccess = Math.random() > 0.6; // 40% —É—Å–ø–µ—Ö —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏
                result.artifacts = {
                    exploit_success: exploitSuccess,
                    access_level: exploitSuccess ? 'user' : 'none',
                    vulnerabilities: this.generateVulnerabilities()
                };
                break;

            case 'web':
                result.artifacts = {
                    vulnerabilities: this.generateWebVulnerabilities(),
                    technologies: this.generateTechnologies()
                };
                break;

            case 'post':
                result.artifacts = {
                    system_info: this.generateSystemInfo(),
                    collected_data: this.generateCollectedData()
                };
                break;
        }

        return result;
    }

    // =======================================================
    // –ì–ï–ù–ï–†–ê–¢–û–†–´ –§–ò–ö–¢–ò–í–ù–´–• –î–ê–ù–ù–´–•
    // =======================================================

    generateDiscoveredHosts() {
        const hosts = [];
        const count = Math.floor(Math.random() * 10) + 1;

        for (let i = 0; i < count; i++) {
            hosts.push({
                ip: `192.168.1.${Math.floor(Math.random() * 254) + 1}`,
                status: 'up',
                response_time: Math.floor(Math.random() * 100) + 1,
                os_guess: ['Linux', 'Windows', 'Unknown'][Math.floor(Math.random() * 3)]
            });
        }

        return hosts;
    }

    generateNetworkInfo() {
        return {
            network_range: '192.168.1.0/24',
            gateway: '192.168.1.1',
            dns_servers: ['8.8.8.8', '1.1.1.1'],
            scan_time: new Date().toISOString()
        };
    }

    generateServiceInfo() {
        const services = ['ssh', 'http', 'https', 'ftp', 'telnet', 'smtp'];
        const ports = [22, 80, 443, 21, 23, 25];
        const result = [];

        const count = Math.floor(Math.random() * 5) + 1;
        for (let i = 0; i < count; i++) {
            const serviceIndex = Math.floor(Math.random() * services.length);
            result.push({
                service: services[serviceIndex],
                port: ports[serviceIndex],
                version: `${services[serviceIndex]} v${Math.floor(Math.random() * 5) + 1}.${Math.floor(Math.random() * 10)}`,
                state: 'open'
            });
        }

        return result;
    }

    generateBanners() {
        return [
            'SSH-2.0-OpenSSH_7.4',
            'HTTP/1.1 200 OK\nServer: Apache/2.4.41',
            '220 FTP server ready'
        ];
    }

    generateCredentials() {
        const usernames = ['admin', 'root', 'user', 'test'];
        const passwords = ['password', '123456', 'admin', 'qwerty'];

        return [{
            username: usernames[Math.floor(Math.random() * usernames.length)],
            password: passwords[Math.floor(Math.random() * passwords.length)],
            service: 'ssh',
            verified: true
        }];
    }

    generateVulnerabilities() {
        const vulns = [
            'CVE-2021-44228 (Log4Shell)',
            'CVE-2021-34527 (PrintNightmare)',
            'CVE-2020-1472 (Zerologon)'
        ];

        return [vulns[Math.floor(Math.random() * vulns.length)]];
    }

    generateWebVulnerabilities() {
        const webVulns = ['SQL Injection', 'XSS', 'CSRF', 'Directory Traversal'];
        return [webVulns[Math.floor(Math.random() * webVulns.length)]];
    }

    generateTechnologies() {
        return {
            server: 'Apache/2.4.41',
            language: 'PHP/7.4.3',
            framework: 'WordPress 5.8',
            database: 'MySQL'
        };
    }

    generateSystemInfo() {
        return {
            os: 'Ubuntu 20.04 LTS',
            kernel: '5.4.0-80-generic',
            architecture: 'x86_64',
            uptime: '15 days, 3 hours, 42 minutes'
        };
    }

    generateCollectedData() {
        return {
            users: ['root', 'admin', 'user1'],
            processes: 156,
            network_connections: 23,
            installed_packages: 1247
        };
    }

    // =======================================================
    // –£–¢–ò–õ–ò–¢–ê–†–ù–´–ï –ú–ï–¢–û–î–´
    // =======================================================

    /**
     * –û—á–∏—Å—Ç–∫–∞ canvas
     */
    clearCanvas() {
        this.canvasNodes.clear();
        this.connections.clear();
        this.selectedNode = null;

        this.currentScenario.modules = [];
        this.currentScenario.connections = [];

        this.emit('canvasCleared');
        console.log('üßπ Canvas –æ—á–∏—â–µ–Ω');
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    saveState() {
        try {
            const state = {
                version: this.version,
                timestamp: Date.now(),
                scenario: this.currentScenario,
                nodes: Array.from(this.canvasNodes.entries()),
                connections: Array.from(this.connections.entries()),
                settings: this.settings
            };

            localStorage.setItem('attack-constructor-state', JSON.stringify(state));
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', error);
        }
    }

    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    restoreState() {
        try {
            const savedState = localStorage.getItem('attack-constructor-state');
            if (!savedState) return;

            const state = JSON.parse(savedState);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å (–Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
            if (Date.now() - state.timestamp > 24 * 60 * 60 * 1000) {
                return;
            }

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            if (state.scenario) {
                this.currentScenario = state.scenario;
            }

            if (state.nodes) {
                this.canvasNodes = new Map(state.nodes);
            }

            if (state.connections) {
                this.connections = new Map(state.connections);
            }

            if (state.settings) {
                this.settings = { ...this.settings, ...state.settings };
            }

            console.log('üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', error);
        }
    }

    /**
     * –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ YAML
     */
    convertToYaml(obj, indent = 0) {
        const spaces = '  '.repeat(indent);
        let yaml = '';

        for (const [key, value] of Object.entries(obj)) {
            if (value === null) {
                yaml += `${spaces}${key}: null\n`;
            } else if (typeof value === 'object' && !Array.isArray(value)) {
                yaml += `${spaces}${key}:\n`;
                yaml += this.convertToYaml(value, indent + 1);
            } else if (Array.isArray(value)) {
                yaml += `${spaces}${key}:\n`;
                value.forEach(item => {
                    if (typeof item === 'object') {
                        yaml += `${spaces}  -\n`;
                        yaml += this.convertToYaml(item, indent + 2);
                    } else {
                        yaml += `${spaces}  - ${item}\n`;
                    }
                });
            } else {
                yaml += `${spaces}${key}: ${value}\n`;
            }
        }

        return yaml;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
     */
    getDebugInfo() {
        return {
            version: this.version,
            isInitialized: this.isInitialized,
            isExecuting: this.isExecuting,
            canvasNodes: this.canvasNodes.size,
            connections: this.connections.size,
            currentScenario: this.currentScenario.name,
            attackModules: this.attackModules.size,
            categories: this.moduleCategories.size
        };
    }

    /**
     * –ê–∫—Ç–∏–≤–∞—Ü–∏—è –º–æ–¥—É–ª—è
     */
    activate() {
        console.log('üü¢ Attack Constructor Core –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
        this.emit('activated');
    }

    /**
     * –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –º–æ–¥—É–ª—è
     */
    deactivate() {
        console.log('üü° Attack Constructor Core –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
        this.emit('deactivated');
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    cleanup() {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ Attack Constructor Core...');

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.saveState();

        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        this.canvasNodes.clear();
        this.connections.clear();
        this.executionResults.clear();
        this.eventHandlers.clear();

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏
        this.isInitialized = false;
        this.isExecuting = false;

        console.log('‚úÖ Attack Constructor Core –æ—á–∏—â–µ–Ω');
    }
}

// =======================================================
// –≠–ö–°–ü–û–†–¢ –ò –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø
// =======================================================

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const signatureAnalysisConstructor = new AttackConstructorCore();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è ES6 –º–æ–¥—É–ª–µ–π
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        AttackConstructorCore,
        SignatureAnalysisConstructor: AttackConstructorCore,
        ATTACK_MODULES_LIBRARY
    };
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
if (typeof window !== 'undefined') {
    window.AttackConstructorCore = AttackConstructorCore;
    window.SignatureAnalysisConstructor = AttackConstructorCore;
    window.signatureConstructor = signatureAnalysisConstructor;

    // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å attack-constructor-main.js
    window.attackConstructorCore = signatureAnalysisConstructor;
}

console.log('‚úÖ Attack Constructor Core v2.0.0-Pentest loaded successfully');

/**
 * =======================================================
 * –ö–û–ù–ï–¶ –§–ê–ô–õ–ê attack-constructor-core.js
 * 
 * IP Roast Enterprise - Attack Constructor Core Module v2.0
 * –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –º–æ–¥—É–ª–µ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–µ–Ω—Ç–µ—Å—Ç–∞
 * –í–µ—Ä—Å–∏—è: 2.0.0-Pentest-Core
 * 
 * –ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∏–∑ 15+ –º–æ–¥—É–ª–µ–π –∞—Ç–∞–∫ (—Ä–∞–∑–≤–µ–¥–∫–∞, —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è, –±—Ä—É—Ç—Ñ–æ—Ä—Å)
 * - –í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å drag & drop
 * - –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
 * - –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 * - –≠–∫—Å–ø–æ—Ä—Ç/–∏–º–ø–æ—Ä—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ (JSON/YAML)
 * - –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SPA –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π IP_Roast
 * - Enterprise-—É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
 * =======================================================
 */
