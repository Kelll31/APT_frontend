/**
 * IP Roast Enterprise 4.0 - Test Manager Module
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª —Å–∏–≥–Ω–∞—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
 * –í–µ—Ä—Å–∏—è: 4.0.0-Enhanced-Testing
 * 
 * @description –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 * @author IP Roast Security Team
 * @requires attack-constructor-core.js, canvas-manager.js, connection-manager.js
 * @integrates rule-generator, signature-components, ui-manager
 */

console.log('üß™ Loading Test Manager v4.0.0-Enhanced');

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
class TestManager {
    constructor(coreInstance, canvasManager, connectionManager, ruleGenerator) {
        this.version = '4.0.0-Enhanced-Testing';
        this.core = coreInstance;
        this.canvasManager = canvasManager;
        this.connectionManager = connectionManager;
        this.ruleGenerator = ruleGenerator;
        this.isInitialized = false;

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.isTestRunning = false;
        this.currentTest = null;
        this.testResults = new Map();
        this.testHistory = [];

        // –¢–∏–ø—ã —Ç–µ—Å—Ç–æ–≤
        this.testTypes = {
            'component-validation': {
                name: '–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
                description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
                category: 'validation',
                priority: 'high'
            },
            'rule-syntax': {
                name: '–°–∏–Ω—Ç–∞–∫—Å–∏—Å –ø—Ä–∞–≤–∏–ª–∞',
                description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞',
                category: 'syntax',
                priority: 'high'
            },
            'logic-validation': {
                name: '–õ–æ–≥–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è',
                description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—á–µ—Å–∫–æ–π —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π',
                category: 'logic',
                priority: 'high'
            },
            'performance-test': {
                name: '–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
                description: '–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞',
                category: 'performance',
                priority: 'medium'
            },
            'data-simulation': {
                name: '–°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö',
                description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö',
                category: 'simulation',
                priority: 'medium'
            },
            'format-generation': {
                name: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤',
                description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã',
                category: 'generation',
                priority: 'low'
            },
            'false-positive': {
                name: '–õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è',
                description: '–ê–Ω–∞–ª–∏–∑ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π',
                category: 'accuracy',
                priority: 'medium'
            },
            'coverage-analysis': {
                name: '–ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è',
                description: '–û—Ü–µ–Ω–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è —É–≥—Ä–æ–∑ –ø—Ä–∞–≤–∏–ª–æ–º',
                category: 'coverage',
                priority: 'low'
            }
        };

        // –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        this.dataSources = {
            'sample': {
                name: '–û–±—Ä–∞–∑—Ü—ã –¥–∞–Ω–Ω—ã—Ö',
                description: '–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±—Ä–∞–∑—Ü—ã',
                available: true
            },
            'generated': {
                name: '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
                description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ',
                available: true
            },
            'upload': {
                name: '–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª',
                description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ',
                available: true
            },
            'live': {
                name: '–ñ–∏–≤–æ–π —Ç—Ä–∞—Ñ–∏–∫',
                description: '–†–µ–∞–ª—å–Ω—ã–π —Å–µ—Ç–µ–≤–æ–π —Ç—Ä–∞—Ñ–∏–∫ (—Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)',
                available: false
            }
        };

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.testSettings = {
            timeout: 30000, // 30 —Å–µ–∫—É–Ω–¥
            maxDataSize: 10 * 1024 * 1024, // 10MB
            simulationIterations: 1000,
            performanceThreshold: 100, // ms
            accuracyThreshold: 0.95,
            enableDetailedLogs: true,
            autoSaveResults: true
        };

        // –ú–µ—Ç—Ä–∏–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.testMetrics = {
            totalTests: 0,
            passedTests: 0,
            failedTests: 0,
            skippedTests: 0,
            avgTestTime: 0,
            totalTestTime: 0,
            lastTestTime: null
        };

        // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        this.validationCache = new Map();
        this.testDataCache = new Map();
        this.resultCache = new Map();

        // –°–æ–±—ã—Ç–∏—è
        this.eventHandlers = new Map();
        this.testEventListeners = new Map();

        console.log('üß™ Test Manager initialized');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Test Manager
     */
    async initialize() {
        try {
            console.log('üöÄ Initializing Test Manager...');

            this.setupEventListeners();
            this.initializeTestData();
            this.setupValidationRules();
            this.initializeUI();
            this.loadTestHistory();

            this.isInitialized = true;
            console.log('‚úÖ Test Manager initialized successfully');

        } catch (error) {
            console.error('‚ùå Test Manager initialization failed:', error);
            throw error;
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –°–æ–±—ã—Ç–∏—è –æ—Ç core –º–æ–¥—É–ª—è
        if (this.core) {
            this.core.on?.('ruleUpdated', this.handleRuleUpdated.bind(this));
            this.core.on?.('componentAdded', this.handleComponentChange.bind(this));
            this.core.on?.('componentDeleted', this.handleComponentChange.bind(this));
            this.core.on?.('parameterChanged', this.handleParameterChange.bind(this));
        }

        // –°–æ–±—ã—Ç–∏—è –æ—Ç canvas manager
        if (this.canvasManager) {
            this.canvasManager.on?.('nodePositionChanged', this.handleNodeChange.bind(this));
            this.canvasManager.on?.('canvasCleared', this.handleCanvasCleared.bind(this));
        }

        // –°–æ–±—ã—Ç–∏—è –æ—Ç connection manager
        if (this.connectionManager) {
            this.connectionManager.on?.('connectionCreated', this.handleConnectionChange.bind(this));
            this.connectionManager.on?.('connectionDeleted', this.handleConnectionChange.bind(this));
            this.connectionManager.on?.('connectionOperatorChanged', this.handleConnectionChange.bind(this));
        }

        console.log('‚ö° Test Manager event listeners bound');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    initializeTestData() {
        console.log('üìä Initializing test data...');

        // –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±—Ä–∞–∑—Ü—ã
        this.sampleData = {
            'network-traffic': {
                name: '–°–µ—Ç–µ–≤–æ–π —Ç—Ä–∞—Ñ–∏–∫',
                data: this.generateNetworkTrafficSamples(),
                size: 1000
            },
            'malware-samples': {
                name: '–û–±—Ä–∞–∑—Ü—ã malware',
                data: this.generateMalwareSamples(),
                size: 500
            },
            'log-entries': {
                name: '–õ–æ–≥ –∑–∞–ø–∏—Å–∏',
                data: this.generateLogEntriesSamples(),
                size: 2000
            },
            'file-samples': {
                name: '–§–∞–π–ª–æ–≤—ã–µ –æ–±—Ä–∞–∑—Ü—ã',
                data: this.generateFileSamples(),
                size: 300
            }
        };

        console.log('‚úÖ Test data initialized');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–∏–ª –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    setupValidationRules() {
        this.validationRules = {
            // –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            components: {
                'ip-address': (params) => this.validateIpAddress(params),
                'port-range': (params) => this.validatePortRange(params),
                'file-hash': (params) => this.validateFileHash(params),
                'regex-pattern': (params) => this.validateRegexPattern(params),
                'string-match': (params) => this.validateStringMatch(params)
            },

            // –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            connections: {
                maxInputs: 10,
                maxOutputs: 10,
                allowCycles: false,
                allowSelfConnect: false
            },

            // –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª
            rules: {
                minComponents: 1,
                maxComponents: 50,
                maxConnections: 100,
                requiredFields: ['name', 'type', 'priority']
            }
        };

        console.log('‚úÖ Validation rules setup');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    initializeUI() {
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞–º–∏
        const testButtons = {
            'run-all-tests': () => this.runAllTests(),
            'run-validation': () => this.runTest('component-validation'),
            'run-syntax-check': () => this.runTest('rule-syntax'),
            'run-performance': () => this.runTest('performance-test'),
            'run-simulation': () => this.runTest('data-simulation')
        };

        Object.entries(testButtons).forEach(([buttonId, handler]) => {
            const button = document.getElementById(buttonId);
            if (button) {
                button.addEventListener('click', handler);
            }
        });

        // –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        const dataSourceSelect = document.getElementById('test-data-source');
        if (dataSourceSelect) {
            dataSourceSelect.addEventListener('change', (e) => {
                this.handleDataSourceChange(e.target.value);
            });
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
        const fileInput = document.getElementById('test-data-file');
        if (fileInput) {
            fileInput.addEventListener('change', (e) => {
                this.handleFileUpload(e.target.files[0]);
            });
        }

        console.log('üéõÔ∏è Test UI initialized');
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤
     */
    loadTestHistory() {
        try {
            const savedHistory = localStorage.getItem('test-manager-history');
            if (savedHistory) {
                this.testHistory = JSON.parse(savedHistory);
                console.log(`üìö Loaded ${this.testHistory.length} test records`);
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è Error loading test history:', error);
        }
    }

    // =======================================================
    // –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
    // =======================================================

    /**
     * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
     */
    async runAllTests() {
        if (this.isTestRunning) {
            console.warn('‚ö†Ô∏è Test already in progress');
            return;
        }

        console.log('üß™ Running all tests...');
        const startTime = performance.now();

        try {
            this.isTestRunning = true;
            this.updateTestUI('running');

            const testSuite = {
                id: this.generateTestId(),
                name: '–ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤',
                timestamp: new Date().toISOString(),
                tests: [],
                results: {
                    total: 0,
                    passed: 0,
                    failed: 0,
                    skipped: 0,
                    warnings: 0
                },
                duration: 0
            };

            // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
            const testOrder = this.getTestExecutionOrder();

            for (const testType of testOrder) {
                try {
                    const testResult = await this.runSingleTest(testType, testSuite.id);
                    testSuite.tests.push(testResult);
                    testSuite.results.total++;

                    if (testResult.status === 'passed') {
                        testSuite.results.passed++;
                    } else if (testResult.status === 'failed') {
                        testSuite.results.failed++;
                    } else {
                        testSuite.results.skipped++;
                    }

                    testSuite.results.warnings += testResult.warnings?.length || 0;

                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    this.updateTestProgress(testSuite);

                } catch (error) {
                    console.error(`‚ùå Test ${testType} failed:`, error);
                    testSuite.tests.push({
                        type: testType,
                        status: 'error',
                        error: error.message,
                        duration: 0
                    });
                    testSuite.results.failed++;
                    testSuite.results.total++;
                }
            }

            testSuite.duration = performance.now() - startTime;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            this.saveTestResults(testSuite);
            this.addToHistory(testSuite);

            // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            this.updateTestMetrics(testSuite);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            this.displayTestResults(testSuite);

            console.log(`‚úÖ All tests completed in ${testSuite.duration.toFixed(2)}ms`);

            return testSuite;

        } finally {
            this.isTestRunning = false;
            this.updateTestUI('idle');
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
     */
    async runTest(testType) {
        if (!this.testTypes[testType]) {
            throw new Error(`Unknown test type: ${testType}`);
        }

        console.log(`üß™ Running test: ${testType}`);
        const result = await this.runSingleTest(testType);

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        this.displaySingleTestResult(result);

        return result;
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
     */
    async runSingleTest(testType, suiteId = null) {
        const testDefinition = this.testTypes[testType];
        const startTime = performance.now();

        const testResult = {
            id: this.generateTestId(),
            suiteId,
            type: testType,
            name: testDefinition.name,
            category: testDefinition.category,
            status: 'running',
            startTime: new Date().toISOString(),
            duration: 0,
            results: {},
            errors: [],
            warnings: [],
            details: {}
        };

        try {
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç
            switch (testType) {
                case 'component-validation':
                    await this.runComponentValidation(testResult);
                    break;
                case 'rule-syntax':
                    await this.runRuleSyntaxTest(testResult);
                    break;
                case 'logic-validation':
                    await this.runLogicValidation(testResult);
                    break;
                case 'performance-test':
                    await this.runPerformanceTest(testResult);
                    break;
                case 'data-simulation':
                    await this.runDataSimulation(testResult);
                    break;
                case 'format-generation':
                    await this.runFormatGeneration(testResult);
                    break;
                case 'false-positive':
                    await this.runFalsePositiveTest(testResult);
                    break;
                case 'coverage-analysis':
                    await this.runCoverageAnalysis(testResult);
                    break;
                default:
                    throw new Error(`Test implementation not found: ${testType}`);
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            if (testResult.errors.length > 0) {
                testResult.status = 'failed';
            } else if (testResult.warnings.length > 0) {
                testResult.status = 'warning';
            } else {
                testResult.status = 'passed';
            }

        } catch (error) {
            testResult.status = 'error';
            testResult.errors.push({
                type: 'execution_error',
                message: error.message,
                stack: error.stack
            });
        }

        testResult.duration = performance.now() - startTime;
        testResult.endTime = new Date().toISOString();

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞
        this.emit('testCompleted', testResult);

        return testResult;
    }

    // =======================================================
    // –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –ö–û–ù–ö–†–ï–¢–ù–´–• –¢–ï–°–¢–û–í
    // =======================================================

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
     */
    async runComponentValidation(testResult) {
        console.log('üîç Running component validation...');

        const nodes = this.canvasManager?.canvasNodes || this.core?.canvasNodes || new Map();
        const validationResults = {
            totalComponents: nodes.size,
            validComponents: 0,
            invalidComponents: 0,
            componentResults: []
        };

        if (nodes.size === 0) {
            testResult.warnings.push({
                type: 'no_components',
                message: '–ù–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏'
            });
            testResult.results = validationResults;
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        for (const [nodeId, node] of nodes) {
            const componentResult = {
                nodeId,
                componentType: node.componentId,
                componentName: node.definition?.name || 'Unknown',
                isValid: true,
                errors: [],
                warnings: []
            };

            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                await this.validateComponentParameters(node, componentResult);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è —Ç–∏–ø–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                await this.validateComponentType(node, componentResult);

                if (componentResult.errors.length > 0) {
                    componentResult.isValid = false;
                    validationResults.invalidComponents++;
                    testResult.errors.push(...componentResult.errors);
                } else {
                    validationResults.validComponents++;
                }

                if (componentResult.warnings.length > 0) {
                    testResult.warnings.push(...componentResult.warnings);
                }

            } catch (error) {
                componentResult.isValid = false;
                componentResult.errors.push({
                    type: 'validation_error',
                    message: `–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${error.message}`
                });
                validationResults.invalidComponents++;
            }

            validationResults.componentResults.push(componentResult);
        }

        testResult.results = validationResults;
        console.log(`‚úÖ Component validation completed: ${validationResults.validComponents}/${validationResults.totalComponents} valid`);
    }

    /**
     * –¢–µ—Å—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –ø—Ä–∞–≤–∏–ª–∞
     */
    async runRuleSyntaxTest(testResult) {
        console.log('üìù Running rule syntax test...');

        const syntaxResults = {
            ruleNameValid: true,
            ruleTypeValid: true,
            rulePriorityValid: true,
            hasComponents: false,
            hasConnections: false,
            syntaxScore: 0
        };

        const currentRule = this.core?.currentRule || {};

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è –ø—Ä–∞–≤–∏–ª–∞
        if (!currentRule.name || currentRule.name.trim().length === 0) {
            syntaxResults.ruleNameValid = false;
            testResult.errors.push({
                type: 'rule_name',
                message: '–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –ø—Ä–∞–≤–∏–ª–∞'
            });
        } else if (currentRule.name.length < 3) {
            syntaxResults.ruleNameValid = false;
            testResult.warnings.push({
                type: 'rule_name_short',
                message: '–ò–º—è –ø—Ä–∞–≤–∏–ª–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤)'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø—Ä–∞–≤–∏–ª–∞
        const validTypes = ['detection', 'prevention', 'monitoring', 'analysis'];
        if (!validTypes.includes(currentRule.type)) {
            syntaxResults.ruleTypeValid = false;
            testResult.errors.push({
                type: 'rule_type',
                message: `–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø –ø—Ä–∞–≤–∏–ª–∞: ${currentRule.type}`
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        const validPriorities = ['low', 'medium', 'high', 'critical'];
        if (!validPriorities.includes(currentRule.priority)) {
            syntaxResults.rulePriorityValid = false;
            testResult.warnings.push({
                type: 'rule_priority',
                message: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${currentRule.priority}`
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        const nodes = this.canvasManager?.canvasNodes || this.core?.canvasNodes || new Map();
        syntaxResults.hasComponents = nodes.size > 0;

        if (!syntaxResults.hasComponents) {
            testResult.errors.push({
                type: 'no_components',
                message: '–ü—Ä–∞–≤–∏–ª–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        const connections = this.connectionManager?.connections || this.core?.connections || new Map();
        syntaxResults.hasConnections = connections.size > 0;

        if (nodes.size > 1 && !syntaxResults.hasConnections) {
            testResult.warnings.push({
                type: 'no_connections',
                message: '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ —Å–æ–µ–¥–∏–Ω–µ–Ω—ã –º–µ–∂–¥—É —Å–æ–±–æ–π'
            });
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–ª —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        syntaxResults.syntaxScore = this.calculateSyntaxScore(syntaxResults);

        testResult.results = syntaxResults;
        console.log(`‚úÖ Rule syntax test completed with score: ${syntaxResults.syntaxScore}/100`);
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏
     */
    async runLogicValidation(testResult) {
        console.log('üîó Running logic validation...');

        const logicResults = {
            hasCircularDependencies: false,
            orphanedComponents: [],
            invalidConnections: [],
            logicalConsistency: true,
            logicScore: 0
        };

        const nodes = this.canvasManager?.canvasNodes || this.core?.canvasNodes || new Map();
        const connections = this.connectionManager?.connections || this.core?.connections || new Map();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        logicResults.hasCircularDependencies = this.detectCircularDependencies(nodes, connections);
        if (logicResults.hasCircularDependencies) {
            testResult.errors.push({
                type: 'circular_dependencies',
                message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –ª–æ–≥–∏–∫–µ –ø—Ä–∞–≤–∏–ª–∞'
            });
        }

        // –ü–æ–∏—Å–∫ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        logicResults.orphanedComponents = this.findOrphanedComponents(nodes, connections);
        if (logicResults.orphanedComponents.length > 0) {
            testResult.warnings.push({
                type: 'orphaned_components',
                message: `–ù–∞–π–¥–µ–Ω–æ ${logicResults.orphanedComponents.length} –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        for (const [connId, connection] of connections) {
            const validationResult = this.validateConnection(connection, nodes);
            if (!validationResult.isValid) {
                logicResults.invalidConnections.push({
                    connectionId: connId,
                    errors: validationResult.errors
                });
            }
        }

        if (logicResults.invalidConnections.length > 0) {
            testResult.errors.push({
                type: 'invalid_connections',
                message: `–ù–∞–π–¥–µ–Ω–æ ${logicResults.invalidConnections.length} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π`
            });
        }

        // –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
        logicResults.logicalConsistency =
            !logicResults.hasCircularDependencies &&
            logicResults.invalidConnections.length === 0;

        logicResults.logicScore = this.calculateLogicScore(logicResults);

        testResult.results = logicResults;
        console.log(`‚úÖ Logic validation completed with score: ${logicResults.logicScore}/100`);
    }

    /**
     * –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    async runPerformanceTest(testResult) {
        console.log('‚ö° Running performance test...');

        const performanceResults = {
            ruleComplexity: 'unknown',
            estimatedProcessingTime: 0,
            memoryUsage: 0,
            scalabilityScore: 0,
            optimizationSuggestions: []
        };

        const nodes = this.canvasManager?.canvasNodes || this.core?.canvasNodes || new Map();
        const connections = this.connectionManager?.connections || this.core?.connections || new Map();

        // –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞
        performanceResults.ruleComplexity = this.calculateRuleComplexity(nodes, connections);

        // –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        performanceResults.estimatedProcessingTime = this.estimateProcessingTime(nodes, connections);

        if (performanceResults.estimatedProcessingTime > this.testSettings.performanceThreshold) {
            testResult.warnings.push({
                type: 'slow_performance',
                message: `–û—Ü–µ–Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥: ${performanceResults.estimatedProcessingTime}ms`
            });
        }

        // –û—Ü–µ–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
        performanceResults.memoryUsage = this.estimateMemoryUsage(nodes, connections);

        // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å
        performanceResults.scalabilityScore = this.calculateScalabilityScore(nodes, connections);

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        performanceResults.optimizationSuggestions = this.generateOptimizationSuggestions(nodes, connections);

        testResult.results = performanceResults;
        console.log(`‚úÖ Performance test completed - Complexity: ${performanceResults.ruleComplexity}`);
    }

    /**
     * –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
     */
    async runDataSimulation(testResult) {
        console.log('üé≤ Running data simulation...');

        const simulationResults = {
            totalIterations: this.testSettings.simulationIterations,
            successfulMatches: 0,
            falsePositives: 0,
            falseNegatives: 0,
            accuracy: 0,
            precision: 0,
            recall: 0,
            details: []
        };

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            const testData = await this.getTestData();

            if (!testData || testData.length === 0) {
                testResult.warnings.push({
                    type: 'no_test_data',
                    message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏'
                });
                testResult.results = simulationResults;
                return;
            }

            // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
            for (let i = 0; i < Math.min(simulationResults.totalIterations, testData.length); i++) {
                const dataPoint = testData[i];
                const matchResult = await this.simulateRuleMatch(dataPoint);

                simulationResults.details.push(matchResult);

                if (matchResult.matched && matchResult.expectedMatch) {
                    simulationResults.successfulMatches++;
                } else if (matchResult.matched && !matchResult.expectedMatch) {
                    simulationResults.falsePositives++;
                } else if (!matchResult.matched && matchResult.expectedMatch) {
                    simulationResults.falseNegatives++;
                }
            }

            // –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            const totalPositive = simulationResults.successfulMatches + simulationResults.falsePositives;
            const totalRelevant = simulationResults.successfulMatches + simulationResults.falseNegatives;
            const totalTested = simulationResults.details.length;

            simulationResults.accuracy = totalTested > 0 ?
                (simulationResults.successfulMatches + (totalTested - totalPositive - simulationResults.falseNegatives)) / totalTested : 0;

            simulationResults.precision = totalPositive > 0 ?
                simulationResults.successfulMatches / totalPositive : 0;

            simulationResults.recall = totalRelevant > 0 ?
                simulationResults.successfulMatches / totalRelevant : 0;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏
            if (simulationResults.accuracy < this.testSettings.accuracyThreshold) {
                testResult.warnings.push({
                    type: 'low_accuracy',
                    message: `–¢–æ—á–Ω–æ—Å—Ç—å –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞: ${(simulationResults.accuracy * 100).toFixed(2)}%`
                });
            }

        } catch (error) {
            testResult.errors.push({
                type: 'simulation_error',
                message: `–û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: ${error.message}`
            });
        }

        testResult.results = simulationResults;
        console.log(`‚úÖ Data simulation completed - Accuracy: ${(simulationResults.accuracy * 100).toFixed(2)}%`);
    }

    /**
     * –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤
     */
    async runFormatGeneration(testResult) {
        console.log('üìù Running format generation test...');

        if (!this.ruleGenerator) {
            testResult.errors.push({
                type: 'no_generator',
                message: 'Rule Generator –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω'
            });
            return;
        }

        const formatResults = {
            supportedFormats: [],
            successfulFormats: [],
            failedFormats: [],
            generationTime: {},
            totalTime: 0
        };

        const formats = Object.keys(this.ruleGenerator.supportedFormats || {});
        formatResults.supportedFormats = formats;

        const startTime = performance.now();

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –∫–∞–∂–¥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        for (const format of formats) {
            try {
                const genStartTime = performance.now();
                const generatedRule = await this.ruleGenerator.generateRule(format, { forceRegenerate: true });
                const genTime = performance.now() - genStartTime;

                formatResults.generationTime[format] = genTime;

                if (generatedRule && generatedRule.trim().length > 0) {
                    formatResults.successfulFormats.push(format);
                } else {
                    formatResults.failedFormats.push({
                        format,
                        reason: '–ü—É—Å—Ç–æ–µ –ø—Ä–∞–≤–∏–ª–æ'
                    });
                }

            } catch (error) {
                formatResults.failedFormats.push({
                    format,
                    reason: error.message
                });
            }
        }

        formatResults.totalTime = performance.now() - startTime;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if (formatResults.failedFormats.length > 0) {
            testResult.errors.push({
                type: 'generation_failures',
                message: `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å ${formatResults.failedFormats.length} —Ñ–æ—Ä–º–∞—Ç–æ–≤`
            });
        }

        if (formatResults.successfulFormats.length === 0) {
            testResult.errors.push({
                type: 'no_successful_generation',
                message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª–æ –Ω–∏ –≤ –æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ'
            });
        }

        testResult.results = formatResults;
        console.log(`‚úÖ Format generation test completed: ${formatResults.successfulFormats.length}/${formats.length} successful`);
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
     */
    async runFalsePositiveTest(testResult) {
        console.log('üéØ Running false positive test...');

        const fpResults = {
            falsePositiveRate: 0,
            riskLevel: 'unknown',
            commonCauses: [],
            recommendations: []
        };

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
        const nodes = this.canvasManager?.canvasNodes || this.core?.canvasNodes || new Map();
        let totalRisk = 0;
        let riskFactors = [];

        for (const [nodeId, node] of nodes) {
            const componentRisk = this.analyzeFalsePositiveRisk(node);
            totalRisk += componentRisk.score;

            if (componentRisk.factors.length > 0) {
                riskFactors.push({
                    nodeId,
                    componentName: node.definition?.name,
                    factors: componentRisk.factors
                });
            }
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
        const avgRisk = nodes.size > 0 ? totalRisk / nodes.size : 0;
        fpResults.falsePositiveRate = Math.min(avgRisk / 100, 1.0);

        if (fpResults.falsePositiveRate < 0.1) {
            fpResults.riskLevel = 'low';
        } else if (fpResults.falsePositiveRate < 0.3) {
            fpResults.riskLevel = 'medium';
        } else {
            fpResults.riskLevel = 'high';
            testResult.warnings.push({
                type: 'high_false_positive_risk',
                message: '–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π'
            });
        }

        // –°–±–æ—Ä –æ–±—â–∏—Ö –ø—Ä–∏—á–∏–Ω
        fpResults.commonCauses = this.identifyCommonFPCauses(riskFactors);
        fpResults.recommendations = this.generateFPRecommendations(fpResults.riskLevel, fpResults.commonCauses);

        testResult.results = fpResults;
        console.log(`‚úÖ False positive test completed - Risk level: ${fpResults.riskLevel}`);
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è —É–≥—Ä–æ–∑
     */
    async runCoverageAnalysis(testResult) {
        console.log('üõ°Ô∏è Running coverage analysis...');

        const coverageResults = {
            threatCategories: [],
            coverageScore: 0,
            gaps: [],
            strengths: []
        };

        const nodes = this.canvasManager?.canvasNodes || this.core?.canvasNodes || new Map();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∫—Ä—ã–≤–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–≥—Ä–æ–∑
        const threatMapping = this.mapComponentsToThreats(nodes);
        coverageResults.threatCategories = Object.keys(threatMapping);

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        Object.entries(threatMapping).forEach(([category, components]) => {
            const categoryScore = this.calculateCategoryScore(category, components);

            if (categoryScore > 0.7) {
                coverageResults.strengths.push({
                    category,
                    score: categoryScore,
                    components: components.length
                });
            } else if (categoryScore < 0.3) {
                coverageResults.gaps.push({
                    category,
                    score: categoryScore,
                    recommendation: `–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}"`
                });
            }
        });

        // –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
        const totalCategories = Object.keys(threatMapping).length;
        const strongCategories = coverageResults.strengths.length;

        coverageResults.coverageScore = totalCategories > 0 ? strongCategories / totalCategories : 0;

        if (coverageResults.gaps.length > 0) {
            testResult.warnings.push({
                type: 'coverage_gaps',
                message: `–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${coverageResults.gaps.length} –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –ø–æ–∫—Ä—ã—Ç–∏–∏ —É–≥—Ä–æ–∑`
            });
        }

        testResult.results = coverageResults;
        console.log(`‚úÖ Coverage analysis completed - Score: ${(coverageResults.coverageScore * 100).toFixed(2)}%`);
    }

    // =======================================================
    // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –í–ê–õ–ò–î–ê–¶–ò–ò
    // =======================================================

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    async validateComponentParameters(node, result) {
        const definition = node.definition;
        const parameters = node.parameters || {};

        if (!definition.parameters) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
        Object.entries(definition.parameters).forEach(([paramName, paramConfig]) => {
            const value = parameters[paramName];

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if (paramConfig.required && (value === undefined || value === null || value === '')) {
                result.errors.push({
                    type: 'missing_required_parameter',
                    message: `–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä "${paramName}" –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω`
                });
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
            if (value !== undefined && value !== null && value !== '') {
                const validationError = this.validateParameterType(paramName, value, paramConfig);
                if (validationError) {
                    result.errors.push(validationError);
                }
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if (paramConfig.type === 'number' && typeof value === 'number') {
                if (paramConfig.min !== undefined && value < paramConfig.min) {
                    result.warnings.push({
                        type: 'parameter_below_minimum',
                        message: `–ü–∞—Ä–∞–º–µ—Ç—Ä "${paramName}" –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è ${paramConfig.min}`
                    });
                }

                if (paramConfig.max !== undefined && value > paramConfig.max) {
                    result.warnings.push({
                        type: 'parameter_above_maximum',
                        message: `–ü–∞—Ä–∞–º–µ—Ç—Ä "${paramName}" –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è ${paramConfig.max}`
                    });
                }
            }
        });
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    async validateComponentType(node, result) {
        const componentId = node.componentId;

        if (this.validationRules.components[componentId]) {
            try {
                const isValid = await this.validationRules.components[componentId](node.parameters);
                if (!isValid) {
                    result.errors.push({
                        type: 'component_validation_failed',
                        message: `–°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ${componentId} –Ω–µ –ø—Ä–æ—à–ª–∞`
                    });
                }
            } catch (error) {
                result.errors.push({
                    type: 'component_validation_error',
                    message: `–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ${componentId}: ${error.message}`
                });
            }
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
     */
    validateParameterType(paramName, value, config) {
        switch (config.type) {
            case 'string':
                if (typeof value !== 'string') {
                    return {
                        type: 'invalid_parameter_type',
                        message: `–ü–∞—Ä–∞–º–µ—Ç—Ä "${paramName}" –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π`
                    };
                }
                break;

            case 'number':
                if (typeof value !== 'number' || isNaN(value)) {
                    return {
                        type: 'invalid_parameter_type',
                        message: `–ü–∞—Ä–∞–º–µ—Ç—Ä "${paramName}" –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º`
                    };
                }
                break;

            case 'boolean':
                if (typeof value !== 'boolean') {
                    return {
                        type: 'invalid_parameter_type',
                        message: `–ü–∞—Ä–∞–º–µ—Ç—Ä "${paramName}" –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—É–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º`
                    };
                }
                break;

            case 'select':
                if (config.options && !config.options.includes(value)) {
                    return {
                        type: 'invalid_select_option',
                        message: `–ü–∞—Ä–∞–º–µ—Ç—Ä "${paramName}" —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: ${config.options.join(', ')}`
                    };
                }
                break;
        }

        return null;
    }

    // =======================================================
    // –ì–ï–ù–ï–†–ê–¶–ò–Ø –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•
    // =======================================================

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—Ä–∞–∑—Ü–æ–≤ —Å–µ—Ç–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞
     */
    generateNetworkTrafficSamples() {
        const samples = [];
        const ips = ['192.168.1.1', '10.0.0.1', '172.16.0.1', '8.8.8.8', '1.1.1.1'];
        const ports = [80, 443, 22, 21, 25, 53, 8080, 3389];
        const protocols = ['TCP', 'UDP', 'ICMP'];

        for (let i = 0; i < 1000; i++) {
            samples.push({
                id: i,
                timestamp: new Date(Date.now() - Math.random() * 86400000).toISOString(),
                src_ip: ips[Math.floor(Math.random() * ips.length)],
                dst_ip: ips[Math.floor(Math.random() * ips.length)],
                src_port: ports[Math.floor(Math.random() * ports.length)],
                dst_port: ports[Math.floor(Math.random() * ports.length)],
                protocol: protocols[Math.floor(Math.random() * protocols.length)],
                size: Math.floor(Math.random() * 10000),
                flags: ['SYN', 'ACK', 'FIN'][Math.floor(Math.random() * 3)],
                payload: this.generateRandomPayload(),
                expectedMatch: Math.random() > 0.8 // 20% –æ–∂–∏–¥–∞–µ–º—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            });
        }

        return samples;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—Ä–∞–∑—Ü–æ–≤ malware
     */
    generateMalwareSamples() {
        const samples = [];
        const fileTypes = ['.exe', '.dll', '.scr', '.bat', '.vbs'];
        const malwareNames = ['trojan', 'virus', 'worm', 'backdoor', 'rootkit'];

        for (let i = 0; i < 500; i++) {
            const fileType = fileTypes[Math.floor(Math.random() * fileTypes.length)];
            samples.push({
                id: i,
                filename: `${malwareNames[Math.floor(Math.random() * malwareNames.length)]}${i}${fileType}`,
                size: Math.floor(Math.random() * 1000000) + 1000,
                hash_md5: this.generateRandomHash('md5'),
                hash_sha1: this.generateRandomHash('sha1'),
                hash_sha256: this.generateRandomHash('sha256'),
                pe_signature: Math.random() > 0.5,
                entropy: Math.random() * 8,
                expectedMatch: Math.random() > 0.7 // 30% –æ–∂–∏–¥–∞–µ–º—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            });
        }

        return samples;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–æ–≤
     */
    generateLogEntriesSamples() {
        const samples = [];
        const logLevels = ['INFO', 'WARN', 'ERROR', 'DEBUG'];
        const sources = ['auth', 'kernel', 'network', 'application'];

        for (let i = 0; i < 2000; i++) {
            samples.push({
                id: i,
                timestamp: new Date(Date.now() - Math.random() * 86400000).toISOString(),
                level: logLevels[Math.floor(Math.random() * logLevels.length)],
                source: sources[Math.floor(Math.random() * sources.length)],
                message: this.generateRandomLogMessage(),
                user: `user${Math.floor(Math.random() * 100)}`,
                ip: `192.168.1.${Math.floor(Math.random() * 254) + 1}`,
                expectedMatch: Math.random() > 0.85 // 15% –æ–∂–∏–¥–∞–µ–º—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            });
        }

        return samples;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤
     */
    generateFileSamples() {
        const samples = [];
        const extensions = ['.txt', '.doc', '.pdf', '.jpg', '.zip'];
        const mimeTypes = ['text/plain', 'application/msword', 'application/pdf', 'image/jpeg', 'application/zip'];

        for (let i = 0; i < 300; i++) {
            const extIndex = Math.floor(Math.random() * extensions.length);
            samples.push({
                id: i,
                filename: `file${i}${extensions[extIndex]}`,
                size: Math.floor(Math.random() * 5000000),
                mime_type: mimeTypes[extIndex],
                created: new Date(Date.now() - Math.random() * 86400000 * 30).toISOString(),
                hash: this.generateRandomHash('sha256'),
                magic_bytes: this.generateRandomMagicBytes(),
                expectedMatch: Math.random() > 0.6 // 40% –æ–∂–∏–¥–∞–µ–º—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            });
        }

        return samples;
    }

    // =======================================================
    // –£–¢–ò–õ–ò–¢–ê–†–ù–´–ï –ú–ï–¢–û–î–´
    // =======================================================

    /**
     * –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
     */
    async simulateRuleMatch(dataPoint) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞
        const nodes = this.canvasManager?.canvasNodes || this.core?.canvasNodes || new Map();

        let matchScore = 0;
        let totalComponents = 0;

        for (const [nodeId, node] of nodes) {
            totalComponents++;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø—Ä–æ—Ç–∏–≤ –¥–∞–Ω–Ω—ã—Ö
            const componentMatch = this.simulateComponentMatch(node, dataPoint);
            if (componentMatch) {
                matchScore++;
            }
        }

        const matchThreshold = totalComponents * 0.5; // 50% –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞—Å—Ç—å
        const matched = matchScore >= matchThreshold;

        return {
            dataPointId: dataPoint.id,
            matched,
            expectedMatch: dataPoint.expectedMatch,
            matchScore,
            totalComponents,
            confidence: totalComponents > 0 ? matchScore / totalComponents : 0
        };
    }

    /**
     * –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    simulateComponentMatch(node, dataPoint) {
        const componentType = node.componentId;
        const parameters = node.parameters || {};

        // –ü—Ä–æ—Å—Ç–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        switch (componentType) {
            case 'ip-address':
                return dataPoint.src_ip === parameters.address || dataPoint.dst_ip === parameters.address;

            case 'port-range':
                const port = parseInt(parameters.ports);
                return dataPoint.src_port === port || dataPoint.dst_port === port;

            case 'string-match':
                const searchString = parameters.string || '';
                return dataPoint.payload?.includes(searchString) ||
                    dataPoint.message?.includes(searchString);

            case 'file-hash':
                return dataPoint.hash === parameters.hash_value ||
                    dataPoint.hash_md5 === parameters.hash_value ||
                    dataPoint.hash_sha1 === parameters.hash_value ||
                    dataPoint.hash_sha256 === parameters.hash_value;

            default:
                // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                return Math.random() > 0.5;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async getTestData() {
        // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        const dataSource = document.getElementById('test-data-source')?.value || 'sample';

        switch (dataSource) {
            case 'sample':
                return this.getMixedSampleData();
            case 'generated':
                return this.generateTestData();
            case 'upload':
                return this.getUploadedData();
            default:
                return this.getMixedSampleData();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–º–µ—à–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–∞–Ω–Ω—ã—Ö
     */
    getMixedSampleData() {
        const allSamples = [
            ...this.sampleData['network-traffic'].data.slice(0, 200),
            ...this.sampleData['malware-samples'].data.slice(0, 100),
            ...this.sampleData['log-entries'].data.slice(0, 300),
            ...this.sampleData['file-samples'].data.slice(0, 100)
        ];

        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤
        return allSamples.sort(() => Math.random() - 0.5);
    }

    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
     */
    getTestExecutionOrder() {
        return Object.keys(this.testTypes).sort((a, b) => {
            const priorityA = this.testTypes[a].priority;
            const priorityB = this.testTypes[b].priority;

            const priorityOrder = { high: 0, medium: 1, low: 2 };
            return priorityOrder[priorityA] - priorityOrder[priorityB];
        });
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID —Ç–µ—Å—Ç–∞
     */
    generateTestId() {
        return `test-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ö–µ—à–∞
     */
    generateRandomHash(type) {
        const lengths = { md5: 32, sha1: 40, sha256: 64 };
        const length = lengths[type] || 32;
        const chars = '0123456789abcdef';

        let result = '';
        for (let i = 0; i < length; i++) {
            result += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        return result;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ payload
     */
    generateRandomPayload() {
        const patterns = [
            'GET /index.html HTTP/1.1',
            'POST /login.php HTTP/1.1',
            'User-Agent: Mozilla/5.0',
            'malicious_script.exe',
            'SELECT * FROM users',
            'alert("XSS")',
            'cmd.exe /c whoami'
        ];

        return patterns[Math.floor(Math.random() * patterns.length)];
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–≥–∞
     */
    generateRandomLogMessage() {
        const messages = [
            'User login successful',
            'Failed login attempt',
            'File access denied',
            'Network connection established',
            'Service started',
            'Error processing request',
            'Suspicious activity detected',
            'System shutdown initiated'
        ];

        return messages[Math.floor(Math.random() * messages.length)];
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è magic bytes
     */
    generateRandomMagicBytes() {
        const magicBytes = [
            '4D5A', // PE
            '504B', // ZIP
            '7F454C46', // ELF
            'FFD8FFE0', // JPEG
            '89504E47', // PNG
            '25504446' // PDF
        ];

        return magicBytes[Math.floor(Math.random() * magicBytes.length)];
    }

    // =======================================================
    // –†–ê–°–ß–ï–¢–´ –ò –ê–ù–ê–õ–ò–ó
    // =======================================================

    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
     */
    calculateSyntaxScore(syntaxResults) {
        let score = 100;

        if (!syntaxResults.ruleNameValid) score -= 20;
        if (!syntaxResults.ruleTypeValid) score -= 15;
        if (!syntaxResults.rulePriorityValid) score -= 10;
        if (!syntaxResults.hasComponents) score -= 30;
        if (!syntaxResults.hasConnections) score -= 15;

        return Math.max(0, score);
    }

    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞ –ª–æ–≥–∏–∫–∏
     */
    calculateLogicScore(logicResults) {
        let score = 100;

        if (logicResults.hasCircularDependencies) score -= 40;
        if (logicResults.orphanedComponents.length > 0) score -= logicResults.orphanedComponents.length * 5;
        if (logicResults.invalidConnections.length > 0) score -= logicResults.invalidConnections.length * 10;

        return Math.max(0, score);
    }

    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞
     */
    calculateRuleComplexity(nodes, connections) {
        const nodeCount = nodes.size;
        const connectionCount = connections.size;

        if (nodeCount <= 2 && connectionCount <= 1) return 'simple';
        if (nodeCount <= 5 && connectionCount <= 4) return 'medium';
        if (nodeCount <= 10 && connectionCount <= 8) return 'complex';
        return 'very_complex';
    }

    /**
     * –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
     */
    estimateProcessingTime(nodes, connections) {
        let baseTime = 10; // –±–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ –º—Å

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞ –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        nodes.forEach(node => {
            switch (node.definition?.type) {
                case 'network': baseTime += 5; break;
                case 'file': baseTime += 15; break;
                case 'content': baseTime += 20; break;
                case 'behavioral': baseTime += 30; break;
                case 'temporal': baseTime += 10; break;
                default: baseTime += 10;
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        baseTime += connections.size * 2;

        return Math.round(baseTime);
    }

    /**
     * –û—Ü–µ–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
     */
    estimateMemoryUsage(nodes, connections) {
        let baseMemory = 1024; // –±–∞–∑–æ–≤–∞—è –ø–∞–º—è—Ç—å –≤ –±–∞–π—Ç–∞—Ö

        // –ü–∞–º—è—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        baseMemory += nodes.size * 512;

        // –ü–∞–º—è—Ç—å –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        baseMemory += connections.size * 256;

        return Math.round(baseMemory);
    }

    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏
     */
    calculateScalabilityScore(nodes, connections) {
        const complexity = this.calculateRuleComplexity(nodes, connections);
        const scores = {
            'simple': 100,
            'medium': 80,
            'complex': 60,
            'very_complex': 40
        };

        return scores[complexity] || 50;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
     */
    generateOptimizationSuggestions(nodes, connections) {
        const suggestions = [];

        if (nodes.size > 10) {
            suggestions.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã—Ö');
        }

        if (connections.size > 8) {
            suggestions.push('–£–ø—Ä–æ—Å—Ç–∏—Ç–µ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏');
        }

        // –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        const behaviorComponents = Array.from(nodes.values()).filter(n => n.definition?.type === 'behavioral');
        if (behaviorComponents.length > 3) {
            suggestions.push('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –º–æ–∂–µ—Ç —Å–Ω–∏–∑–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
        }

        return suggestions;
    }

    // =======================================================
    // –û–ë–ù–û–í–õ–ï–ù–ò–ï UI
    // =======================================================

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    updateTestUI(state) {
        const testSection = document.querySelector('.test-controls');
        if (!testSection) return;

        switch (state) {
            case 'running':
                testSection.classList.add('testing-in-progress');
                document.querySelectorAll('.test-button').forEach(btn => {
                    btn.disabled = true;
                });
                break;

            case 'idle':
                testSection.classList.remove('testing-in-progress');
                document.querySelectorAll('.test-button').forEach(btn => {
                    btn.disabled = false;
                });
                break;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    updateTestProgress(testSuite) {
        const progressBar = document.querySelector('.test-progress-bar');
        if (progressBar && testSuite.tests.length > 0) {
            const progress = (testSuite.tests.length / Object.keys(this.testTypes).length) * 100;
            progressBar.style.width = `${progress}%`;
        }

        const statusText = document.querySelector('.test-status');
        if (statusText) {
            statusText.textContent = `–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${testSuite.tests.length}/${Object.keys(this.testTypes).length}`;
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
     */
    displayTestResults(testSuite) {
        const resultsContainer = document.getElementById('test-results');
        if (!resultsContainer) return;

        const results = testSuite.results;
        const successRate = results.total > 0 ? (results.passed / results.total) * 100 : 0;

        resultsContainer.innerHTML = `
            <div class="test-summary">
                <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h3>
                <div class="test-stats">
                    <div class="stat-item">
                        <span class="stat-label">–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:</span>
                        <span class="stat-value">${results.total}</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">–ü—Ä–æ–π–¥–µ–Ω–æ:</span>
                        <span class="stat-value success">${results.passed}</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">–ü—Ä–æ–≤–∞–ª–µ–Ω–æ:</span>
                        <span class="stat-value error">${results.failed}</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</span>
                        <span class="stat-value warning">${results.warnings}</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:</span>
                        <span class="stat-value">${successRate.toFixed(1)}%</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">–í—Ä–µ–º—è:</span>
                        <span class="stat-value">${testSuite.duration.toFixed(2)}ms</span>
                    </div>
                </div>
            </div>
            
            <div class="test-details">
                ${testSuite.tests.map(test => this.renderTestResult(test)).join('')}
            </div>
        `;
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
     */
    renderTestResult(testResult) {
        const statusClass = `test-result-${testResult.status}`;
        const statusIcon = {
            'passed': '‚úÖ',
            'failed': '‚ùå',
            'warning': '‚ö†Ô∏è',
            'error': 'üí•',
            'skipped': '‚è≠Ô∏è'
        }[testResult.status] || '‚ùì';

        return `
            <div class="test-result ${statusClass}">
                <div class="test-result-header">
                    <span class="test-status-icon">${statusIcon}</span>
                    <span class="test-name">${testResult.name}</span>
                    <span class="test-duration">${testResult.duration.toFixed(2)}ms</span>
                </div>
                
                ${testResult.errors?.length > 0 ? `
                    <div class="test-errors">
                        <h5>–û—à–∏–±–∫–∏:</h5>
                        <ul>
                            ${testResult.errors.map(error => `<li>${error.message}</li>`).join('')}
                        </ul>
                    </div>
                ` : ''}
                
                ${testResult.warnings?.length > 0 ? `
                    <div class="test-warnings">
                        <h5>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</h5>
                        <ul>
                            ${testResult.warnings.map(warning => `<li>${warning.message}</li>`).join('')}
                        </ul>
                    </div>
                ` : ''}
                
                ${Object.keys(testResult.results || {}).length > 0 ? `
                    <div class="test-result-details">
                        <button class="toggle-details" onclick="this.nextElementSibling.style.display = this.nextElementSibling.style.display === 'none' ? 'block' : 'none'">
                            –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏
                        </button>
                        <div class="test-details-content" style="display: none;">
                            <pre>${JSON.stringify(testResult.results, null, 2)}</pre>
                        </div>
                    </div>
                ` : ''}
            </div>
        `;
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
     */
    displaySingleTestResult(testResult) {
        console.log(`üß™ Test ${testResult.name} completed:`, testResult.status);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—ã—Å—Ç—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (window.app?.showNotification) {
            const message = `–¢–µ—Å—Ç "${testResult.name}": ${testResult.status}`;
            const type = testResult.status === 'passed' ? 'success' :
                testResult.status === 'warning' ? 'warning' : 'error';

            window.app.showNotification(message, type);
        }
    }

    // =======================================================
    // –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
    // =======================================================

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞
     */
    handleRuleUpdated(data) {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª–∞
        this.validationCache.clear();
        this.resultCache.clear();

        console.log('üìù Rule updated - validation cache cleared');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
     */
    handleComponentChange(data) {
        // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à —Ç–µ—Å—Ç–æ–≤
        this.validationCache.clear();
        this.resultCache.clear();

        console.log('üß© Component changed - test cache cleared');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
     */
    handleParameterChange(data) {
        // –û—á–∏—â–∞–µ–º –∫—ç—à –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        const nodeId = data.componentId;
        if (nodeId) {
            this.validationCache.delete(nodeId);
        }

        console.log('‚öôÔ∏è Parameter changed - component cache cleared');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É–∑–ª–æ–≤
     */
    handleNodeChange(data) {
        console.log('üé® Node changed - triggering validation update');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ canvas
     */
    handleCanvasCleared() {
        // –û—á–∏—â–∞–µ–º –≤—Å–µ –∫—ç—à–∏
        this.validationCache.clear();
        this.resultCache.clear();
        this.testDataCache.clear();

        console.log('üßπ Canvas cleared - all test caches cleared');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
     */
    handleDataSourceChange(dataSource) {
        console.log(`üìä Data source changed to: ${dataSource}`);

        // –û—á–∏—â–∞–µ–º –∫—ç—à –¥–∞–Ω–Ω—ã—Ö
        this.testDataCache.clear();

        // –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        const fileInput = document.getElementById('test-data-file');
        const uploadSection = document.querySelector('.file-upload-section');

        if (fileInput && uploadSection) {
            if (dataSource === 'upload') {
                uploadSection.style.display = 'block';
            } else {
                uploadSection.style.display = 'none';
            }
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
     */
    async handleFileUpload(file) {
        if (!file) return;

        console.log(`üìÅ Uploading test data file: ${file.name}`);

        try {
            const text = await file.text();
            let data;

            // –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
            try {
                data = JSON.parse(text);
            } catch {
                // –ï—Å–ª–∏ –Ω–µ JSON, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç
                data = text.split('\n').map((line, index) => ({
                    id: index,
                    content: line.trim(),
                    expectedMatch: false // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—É–¥–µ—Ç —É–∫–∞–∑–∞—Ç—å
                })).filter(item => item.content.length > 0);
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            this.testDataCache.set('uploaded', data);

            console.log(`‚úÖ Uploaded ${data.length} test data entries`);

        } catch (error) {
            console.error('‚ùå Error uploading file:', error);

            if (window.app?.showErrorNotification) {
                window.app.showErrorNotification(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${error.message}`);
            }
        }
    }

    // =======================================================
    // –°–û–•–†–ê–ù–ï–ù–ò–ï –ò –ò–°–¢–û–†–ò–Ø
    // =======================================================

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
     */
    saveTestResults(testSuite) {
        try {
            this.testResults.set(testSuite.id, testSuite);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ localStorage
            localStorage.setItem('test-manager-last-results', JSON.stringify(testSuite));

            console.log(`üíæ Test results saved: ${testSuite.id}`);

        } catch (error) {
            console.error('‚ùå Error saving test results:', error);
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
     */
    addToHistory(testSuite) {
        const historyEntry = {
            id: testSuite.id,
            timestamp: testSuite.timestamp,
            name: testSuite.name,
            results: testSuite.results,
            duration: testSuite.duration
        };

        this.testHistory.unshift(historyEntry);

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 50 –∑–∞–ø–∏—Å—è–º–∏
        if (this.testHistory.length > 50) {
            this.testHistory = this.testHistory.slice(0, 50);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        try {
            localStorage.setItem('test-manager-history', JSON.stringify(this.testHistory));
        } catch (error) {
            console.warn('‚ö†Ô∏è Error saving test history:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    updateTestMetrics(testSuite) {
        this.testMetrics.totalTests += testSuite.results.total;
        this.testMetrics.passedTests += testSuite.results.passed;
        this.testMetrics.failedTests += testSuite.results.failed;
        this.testMetrics.skippedTests += testSuite.results.skipped;

        const totalTime = this.testMetrics.totalTestTime + testSuite.duration;
        const totalTests = this.testMetrics.totalTests;

        this.testMetrics.avgTestTime = totalTests > 0 ? totalTime / totalTests : 0;
        this.testMetrics.totalTestTime = totalTime;
        this.testMetrics.lastTestTime = testSuite.timestamp;
    }

    // =======================================================
    // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –í–ê–õ–ò–î–ê–¶–ò–ò
    // =======================================================

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è IP –∞–¥—Ä–µ—Å–∞
     */
    validateIpAddress(params) {
        const address = params.address;
        if (!address) return false;

        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ IP –∞–¥—Ä–µ—Å–∞ –∏–ª–∏ CIDR
        const ipRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\/(?:[0-9]|[1-2][0-9]|3[0-2]))?$/;
        return ipRegex.test(address);
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–æ—Ä—Ç–æ–≤
     */
    validatePortRange(params) {
        const ports = params.ports;
        if (!ports) return false;

        const portRegex = /^(\d+(-\d+)?)(,\d+(-\d+)?)*$/;
        return portRegex.test(ports);
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ö–µ—à–∞ —Ñ–∞–π–ª–∞
     */
    validateFileHash(params) {
        const hashValue = params.hash_value;
        const hashType = params.hash_type;

        if (!hashValue || !hashType) return false;

        const hashRegex = {
            md5: /^[a-fA-F0-9]{32}$/,
            sha1: /^[a-fA-F0-9]{40}$/,
            sha256: /^[a-fA-F0-9]{64}$/
        };

        return hashRegex[hashType]?.test(hashValue) || false;
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
     */
    validateRegexPattern(params) {
        const pattern = params.pattern;
        if (!pattern) return false;

        try {
            new RegExp(pattern, params.flags || '');
            return true;
        } catch {
            return false;
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
     */
    validateStringMatch(params) {
        const string = params.string;
        return string && string.length > 0;
    }

    // =======================================================
    // –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ API
    // =======================================================

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    getTestMetrics() {
        return { ...this.testMetrics };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤
     */
    getTestHistory() {
        return [...this.testHistory];
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
     */
    getSupportedTestTypes() {
        return { ...this.testTypes };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    getTestSettings() {
        return { ...this.testSettings };
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    updateTestSettings(newSettings) {
        this.testSettings = { ...this.testSettings, ...newSettings };
        console.log('‚öôÔ∏è Test settings updated');
    }

    // =======================================================
    // –°–ò–°–¢–ï–ú–ê –°–û–ë–´–¢–ò–ô
    // =======================================================

    /**
     * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
     */
    on(event, handler) {
        if (!this.eventHandlers.has(event)) {
            this.eventHandlers.set(event, []);
        }
        this.eventHandlers.get(event).push(handler);
    }

    /**
     * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏—è
     */
    off(event, handler) {
        if (this.eventHandlers.has(event)) {
            const handlers = this.eventHandlers.get(event);
            const index = handlers.indexOf(handler);
            if (index > -1) {
                handlers.splice(index, 1);
            }
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è
     */
    emit(event, data) {
        if (this.eventHandlers.has(event)) {
            this.eventHandlers.get(event).forEach(handler => {
                try {
                    handler(data);
                } catch (error) {
                    console.error(`Error in event handler for ${event}:`, error);
                }
            });
        }
    }

    // =======================================================
    // –ú–ï–¢–û–î–´ –ñ–ò–ó–ù–ï–ù–ù–û–ì–û –¶–ò–ö–õ–ê
    // =======================================================

    /**
     * –ê–∫—Ç–∏–≤–∞—Ü–∏—è Test Manager
     */
    activate() {
        if (!this.isInitialized) {
            console.warn('‚ö†Ô∏è Test Manager not initialized');
            return;
        }

        console.log('üü¢ Test Manager activated');
        this.emit('activated');
    }

    /**
     * –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è Test Manager
     */
    deactivate() {
        // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω—è—é—â–∏–µ—Å—è —Ç–µ—Å—Ç—ã
        if (this.isTestRunning) {
            console.log('‚è∏Ô∏è Stopping running tests...');
            this.isTestRunning = false;
        }

        console.log('üü° Test Manager deactivated');
        this.emit('deactivated');
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    cleanup() {
        console.log('üßπ Cleaning up Test Manager...');

        try {
            // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç—ã
            this.isTestRunning = false;
            this.currentTest = null;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if (this.testResults.size > 0) {
                const lastResults = Array.from(this.testResults.values()).pop();
                this.saveTestResults(lastResults);
            }

            // –û—á–∏—â–∞–µ–º –∫—ç—à–∏
            this.validationCache.clear();
            this.testDataCache.clear();
            this.resultCache.clear();

            // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.eventHandlers.clear();
            this.testEventListeners.clear();

            // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            this.testResults.clear();

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.isInitialized = false;

            console.log('‚úÖ Test Manager cleanup completed');

        } catch (error) {
            console.error('‚ùå Error during Test Manager cleanup:', error);
        }
    }
}

// =======================================================
// –≠–ö–°–ü–û–†–¢ –ò –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø
// =======================================================

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è Test Manager
 */
function createTestManager(coreInstance, canvasManager, connectionManager, ruleGenerator) {
    return new TestManager(coreInstance, canvasManager, connectionManager, ruleGenerator);
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–¥—É–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        TestManager,
        createTestManager
    };
}

// ES6 —ç–∫—Å–ø–æ—Ä—Ç—ã
if (typeof window !== 'undefined') {
    window.TestManager = TestManager;
    window.createTestManager = createTestManager;

    // –î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π attack-constructor
    window.TestManagerExports = {
        TestManager,
        createTestManager,
        version: '4.0.0-Enhanced-Testing'
    };

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è HTML –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    window.testManager = null;
}

console.log('‚úÖ Test Manager v4.0.0-Enhanced loaded successfully');

/**
 * =======================================================
 * –ö–û–ù–ï–¶ –§–ê–ô–õ–ê test-manager.js
 * 
 * IP Roast Enterprise 4.0 - Test Manager Module
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∞–≤–∏–ª
 * –í–µ—Ä—Å–∏—è: 4.0.0-Enhanced-Testing
 * 
 * –ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - 8 —Ç–∏–ø–æ–≤ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤–∞–ª–∏–¥–∞—Ü–∏—è, —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –ª–æ–≥–∏–∫–∞, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Å–∏–º—É–ª—è—Ü–∏—è, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, FP-–∞–Ω–∞–ª–∏–∑, –ø–æ–∫—Ä—ã—Ç–∏–µ)
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * - –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –æ—Ç—á–µ—Ç–∞–º–∏
 * - –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∞–≤–∏–ª –Ω–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
 * - –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
 * - –û—Ü–µ–Ω–∫–∞ –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π –∏ –ø–æ–∫—Ä—ã—Ç–∏—è —É–≥—Ä–æ–∑
 * - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
 * - –ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π attack-constructor
 * - Enterprise-—É—Ä–æ–≤–µ–Ω—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ QA –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
 * =======================================================
 */
