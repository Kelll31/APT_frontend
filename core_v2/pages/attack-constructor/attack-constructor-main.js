/**
 * IP Roast Enterprise 4.0 - Attack Constructor Main Integration
 * –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –∞—Ç–∞–∫
 * Version: 4.1.0-Complete-Production
 */

console.log('üèóÔ∏è Loading Attack Constructor Complete System v4.1.0');

class AttackConstructorMainSystem {
    constructor() {
        this.version = '4.1.0-Complete-Production';
        this.modules = new Map();
        this.isInitialized = false;
        this.core = null;

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        this.state = {
            currentScenario: null,
            activeNodes: new Map(),
            connections: new Map(),
            selectedTool: null,
            isExecuting: false
        };

        console.log('üéØ Attack Constructor Main System initialized');
    }

    /**
     * –ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
     */
    async initialize() {
        try {
            console.log('üöÄ Starting complete system initialization...');

            // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Core –º–æ–¥—É–ª—è
            await this.initializeCore();

            // 2. –ó–∞–≥—Ä—É–∑–∫–∞ UI Manager
            await this.initializeUIManager();

            // 3. –ó–∞–≥—Ä—É–∑–∫–∞ Canvas Manager
            await this.initializeCanvasManager();

            // 4. –ó–∞–≥—Ä—É–∑–∫–∞ Connection Manager
            await this.initializeConnectionManager();

            // 5. –ó–∞–≥—Ä—É–∑–∫–∞ Signature Components
            await this.initializeSignatureComponents();

            // 6. –ó–∞–≥—Ä—É–∑–∫–∞ Rule Templates
            await this.initializeRuleTemplates();

            // 7. –ó–∞–≥—Ä—É–∑–∫–∞ Rule Generator
            await this.initializeRuleGenerator();

            // 8. –ó–∞–≥—Ä—É–∑–∫–∞ Test Manager
            await this.initializeTestManager();

            // 9. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
            this.integrateModules();

            // 10. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
            await this.setupUserInterface();

            this.isInitialized = true;
            console.log('‚úÖ Complete system initialization successful!');

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            this.notifySystemReady();

        } catch (error) {
            console.error('‚ùå System initialization failed:', error);
            throw error;
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Core –º–æ–¥—É–ª—è
     */
    async initializeCore() {
        console.log('üîß Initializing Core Module...');

        if (window.AttackConstructorCore) {
            this.core = new window.AttackConstructorCore();
            await this.core.initialize();
        } else if (window.signatureConstructor) {
            this.core = window.signatureConstructor;
        } else {
            throw new Error('Core module not available');
        }

        this.modules.set('core', this.core);
        console.log('‚úÖ Core Module initialized');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI Manager
     */
    async initializeUIManager() {
        console.log('üé® Initializing UI Manager...');

        const uiManager = new UIManager(this.core);
        await uiManager.initialize();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π
        uiManager.setupToolboxPanel();
        uiManager.setupPropertiesPanel();
        uiManager.setupResultsPanel();
        uiManager.setupMenuSystem();

        this.modules.set('uiManager', uiManager);
        console.log('‚úÖ UI Manager initialized');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Canvas Manager
     */
    async initializeCanvasManager() {
        console.log('üñºÔ∏è Initializing Canvas Manager...');

        const canvasManager = new CanvasManager('rule-canvas');
        await canvasManager.initialize();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ canvas
        canvasManager.setupGrid();
        canvasManager.setupZoomControls();
        canvasManager.setupDragAndDrop();

        this.modules.set('canvasManager', canvasManager);
        console.log('‚úÖ Canvas Manager initialized');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Connection Manager
     */
    async initializeConnectionManager() {
        console.log('üîó Initializing Connection Manager...');

        const connectionManager = new ConnectionManager(
            this.modules.get('canvasManager')
        );
        await connectionManager.initialize();

        this.modules.set('connectionManager', connectionManager);
        console.log('‚úÖ Connection Manager initialized');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Signature Components
     */
    async initializeSignatureComponents() {
        console.log('üì¶ Initializing Signature Components...');

        const sigComponents = new SignatureComponentsManager();
        await sigComponents.initialize();

        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞—Ç–∞–∫
        await sigComponents.loadAttackModules();

        this.modules.set('signatureComponents', sigComponents);
        console.log('‚úÖ Signature Components initialized');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Rule Templates
     */
    async initializeRuleTemplates() {
        console.log('üìã Initializing Rule Templates...');

        const ruleTemplates = new RuleTemplateManager();
        await ruleTemplates.initialize();

        // –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
        await ruleTemplates.loadTemplatesFromDirectory('./templates/');

        this.modules.set('ruleTemplates', ruleTemplates);
        console.log('‚úÖ Rule Templates initialized');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Rule Generator
     */
    async initializeRuleGenerator() {
        console.log('‚öôÔ∏è Initializing Rule Generator...');

        const ruleGenerator = new RuleGenerator(this.core);
        await ruleGenerator.initialize();

        this.modules.set('ruleGenerator', ruleGenerator);
        console.log('‚úÖ Rule Generator initialized');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Test Manager
     */
    async initializeTestManager() {
        console.log('üß™ Initializing Test Manager...');

        const testManager = new TestManager(this.core);
        await testManager.initialize();

        this.modules.set('testManager', testManager);
        console.log('‚úÖ Test Manager initialized');
    }

    /**
     * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
     */
    integrateModules() {
        console.log('üîó Integrating all modules...');

        const canvas = this.modules.get('canvasManager');
        const connections = this.modules.get('connectionManager');
        const ui = this.modules.get('uiManager');
        const components = this.modules.get('signatureComponents');

        // –°–≤—è–∑—ã–≤–∞–µ–º Canvas –∏ Connections
        canvas.setConnectionManager(connections);
        connections.setCanvas(canvas);

        // –°–≤—è–∑—ã–≤–∞–µ–º UI —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ –º–æ–¥—É–ª—è–º–∏
        ui.setCanvasManager(canvas);
        ui.setConnectionManager(connections);
        ui.setSignatureComponents(components);

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏
        this.setupModuleEventHandlers();

        console.log('‚úÖ Module integration completed');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏
     */
    setupModuleEventHandlers() {
        const canvas = this.modules.get('canvasManager');
        const ui = this.modules.get('uiManager');
        const components = this.modules.get('signatureComponents');

        // –°–æ–±—ã—Ç–∏—è Canvas -> UI
        canvas.on('nodeSelected', (node) => {
            ui.updatePropertiesPanel(node);
        });

        canvas.on('nodeAdded', (node) => {
            ui.updateNodeCount();
        });

        // –°–æ–±—ã—Ç–∏—è UI -> Canvas
        ui.on('toolSelected', (tool) => {
            canvas.setActiveTool(tool);
        });

        // –°–æ–±—ã—Ç–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        components.on('componentDropped', (component, position) => {
            canvas.addNode(component, position);
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    async setupUserInterface() {
        console.log('üé® Setting up user interface...');

        const ui = this.modules.get('uiManager');
        const components = this.modules.get('signatureComponents');
        const templates = this.modules.get('ruleTemplates');

        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        await ui.populateToolbox(components.getAllComponents());

        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤
        await ui.populateTemplates(templates.getAllTemplates());

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
        ui.setupActionMenu([
            {
                id: 'new-scenario',
                label: '–ù–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π',
                action: () => this.createNewScenario()
            },
            {
                id: 'save-scenario',
                label: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π',
                action: () => this.saveCurrentScenario()
            },
            {
                id: 'load-scenario',
                label: '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π',
                action: () => this.loadScenario()
            },
            {
                id: 'execute-scenario',
                label: '–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π',
                action: () => this.executeScenario()
            }
        ]);

        console.log('‚úÖ User interface setup completed');
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –∞—Ç–∞–∫
     */
    createNewScenario() {
        console.log('üìã Creating new attack scenario...');

        const canvas = this.modules.get('canvasManager');
        canvas.clearCanvas();

        this.state.currentScenario = {
            id: `scenario_${Date.now()}`,
            name: '–ù–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∞—Ç–∞–∫',
            description: '',
            created: new Date(),
            modules: [],
            connections: []
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        const ui = this.modules.get('uiManager');
        ui.updateScenarioInfo(this.state.currentScenario);
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
     */
    async saveCurrentScenario() {
        console.log('üíæ Saving current scenario...');

        if (!this.state.currentScenario) {
            alert('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            return;
        }

        const canvas = this.modules.get('canvasManager');
        const connections = this.modules.get('connectionManager');

        // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
        const scenarioData = {
            ...this.state.currentScenario,
            modules: canvas.getAllNodes(),
            connections: connections.getAllConnections(),
            savedAt: new Date()
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage (–≤ production –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API)
        const scenarioKey = `attack_scenario_${scenarioData.id}`;
        localStorage.setItem(scenarioKey, JSON.stringify(scenarioData));

        alert('–°—Ü–µ–Ω–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –∞—Ç–∞–∫
     */
    async executeScenario() {
        console.log('üöÄ Executing attack scenario...');

        if (this.state.isExecuting) {
            alert('–°—Ü–µ–Ω–∞—Ä–∏–π —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
            return;
        }

        const canvas = this.modules.get('canvasManager');
        const testManager = this.modules.get('testManager');
        const ui = this.modules.get('uiManager');

        const nodes = canvas.getAllNodes();
        if (nodes.length === 0) {
            alert('–î–æ–±–∞–≤—å—Ç–µ –º–æ–¥—É–ª–∏ –∞—Ç–∞–∫ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–π');
            return;
        }

        try {
            this.state.isExecuting = true;
            ui.showExecutionProgress();

            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
            const validation = await this.validateScenario();
            if (!validation.isValid) {
                throw new Error(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${validation.errors.join(', ')}`);
            }

            // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Test Manager
            const results = await testManager.executeScenario({
                nodes,
                connections: this.modules.get('connectionManager').getAllConnections()
            });

            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            ui.displayExecutionResults(results);

        } catch (error) {
            console.error('‚ùå Scenario execution failed:', error);
            alert(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${error.message}`);
        } finally {
            this.state.isExecuting = false;
            ui.hideExecutionProgress();
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
     */
    async validateScenario() {
        const canvas = this.modules.get('canvasManager');
        const connections = this.modules.get('connectionManager');

        const validation = {
            isValid: true,
            errors: [],
            warnings: []
        };

        const nodes = canvas.getAllNodes();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —É–∑–ª–æ–≤
        if (nodes.length === 0) {
            validation.errors.push('–°—Ü–µ–Ω–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–æ–¥—É–ª—å');
            validation.isValid = false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É–∑–ª–æ–≤
        for (const node of nodes) {
            if (!node.isConfigured) {
                validation.errors.push(`–ú–æ–¥—É–ª—å "${node.name}" –Ω–µ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω`);
                validation.isValid = false;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π
        const nodeConnections = connections.getAllConnections();
        if (nodes.length > 1 && nodeConnections.length === 0) {
            validation.warnings.push('–ú–æ–¥—É–ª–∏ –Ω–µ —Å–≤—è–∑–∞–Ω—ã –º–µ–∂–¥—É —Å–æ–±–æ–π');
        }

        return validation;
    }

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
     */
    notifySystemReady() {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        const event = new CustomEvent('attackConstructorSystemReady', {
            detail: {
                version: this.version,
                modules: Array.from(this.modules.keys()),
                timestamp: Date.now()
            }
        });

        document.dispatchEvent(event);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (window.app?.showSuccessNotification) {
            window.app.showSuccessNotification(
                '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∞—Ç–∞–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!'
            );
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
     */
    getSystemStatus() {
        return {
            version: this.version,
            isInitialized: this.isInitialized,
            modules: Object.fromEntries(
                Array.from(this.modules.entries()).map(([name, module]) => [
                    name,
                    {
                        loaded: !!module,
                        initialized: module.isInitialized || false
                    }
                ])
            ),
            state: this.state
        };
    }
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.attackConstructorMainSystem = new AttackConstructorMainSystem();

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', async () => {
    try {
        await window.attackConstructorMainSystem.initialize();
    } catch (error) {
        console.error('Failed to initialize Attack Constructor System:', error);
    }
});
