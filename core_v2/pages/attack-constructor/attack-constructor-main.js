/**
 * Attack Constructor Main Integration Module
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏ Attack Constructor –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ SPA
 * Version: 2.0.0-SPA-Ready
 */

class AttackConstructorApp {
    constructor() {
        this.version = '2.0.0-SPA-Ready';
        this.modules = new Map();
        this.isInitialized = false;
        this.initPromise = null;

        console.log(`üéØ Attack Constructor App v${this.version} —Å–æ–∑–¥–∞–Ω`);
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
     */
    async initialize() {
        if (this.initPromise) {
            return this.initPromise;
        }

        if (this.isInitialized) {
            console.log('‚úÖ Attack Constructor —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return true;
        }

        this.initPromise = this._performInitialization();
        return this.initPromise;
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
     */
    async _performInitialization() {
        try {
            console.log('üöÄ –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Attack Constructor...');

            // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º Core (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –º–æ–¥—É–ª—å)
            await this.loadCoreModule();

            // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º UI Manager –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            await this.loadUIManager();

            // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º Canvas Manager –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            await this.loadCanvasManager();

            // 4. –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
            await this.loadSupportingModules();

            // 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            await this.initializeModules();

            // 6. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∏
            this.setupModuleConnections();

            this.isInitialized = true;
            console.log('‚úÖ Attack Constructor –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

            // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            this.emit('initialized');

            return true;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Attack Constructor:', error);
            this.isInitialized = false;
            throw error;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ Core –º–æ–¥—É–ª—è
     */
    async loadCoreModule() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫—Ä–∏–ø—Ç –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
            if (!window.SignatureAnalysisConstructor) {
                await this.loadScript('./pages/attack-constructor/attack-constructor-core.js');
            }

            if (window.SignatureAnalysisConstructor) {
                const core = new window.SignatureAnalysisConstructor();
                this.modules.set('core', core);
                console.log('‚úÖ Core –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω');
            } else {
                throw new Error('SignatureAnalysisConstructor –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Core –º–æ–¥—É–ª—è:', error);
            throw error;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ UI Manager
     */
    async loadUIManager() {
        try {
            if (!window.UIManager) {
                await this.loadScript('./pages/attack-constructor/ui-manager.js');
            }

            if (window.UIManager) {
                const uiManager = new window.UIManager();
                this.modules.set('ui', uiManager);
                console.log('‚úÖ UI Manager –∑–∞–≥—Ä—É–∂–µ–Ω');
            } else {
                throw new Error('UIManager –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ UI Manager:', error);
            throw error;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ Canvas Manager
     */
    async loadCanvasManager() {
        try {
            if (!window.CanvasManager) {
                await this.loadScript('./pages/attack-constructor/canvas-manager.js');
            }

            if (window.CanvasManager) {
                const canvasManager = new window.CanvasManager();
                this.modules.set('canvas', canvasManager);
                console.log('‚úÖ Canvas Manager –∑–∞–≥—Ä—É–∂–µ–Ω');
            } else {
                throw new Error('CanvasManager –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Canvas Manager:', error);
            throw error;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö –º–æ–¥—É–ª–µ–π
     */
    async loadSupportingModules() {
        const moduleConfigs = [
            { key: 'connection', file: 'connection-manager.js', className: 'ConnectionManager' },
            { key: 'rules', file: 'rule-generator.js', className: 'RuleGenerator' },
            { key: 'templates', file: 'rule-templates.js', className: 'RuleTemplateManager' },
            { key: 'components', file: 'signature-components.js', className: 'SignatureComponentsManager' },
            { key: 'test', file: 'test-manager.js', className: 'TestManager' }
        ];

        for (const config of moduleConfigs) {
            try {
                if (!window[config.className]) {
                    await this.loadScript(`./pages/attack-constructor/${config.file}`);
                }

                if (window[config.className]) {
                    const instance = new window[config.className]();
                    this.modules.set(config.key, instance);
                    console.log(`‚úÖ ${config.className} –∑–∞–≥—Ä—É–∂–µ–Ω`);
                } else {
                    console.warn(`‚ö†Ô∏è ${config.className} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                }
            } catch (error) {
                console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${config.className}:`, error);
            }
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
     */
    async initializeModules() {
        const initOrder = ['core', 'ui', 'canvas', 'connection', 'components', 'templates', 'rules', 'test'];

        for (const moduleKey of initOrder) {
            const module = this.modules.get(moduleKey);
            if (module && typeof module.initialize === 'function') {
                try {
                    await module.initialize();
                    console.log(`‚úÖ –ú–æ–¥—É–ª—å ${moduleKey} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`);
                } catch (error) {
                    console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è ${moduleKey}:`, error);
                }
            }
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏
     */
    setupModuleConnections() {
        const core = this.modules.get('core');
        if (!core) return;

        // –°–≤—è–∑—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏ —Å Core
        this.modules.forEach((module, key) => {
            if (key !== 'core' && module) {
                core[key + 'Manager'] = module;
                if (module.setCore && typeof module.setCore === 'function') {
                    module.setCore(core);
                }
            }
        });

        console.log('üîó –°–≤—è–∑–∏ –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    /**
     * –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
     */
    loadScript(src) {
        return new Promise((resolve, reject) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —É–∂–µ —Å–∫—Ä–∏–ø—Ç
            const existingScript = document.querySelector(`script[src="${src}"]`);
            if (existingScript) {
                resolve();
                return;
            }

            const script = document.createElement('script');
            script.src = src;
            script.async = true;

            script.onload = () => {
                console.log(`üìÑ –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: ${src}`);
                resolve();
            };

            script.onerror = (error) => {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞: ${src}`, error);
                reject(new Error(`Failed to load script: ${src}`));
            };

            document.head.appendChild(script);
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥—É–ª—è
     */
    getModule(key) {
        return this.modules.get(key);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ Core –º–æ–¥—É–ª—è
     */
    getCore() {
        return this.modules.get('core');
    }

    /**
     * –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π
     */
    emit(event, data) {
        const customEvent = new CustomEvent(`attackConstructor:${event}`, {
            detail: { ...data, app: this }
        });
        document.dispatchEvent(customEvent);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
     */
    getStatus() {
        return {
            version: this.version,
            isInitialized: this.isInitialized,
            modules: Array.from(this.modules.keys()),
            moduleCount: this.modules.size
        };
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ
     */
    async destroy() {
        console.log('üóëÔ∏è –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ Attack Constructor App...');

        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏
        for (const [key, module] of this.modules) {
            if (module && typeof module.destroy === 'function') {
                try {
                    await module.destroy();
                } catch (error) {
                    console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –º–æ–¥—É–ª—è ${key}:`, error);
                }
            }
        }

        this.modules.clear();
        this.isInitialized = false;
        this.initPromise = null;

        console.log('‚úÖ Attack Constructor App —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è SPA
let attackConstructorApp = null;

async function initializeAttackConstructor() {
    if (attackConstructorApp) {
        console.log('‚úÖ Attack Constructor —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return attackConstructorApp;
    }

    try {
        attackConstructorApp = new AttackConstructorApp();
        await attackConstructorApp.initialize();

        // –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ
        window.attackConstructorApp = attackConstructorApp;

        return attackConstructorApp;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Attack Constructor:', error);
        throw error;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è ES6 –º–æ–¥—É–ª–µ–π
export { AttackConstructorApp, initializeAttackConstructor };

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è legacy –∫–æ–¥–∞
window.AttackConstructorApp = AttackConstructorApp;
window.initializeAttackConstructor = initializeAttackConstructor;

// –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        console.log('üìÑ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, Attack Constructor –≥–æ—Ç–æ–≤ –∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
    });
} else {
    console.log('üìÑ DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, Attack Constructor –≥–æ—Ç–æ–≤ –∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
}

console.log('‚úÖ Attack Constructor Main –∑–∞–≥—Ä—É–∂–µ–Ω');
