/**
 * IP Roast Enterprise 4.0 - Canvas Manager Module
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ canvas –æ–±–ª–∞—Å—Ç—å—é –¥–ª—è drag & drop –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª
 * –í–µ—Ä—Å–∏—è: 4.0.0-Enhanced-Canvas
 * 
 * @description –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è canvas –∏ —É–∑–ª–∞–º–∏
 * @author IP Roast Security Team
 * @requires attack-constructor-core.js
 * @integrates signature-components, connection-manager
 */

console.log('üé® Loading Canvas Manager v4.0.0-Enhanced');

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Canvas
 */
class CanvasManager {
    constructor(coreInstance) {
        this.version = '4.0.0-Enhanced-Canvas';
        this.core = coreInstance;
        this.isInitialized = false;

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ canvas
        this.canvasElement = null;
        this.canvasNodes = new Map();
        this.selectedNodes = new Set();
        this.isDragging = false;
        this.draggedNode = null;

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ canvas
        this.gridSize = 20;
        this.snapToGrid = true;
        this.canvasScale = 1.0;
        this.canvasOffset = { x: 0, y: 0 };
        this.minZoom = 0.25;
        this.maxZoom = 3.0;

        // –°—á–µ—Ç—á–∏–∫–∏ –∏ ID
        this.nextNodeId = 1;
        this.nodeIdPrefix = 'canvas-node';

        // –°–æ–±—ã—Ç–∏—è
        this.eventHandlers = new Map();
        this.nodeEventListeners = new Map();

        // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        this.performanceMode = false;
        this.maxNodes = 100;
        this.renderQueue = [];

        console.log('üé® Canvas Manager initialized');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Canvas Manager
     */
    async initialize() {
        try {
            console.log('üöÄ Initializing Canvas Manager...');

            await this.setupCanvas();
            this.bindCanvasEvents();
            this.setupGridSystem();
            this.initializeGestures();

            this.isInitialized = true;
            console.log('‚úÖ Canvas Manager initialized successfully');

        } catch (error) {
            console.error('‚ùå Canvas Manager initialization failed:', error);
            throw error;
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ canvas —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    async setupCanvas() {
        this.canvasElement = document.getElementById('rule-canvas');
        if (!this.canvasElement) {
            throw new Error('Canvas element not found');
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏
        this.applyCanvasStyles();

        // –°–æ–∑–¥–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–∏
        this.createCanvasLayers();

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.resetCanvasState();

        console.log('üé® Canvas setup completed');
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Å—Ç–∏–ª–µ–π –∫ canvas
     */
    applyCanvasStyles() {
        const canvas = this.canvasElement;

        Object.assign(canvas.style, {
            position: 'relative',
            overflow: 'auto',
            userSelect: 'none',
            cursor: 'default',
            background: 'var(--color-background)',
            minHeight: '400px'
        });

        // –î–æ–±–∞–≤–ª—è–µ–º CSS –∫–ª–∞—Å—Å—ã
        canvas.classList.add('canvas-manager', 'drop-zone');
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–ª–æ–µ–≤ canvas
     */
    createCanvasLayers() {
        // –°–ª–æ–π —Å–µ—Ç–∫–∏
        this.gridLayer = this.createCanvasLayer('grid-layer', 1);

        // –°–ª–æ–π –¥–ª—è —É–∑–ª–æ–≤
        this.nodeLayer = this.createCanvasLayer('node-layer', 10);

        // –°–ª–æ–π –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
        this.selectionLayer = this.createCanvasLayer('selection-layer', 20);

        // –°–ª–æ–π –¥–ª—è drag preview
        this.previewLayer = this.createCanvasLayer('preview-layer', 30);

        console.log('üóÇÔ∏è Canvas layers created');
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–ª–æ—è canvas
     */
    createCanvasLayer(className, zIndex) {
        const layer = document.createElement('div');
        layer.className = className;
        layer.style.cssText = `
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: ${className === 'node-layer' ? 'auto' : 'none'};
            z-index: ${zIndex};
        `;

        this.canvasElement.appendChild(layer);
        return layer;
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Å–µ—Ç–∫–∏
     */
    setupGridSystem() {
        if (this.snapToGrid) {
            this.renderGrid();
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
        const resizeObserver = new ResizeObserver(() => {
            if (this.snapToGrid) {
                this.renderGrid();
            }
        });

        resizeObserver.observe(this.canvasElement);
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–µ—Ç–∫–∏
     */
    renderGrid() {
        const canvas = this.canvasElement;
        const gridSize = this.gridSize;

        // –°–æ–∑–¥–∞–µ–º SVG –¥–ª—è —Å–µ—Ç–∫–∏
        let gridSvg = this.gridLayer.querySelector('.grid-svg');
        if (!gridSvg) {
            gridSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
            gridSvg.className = 'grid-svg';
            gridSvg.style.cssText = `
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                pointer-events: none;
            `;
            this.gridLayer.appendChild(gridSvg);
        }

        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–µ—Ç–∫—É
        gridSvg.innerHTML = '';

        const width = canvas.clientWidth;
        const height = canvas.clientHeight;

        // –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Å–µ—Ç–∫–∏
        const defs = document.createElementNS('http://www.w3.org/2000/svg', 'defs');
        const pattern = document.createElementNS('http://www.w3.org/2000/svg', 'pattern');

        pattern.id = 'grid-pattern';
        pattern.setAttribute('width', gridSize);
        pattern.setAttribute('height', gridSize);
        pattern.setAttribute('patternUnits', 'userSpaceOnUse');

        const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
        path.setAttribute('d', `M ${gridSize} 0 L 0 0 0 ${gridSize}`);
        path.setAttribute('fill', 'none');
        path.setAttribute('stroke', 'var(--color-border-light)');
        path.setAttribute('stroke-width', '1');
        path.setAttribute('opacity', '0.3');

        pattern.appendChild(path);
        defs.appendChild(pattern);
        gridSvg.appendChild(defs);

        const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
        rect.setAttribute('width', '100%');
        rect.setAttribute('height', '100%');
        rect.setAttribute('fill', 'url(#grid-pattern)');

        gridSvg.appendChild(rect);
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π canvas
     */
    bindCanvasEvents() {
        const canvas = this.canvasElement;

        // Drag & Drop —Å–æ–±—ã—Ç–∏—è
        canvas.addEventListener('dragover', this.handleDragOver.bind(this));
        canvas.addEventListener('drop', this.handleDrop.bind(this));
        canvas.addEventListener('dragenter', this.handleDragEnter.bind(this));
        canvas.addEventListener('dragleave', this.handleDragLeave.bind(this));

        // Mouse —Å–æ–±—ã—Ç–∏—è
        canvas.addEventListener('mousedown', this.handleMouseDown.bind(this));
        canvas.addEventListener('mousemove', this.handleMouseMove.bind(this));
        canvas.addEventListener('mouseup', this.handleMouseUp.bind(this));
        canvas.addEventListener('click', this.handleClick.bind(this));
        canvas.addEventListener('contextmenu', this.handleContextMenu.bind(this));

        // Keyboard —Å–æ–±—ã—Ç–∏—è
        document.addEventListener('keydown', this.handleKeyDown.bind(this));
        document.addEventListener('keyup', this.handleKeyUp.bind(this));

        // Wheel –¥–ª—è –∑—É–º–∞
        canvas.addEventListener('wheel', this.handleWheel.bind(this), { passive: false });

        console.log('‚ö° Canvas events bound');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∂–µ—Å—Ç–æ–≤ –¥–ª—è touch —É—Å—Ç—Ä–æ–π—Å—Ç–≤
     */
    initializeGestures() {
        const canvas = this.canvasElement;

        // Touch —Å–æ–±—ã—Ç–∏—è
        canvas.addEventListener('touchstart', this.handleTouchStart.bind(this), { passive: false });
        canvas.addEventListener('touchmove', this.handleTouchMove.bind(this), { passive: false });
        canvas.addEventListener('touchend', this.handleTouchEnd.bind(this), { passive: false });

        // –ñ–µ—Å—Ç—ã –¥–ª—è –∑—É–º–∞ –∏ –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è
        this.gestureState = {
            isGesturing: false,
            initialDistance: 0,
            initialScale: 1,
            touches: []
        };

        console.log('üëÜ Touch gestures initialized');
    }

    /**
     * –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è canvas
     */
    resetCanvasState() {
        this.clearCanvas();
        this.showEmptyState();
        this.canvasScale = 1.0;
        this.canvasOffset = { x: 0, y: 0 };
    }

    /**
     * –ü–æ–∫–∞–∑ –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    showEmptyState() {
        let emptyState = this.canvasElement.querySelector('.canvas-empty-state');

        if (!emptyState) {
            emptyState = document.createElement('div');
            emptyState.className = 'canvas-empty-state';
            emptyState.innerHTML = `
                <div class="empty-content">
                    <div class="empty-icon">üéØ</div>
                    <h4>–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞</h4>
                    <p>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –≤ —ç—Ç—É –æ–±–ª–∞—Å—Ç—å</p>
                    <div class="empty-tips">
                        <div class="tip-item">
                            <span class="tip-icon">üí°</span>
                            <span>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ drag & drop –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</span>
                        </div>
                        <div class="tip-item">
                            <span class="tip-icon">üîó</span>
                            <span>–°–æ–µ–¥–∏–Ω—è–π—Ç–µ —É–∑–ª—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Å–≤—è–∑–µ–π</span>
                        </div>
                    </div>
                </div>
            `;

            emptyState.style.cssText = `
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                text-align: center;
                color: var(--color-text-secondary);
                pointer-events: none;
                z-index: 5;
            `;

            this.canvasElement.appendChild(emptyState);
        }

        emptyState.style.display = 'flex';
    }

    /**
     * –°–∫—Ä—ã—Ç–∏–µ –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    hideEmptyState() {
        const emptyState = this.canvasElement.querySelector('.canvas-empty-state');
        if (emptyState) {
            emptyState.style.display = 'none';
        }
    }

    // =======================================================
    // –£–ü–†–ê–í–õ–ï–ù–ò–ï –£–ó–õ–ê–ú–ò
    // =======================================================

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–∞ canvas
     */
    addComponent(componentId, x, y, parameters = {}) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            const componentDef = this.core?.signatureComponents?.get(componentId);
            if (!componentDef) {
                throw new Error(`Component definition not found: ${componentId}`);
            }

            // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Å–µ—Ç–∫–µ
            const position = this.snapToGrid ?
                this.snapPositionToGrid(x, y) :
                { x, y };

            // –°–æ–∑–¥–∞–µ–º —É–∑–µ–ª
            const nodeId = this.generateNodeId();
            const node = this.createNodeData(nodeId, componentId, componentDef, position, parameters);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–∑–µ–ª
            this.canvasNodes.set(nodeId, node);

            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —É–∑–µ–ª
            const nodeElement = this.renderNode(node);

            // –°–∫—Ä—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.hideEmptyState();

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
            this.emit('nodeAdded', { nodeId, node, element: nodeElement });

            console.log(`üì¶ Added component ${componentId} as node ${nodeId}`);
            return { nodeId, node, element: nodeElement };

        } catch (error) {
            console.error('‚ùå Error adding component to canvas:', error);
            throw error;
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É–∑–ª–∞
     */
    createNodeData(nodeId, componentId, componentDef, position, parameters = {}) {
        return {
            id: nodeId,
            componentId,
            definition: componentDef,
            position: { ...position },
            parameters: { ...this.getDefaultParameters(componentDef), ...parameters },
            metadata: {
                created: new Date().toISOString(),
                updated: new Date().toISOString(),
                version: '1.0'
            },
            style: {
                width: 220,
                height: 100,
                zIndex: 10
            },
            state: {
                selected: false,
                dragging: false,
                valid: true
            }
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    getDefaultParameters(componentDef) {
        const params = {};
        Object.entries(componentDef.parameters || {}).forEach(([key, config]) => {
            params[key] = config.default !== undefined ? config.default : '';
        });
        return params;
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —É–∑–ª–∞
     */
    renderNode(node) {
        const nodeElement = document.createElement('div');
        nodeElement.className = 'canvas-node';
        nodeElement.id = node.id;
        nodeElement.dataset.componentId = node.componentId;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
        this.applyNodeStyles(nodeElement, node);

        // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–∑–ª–∞
        this.renderNodeContent(nodeElement, node);

        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        this.bindNodeEvents(nodeElement, node);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–π —É–∑–ª–æ–≤
        this.nodeLayer.appendChild(nodeElement);

        return nodeElement;
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –∫ —É–∑–ª—É
     */
    applyNodeStyles(element, node) {
        const { position, style } = node;

        Object.assign(element.style, {
            position: 'absolute',
            left: `${position.x}px`,
            top: `${position.y}px`,
            width: `${style.width}px`,
            minHeight: `${style.height}px`,
            background: 'var(--color-surface-elevated)',
            border: '2px solid var(--color-border)',
            borderRadius: 'var(--radius-lg)',
            padding: 'var(--space-12)',
            cursor: 'move',
            boxShadow: 'var(--shadow-md)',
            transition: 'var(--transition-all)',
            zIndex: style.zIndex,
            overflow: 'hidden'
        });
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —É–∑–ª–∞
     */
    renderNodeContent(element, node) {
        const { definition } = node;

        element.innerHTML = `
            <div class="node-header">
                <div class="node-icon">${definition.icon}</div>
                <div class="node-title">${definition.name}</div>
                <div class="node-actions">
                    <button class="node-action-btn config-btn" data-action="configure" title="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å">
                        ‚öôÔ∏è
                    </button>
                    <button class="node-action-btn delete-btn" data-action="delete" title="–£–¥–∞–ª–∏—Ç—å">
                        üóëÔ∏è
                    </button>
                </div>
            </div>
            <div class="node-content">
                <div class="node-description">${definition.description}</div>
                <div class="node-type-badge" data-type="${definition.type}">
                    ${definition.type}
                </div>
            </div>
            <div class="node-connections">
                <div class="connection-point input" data-type="input"></div>
                <div class="connection-point output" data-type="output"></div>
            </div>
        `;
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫ —É–∑–ª—É
     */
    bindNodeEvents(element, node) {
        const nodeEventHandler = {
            mousedown: this.handleNodeMouseDown.bind(this, node),
            click: this.handleNodeClick.bind(this, node),
            contextmenu: this.handleNodeContextMenu.bind(this, node),
            dragstart: (e) => e.preventDefault() // –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π drag
        };

        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        Object.entries(nodeEventHandler).forEach(([event, handler]) => {
            element.addEventListener(event, handler);
        });

        // –°–æ–±—ã—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
        element.querySelector('.config-btn')?.addEventListener('click', (e) => {
            e.stopPropagation();
            this.configureNode(node.id);
        });

        element.querySelector('.delete-btn')?.addEventListener('click', (e) => {
            e.stopPropagation();
            this.deleteNode(node.id);
        });

        // –°–æ–±—ã—Ç–∏—è —Ç–æ—á–µ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        element.querySelectorAll('.connection-point').forEach(point => {
            point.addEventListener('mousedown', (e) => {
                e.stopPropagation();
                this.handleConnectionStart(node.id, point.dataset.type, e);
            });
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        this.nodeEventListeners.set(node.id, nodeEventHandler);
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID —É–∑–ª–∞
     */
    generateNodeId() {
        return `${this.nodeIdPrefix}-${this.nextNodeId++}`;
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –∫ —Å–µ—Ç–∫–µ
     */
    snapPositionToGrid(x, y) {
        return {
            x: Math.round(x / this.gridSize) * this.gridSize,
            y: Math.round(y / this.gridSize) * this.gridSize
        };
    }

    // =======================================================
    // –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô DRAG & DROP
    // =======================================================

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ dragover
     */
    handleDragOver(event) {
        event.preventDefault();
        event.dataTransfer.dropEffect = 'copy';

        this.canvasElement.classList.add('drag-over');
        this.showDropPreview(event);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ drop
     */
    handleDrop(event) {
        event.preventDefault();

        try {
            this.canvasElement.classList.remove('drag-over');
            this.hideDropPreview();

            const componentId = event.dataTransfer.getData('text/plain');
            if (!componentId) {
                console.warn('‚ö†Ô∏è No component data in drop event');
                return;
            }

            const rect = this.canvasElement.getBoundingClientRect();
            const x = event.clientX - rect.left;
            const y = event.clientY - rect.top;

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
            const result = this.addComponent(componentId, x, y);

            console.log(`‚úÖ Dropped component ${componentId} at (${x}, ${y})`);
            return result;

        } catch (error) {
            console.error('‚ùå Error handling drop:', error);
            this.showError('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞');
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ dragenter
     */
    handleDragEnter(event) {
        event.preventDefault();
        this.canvasElement.classList.add('drag-over');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ dragleave
     */
    handleDragLeave(event) {
        if (!this.canvasElement.contains(event.relatedTarget)) {
            this.canvasElement.classList.remove('drag-over');
            this.hideDropPreview();
        }
    }

    /**
     * –ü–æ–∫–∞–∑ –ø—Ä–µ–≤—å—é –ø—Ä–∏ drop
     */
    showDropPreview(event) {
        let preview = this.previewLayer.querySelector('.drop-preview');

        if (!preview) {
            preview = document.createElement('div');
            preview.className = 'drop-preview';
            preview.style.cssText = `
                position: absolute;
                width: 220px;
                height: 100px;
                border: 2px dashed var(--color-primary);
                border-radius: var(--radius-lg);
                background: rgba(var(--color-primary-rgb), 0.1);
                pointer-events: none;
                opacity: 0.7;
                transition: var(--transition-all);
            `;
            this.previewLayer.appendChild(preview);
        }

        const rect = this.canvasElement.getBoundingClientRect();
        let x = event.clientX - rect.left - 110; // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –∫—É—Ä—Å–æ—Ä—É
        let y = event.clientY - rect.top - 50;

        // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Å–µ—Ç–∫–µ
        if (this.snapToGrid) {
            const snapped = this.snapPositionToGrid(x + 110, y + 50);
            x = snapped.x - 110;
            y = snapped.y - 50;
        }

        preview.style.left = `${x}px`;
        preview.style.top = `${y}px`;
        preview.style.display = 'block';
    }

    /**
     * –°–∫—Ä—ã—Ç–∏–µ –ø—Ä–µ–≤—å—é drop
     */
    hideDropPreview() {
        const preview = this.previewLayer.querySelector('.drop-preview');
        if (preview) {
            preview.style.display = 'none';
        }
    }

    // =======================================================
    // –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô –£–ó–õ–û–í
    // =======================================================

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ mousedown —É–∑–ª–∞
     */
    handleNodeMouseDown(node, event) {
        if (event.target.closest('.node-actions')) return;

        event.preventDefault();

        this.startNodeDrag(node, event);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —É–∑–ª—É
     */
    handleNodeClick(node, event) {
        if (event.target.closest('.node-actions')) return;

        event.stopPropagation();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        if (event.ctrlKey || event.metaKey) {
            this.toggleNodeSelection(node.id);
        } else {
            this.selectNode(node.id);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é —É–∑–ª–∞
     */
    handleNodeContextMenu(node, event) {
        event.preventDefault();
        this.showNodeContextMenu(node.id, event.clientX, event.clientY);
    }

    /**
     * –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è —É–∑–ª–∞
     */
    startNodeDrag(node, event) {
        this.isDragging = true;
        this.draggedNode = node;

        const element = document.getElementById(node.id);
        const rect = element.getBoundingClientRect();

        this.dragOffset = {
            x: event.clientX - rect.left,
            y: event.clientY - rect.top
        };

        // –í–∏–∑—É–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        element.style.zIndex = '100';
        element.style.opacity = '0.8';
        element.style.cursor = 'grabbing';

        // –ï—Å–ª–∏ —É–∑–µ–ª –Ω–µ –≤—ã–±—Ä–∞–Ω, –≤—ã–±–∏—Ä–∞–µ–º –µ–≥–æ
        if (!node.state.selected) {
            this.selectNode(node.id);
        }

        node.state.dragging = true;

        console.log(`üñ±Ô∏è Started dragging node ${node.id}`);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è —É–∑–ª–∞
     */
    updateNodeDrag(event) {
        if (!this.isDragging || !this.draggedNode) return;

        const canvas = this.canvasElement;
        const canvasRect = canvas.getBoundingClientRect();

        let x = event.clientX - canvasRect.left - this.dragOffset.x;
        let y = event.clientY - canvasRect.top - this.dragOffset.y;

        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ canvas
        x = Math.max(0, Math.min(x, canvas.clientWidth - this.draggedNode.style.width));
        y = Math.max(0, Math.min(y, canvas.clientHeight - this.draggedNode.style.height));

        // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Å–µ—Ç–∫–µ
        if (this.snapToGrid) {
            const snapped = this.snapPositionToGrid(x, y);
            x = snapped.x;
            y = snapped.y;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        this.updateNodePosition(this.draggedNode.id, x, y);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å connection manager)
        this.emit('nodePositionChanged', {
            nodeId: this.draggedNode.id,
            position: { x, y }
        });
    }

    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è —É–∑–ª–∞
     */
    endNodeDrag() {
        if (!this.isDragging || !this.draggedNode) return;

        const element = document.getElementById(this.draggedNode.id);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∏–ª–∏
        element.style.zIndex = this.draggedNode.style.zIndex;
        element.style.opacity = '1';
        element.style.cursor = 'move';

        this.draggedNode.state.dragging = false;

        console.log(`‚úÖ Finished dragging node ${this.draggedNode.id}`);

        this.isDragging = false;
        this.draggedNode = null;
        this.dragOffset = null;
    }

    // =======================================================
    // –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–´–ë–û–†–û–ú –£–ó–õ–û–í
    // =======================================================

    /**
     * –í—ã–±–æ—Ä —É–∑–ª–∞
     */
    selectNode(nodeId) {
        // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏—Ö —É–∑–ª–æ–≤
        this.clearNodeSelection();

        // –í—ã–±–∏—Ä–∞–µ–º —É–∑–µ–ª
        this.addNodeToSelection(nodeId);

        console.log(`üéØ Selected node: ${nodeId}`);
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —É–∑–ª–∞
     */
    toggleNodeSelection(nodeId) {
        if (this.selectedNodes.has(nodeId)) {
            this.removeNodeFromSelection(nodeId);
        } else {
            this.addNodeToSelection(nodeId);
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–∑–ª–∞ –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º
     */
    addNodeToSelection(nodeId) {
        const node = this.canvasNodes.get(nodeId);
        if (!node) return;

        this.selectedNodes.add(nodeId);
        node.state.selected = true;

        // –í–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        const element = document.getElementById(nodeId);
        if (element) {
            element.classList.add('selected');
            element.style.borderColor = 'var(--color-primary)';
        }

        this.emit('nodeSelected', { nodeId, node });
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —É–∑–ª–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
     */
    removeNodeFromSelection(nodeId) {
        const node = this.canvasNodes.get(nodeId);
        if (!node) return;

        this.selectedNodes.delete(nodeId);
        node.state.selected = false;

        // –£–±–∏—Ä–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        const element = document.getElementById(nodeId);
        if (element) {
            element.classList.remove('selected');
            element.style.borderColor = 'var(--color-border)';
        }

        this.emit('nodeDeselected', { nodeId, node });
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö —É–∑–ª–æ–≤
     */
    clearNodeSelection() {
        this.selectedNodes.forEach(nodeId => {
            this.removeNodeFromSelection(nodeId);
        });
    }

    // =======================================================
    // –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ï–ô –£–ó–õ–û–í
    // =======================================================

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —É–∑–ª–∞
     */
    updateNodePosition(nodeId, x, y) {
        const node = this.canvasNodes.get(nodeId);
        if (!node) return;

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        node.position.x = x;
        node.position.y = y;
        node.metadata.updated = new Date().toISOString();

        // –û–±–Ω–æ–≤–ª—è–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç
        const element = document.getElementById(nodeId);
        if (element) {
            element.style.left = `${x}px`;
            element.style.top = `${y}px`;
        }
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–º–ø–æ–Ω–æ–≤–∫–∞ —É–∑–ª–æ–≤
     */
    autoLayoutNodes() {
        if (this.canvasNodes.size === 0) return;

        console.log('üéØ Auto-arranging nodes...');

        const canvas = this.canvasElement;
        const padding = 40;
        const nodeWidth = 240;
        const nodeHeight = 140;

        const availableWidth = canvas.clientWidth - padding * 2;
        const availableHeight = canvas.clientHeight - padding * 2;

        const columns = Math.max(1, Math.floor(availableWidth / nodeWidth));
        const rows = Math.ceil(this.canvasNodes.size / columns);

        let index = 0;
        this.canvasNodes.forEach((node) => {
            const col = index % columns;
            const row = Math.floor(index / columns);

            const x = padding + col * nodeWidth;
            const y = padding + row * nodeHeight;

            this.updateNodePosition(node.id, x, y);
            index++;
        });

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        this.emit('nodesAutoArranged', { count: this.canvasNodes.size });
        console.log('‚úÖ Auto-arrangement completed');
    }

    // =======================================================
    // –£–ü–†–ê–í–õ–ï–ù–ò–ï –£–ó–õ–ê–ú–ò
    // =======================================================

    /**
 * –£–¥–∞–ª–µ–Ω–∏–µ —É–∑–ª–∞
 */
    deleteNode(nodeId) {
        const node = this.canvasNodes.get(nodeId);
        if (!node) {
            console.warn(`‚ö†Ô∏è Node ${nodeId} not found for deletion`);
            return false;
        }

        const confirmMessage = `–£–¥–∞–ª–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç "${node.definition.name}"?`;
        if (!confirm(confirmMessage)) {
            return false;
        }

        try {
            console.log(`üóëÔ∏è Deleting node: ${nodeId}`);

            // –£–¥–∞–ª—è–µ–º –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É–∑–ª–æ–≤
            this.removeNodeFromSelection(nodeId);

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º —É–¥–∞–ª–µ–Ω–∏–∏ (–¥–ª—è connection-manager)
            this.emit('nodeDeleting', { nodeId, node });

            // –£–¥–∞–ª—è–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
            const element = document.getElementById(nodeId);
            if (element) {
                this.animateNodeRemoval(element).then(() => {
                    element.remove();
                });
            }

            // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.cleanupNodeEventListeners(nodeId);

            // –£–¥–∞–ª—è–µ–º –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            this.canvasNodes.delete(nodeId);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            if (node.definition.instances > 0) {
                node.definition.instances--;
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (this.canvasNodes.size === 0) {
                this.showEmptyState();
            }

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
            this.emit('nodeDeleted', { nodeId, componentId: node.componentId });

            console.log(`‚úÖ Node ${nodeId} deleted successfully`);
            return true;

        } catch (error) {
            console.error(`‚ùå Error deleting node ${nodeId}:`, error);
            this.showError(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${error.message}`);
            return false;
        }
    }

    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —É–∑–ª–∞
     */
    async animateNodeRemoval(element) {
        return new Promise((resolve) => {
            element.style.transition = 'all 0.3s var(--ease-out)';
            element.style.transform = 'scale(0.8)';
            element.style.opacity = '0';

            setTimeout(() => {
                resolve();
            }, 300);
        });
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π —É–∑–ª–∞
     */
    cleanupNodeEventListeners(nodeId) {
        const handlers = this.nodeEventListeners.get(nodeId);
        if (handlers) {
            const element = document.getElementById(nodeId);
            if (element) {
                Object.entries(handlers).forEach(([event, handler]) => {
                    element.removeEventListener(event, handler);
                });
            }
            this.nodeEventListeners.delete(nodeId);
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–æ—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
     */
    configureNode(nodeId) {
        const node = this.canvasNodes.get(nodeId);
        if (!node) {
            console.warn(`‚ö†Ô∏è Node ${nodeId} not found for configuration`);
            return;
        }

        // –í—ã–±–∏—Ä–∞–µ–º —É–∑–µ–ª –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω
        if (!node.state.selected) {
            this.selectNode(nodeId);
        }

        // –£–≤–µ–¥–æ–º–ª—è–µ–º core –º–æ–¥—É–ª—å –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        this.emit('nodeConfigurationRequested', { nodeId, node });

        console.log(`‚öôÔ∏è Configuration requested for node: ${nodeId}`);
    }

    /**
     * –ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é —É–∑–ª–∞
     */
    showNodeContextMenu(nodeId, x, y) {
        const node = this.canvasNodes.get(nodeId);
        if (!node) return;

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        this.createContextMenu(nodeId, x, y, [
            {
                label: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å',
                icon: '‚öôÔ∏è',
                action: () => this.configureNode(nodeId)
            },
            {
                label: '–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å',
                icon: 'üìã',
                action: () => this.duplicateNode(nodeId)
            },
            {
                label: '–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω',
                icon: '‚¨ÜÔ∏è',
                action: () => this.bringNodeToFront(nodeId)
            },
            { separator: true },
            {
                label: '–£–¥–∞–ª–∏—Ç—å',
                icon: 'üóëÔ∏è',
                action: () => this.deleteNode(nodeId),
                danger: true
            }
        ]);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
     */
    createContextMenu(nodeId, x, y, items) {
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
        this.removeContextMenu();

        const menu = document.createElement('div');
        menu.className = 'canvas-context-menu';
        menu.style.cssText = `
            position: fixed;
            left: ${x}px;
            top: ${y}px;
            background: var(--color-surface-elevated);
            border: 1px solid var(--color-border);
            border-radius: var(--radius-base);
            box-shadow: var(--shadow-lg);
            padding: var(--space-4);
            z-index: 1000;
            min-width: 180px;
        `;

        items.forEach(item => {
            if (item.separator) {
                const separator = document.createElement('div');
                separator.style.cssText = `
                    height: 1px;
                    background: var(--color-border);
                    margin: var(--space-4) 0;
                `;
                menu.appendChild(separator);
            } else {
                const menuItem = document.createElement('div');
                menuItem.className = 'context-menu-item';
                menuItem.style.cssText = `
                    display: flex;
                    align-items: center;
                    gap: var(--space-8);
                    padding: var(--space-8) var(--space-12);
                    cursor: pointer;
                    border-radius: var(--radius-sm);
                    transition: var(--transition-all);
                    ${item.danger ? 'color: var(--color-error);' : ''}
                `;

                menuItem.innerHTML = `
                    <span class="menu-icon">${item.icon}</span>
                    <span class="menu-label">${item.label}</span>
                `;

                menuItem.addEventListener('click', () => {
                    item.action();
                    this.removeContextMenu();
                });

                menuItem.addEventListener('mouseenter', () => {
                    menuItem.style.background = item.danger ?
                        'rgba(var(--color-error-rgb), 0.1)' :
                        'var(--color-surface-hover)';
                });

                menuItem.addEventListener('mouseleave', () => {
                    menuItem.style.background = 'transparent';
                });

                menu.appendChild(menuItem);
            }
        });

        document.body.appendChild(menu);

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
        const closeHandler = (e) => {
            if (!menu.contains(e.target)) {
                this.removeContextMenu();
                document.removeEventListener('click', closeHandler);
            }
        };

        setTimeout(() => {
            document.addEventListener('click', closeHandler);
        }, 0);
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
     */
    removeContextMenu() {
        const existingMenu = document.querySelector('.canvas-context-menu');
        if (existingMenu) {
            existingMenu.remove();
        }
    }

    /**
     * –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∑–ª–∞
     */
    duplicateNode(nodeId) {
        const originalNode = this.canvasNodes.get(nodeId);
        if (!originalNode) return;

        try {
            // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å –Ω–µ–±–æ–ª—å—à–∏–º —Å–º–µ—â–µ–Ω–∏–µ–º
            const offset = 30;
            const newX = originalNode.position.x + offset;
            const newY = originalNode.position.y + offset;

            // –î–æ–±–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
            const result = this.addComponent(
                originalNode.componentId,
                newX,
                newY,
                { ...originalNode.parameters }
            );

            if (result) {
                // –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π —É–∑–µ–ª
                this.selectNode(result.nodeId);

                console.log(`üìã Node ${nodeId} duplicated as ${result.nodeId}`);
                this.showSuccess('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω');
            }

        } catch (error) {
            console.error('‚ùå Error duplicating node:', error);
            this.showError('–û—à–∏–±–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞');
        }
    }

    /**
     * –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —É–∑–ª–∞ –Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω
     */
    bringNodeToFront(nodeId) {
        const node = this.canvasNodes.get(nodeId);
        if (!node) return;

        const element = document.getElementById(nodeId);
        if (element) {
            // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π z-index —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —É–∑–ª–æ–≤
            let maxZIndex = 10;
            this.canvasNodes.forEach(n => {
                if (n.style.zIndex > maxZIndex) {
                    maxZIndex = n.style.zIndex;
                }
            });

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π z-index
            node.style.zIndex = maxZIndex + 1;
            element.style.zIndex = node.style.zIndex;

            console.log(`‚¨ÜÔ∏è Brought node ${nodeId} to front (z-index: ${node.style.zIndex})`);
        }
    }

    // =======================================================
    // –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò MOUSE –°–û–ë–´–¢–ò–ô
    // =======================================================

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ mousedown –Ω–∞ canvas
     */
    handleMouseDown(event) {
        if (event.target.closest('.canvas-node')) return;

        // –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏
        this.startAreaSelection(event);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ mousemove –Ω–∞ canvas
     */
    handleMouseMove(event) {
        if (this.isDragging && this.draggedNode) {
            this.updateNodeDrag(event);
        } else if (this.isAreaSelecting) {
            this.updateAreaSelection(event);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ mouseup –Ω–∞ canvas
     */
    handleMouseUp(event) {
        if (this.isDragging) {
            this.endNodeDrag();
        } else if (this.isAreaSelecting) {
            this.endAreaSelection();
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ wheel –¥–ª—è –∑—É–º–∞
     */
    handleWheel(event) {
        event.preventDefault();

        const rect = this.canvasElement.getBoundingClientRect();
        const mouseX = event.clientX - rect.left;
        const mouseY = event.clientY - rect.top;

        const zoomDelta = event.deltaY > 0 ? 0.9 : 1.1;
        this.zoomCanvas(zoomDelta, mouseX, mouseY);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ keydown
     */
    handleKeyDown(event) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ–∫—É—Å –Ω–∞ canvas –∏–ª–∏ –µ–≥–æ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
        if (!this.canvasElement.contains(document.activeElement)) return;

        switch (event.key) {
            case 'Delete':
            case 'Backspace':
                if (this.selectedNodes.size > 0) {
                    this.deleteSelectedNodes();
                }
                event.preventDefault();
                break;

            case 'Escape':
                this.clearNodeSelection();
                this.removeContextMenu();
                event.preventDefault();
                break;

            case 'a':
                if (event.ctrlKey || event.metaKey) {
                    this.selectAllNodes();
                    event.preventDefault();
                }
                break;

            case 'd':
                if (event.ctrlKey || event.metaKey) {
                    this.duplicateSelectedNodes();
                    event.preventDefault();
                }
                break;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ keyup
     */
    handleKeyUp(event) {
        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
        this.modifierKeys = {
            ctrl: event.ctrlKey,
            shift: event.shiftKey,
            alt: event.altKey
        };
    }

    // =======================================================
    // TOUCH –°–û–ë–´–¢–ò–Ø –ò –ñ–ï–°–¢–´
    // =======================================================

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ touchstart
     */
    handleTouchStart(event) {
        event.preventDefault();

        const touches = Array.from(event.touches);
        this.gestureState.touches = touches;

        if (touches.length === 1) {
            // –û–¥–∏–Ω–æ—á–Ω–æ–µ –∫–∞—Å–∞–Ω–∏–µ - –∏–º–∏—Ç–∏—Ä—É–µ–º mousedown
            const touch = touches[0];
            this.simulateMouseEvent('mousedown', touch);
        } else if (touches.length === 2) {
            // –î–≤–∞ –∫–∞—Å–∞–Ω–∏—è - –Ω–∞—á–∏–Ω–∞–µ–º –∂–µ—Å—Ç –∑—É–º–∞/–ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è
            this.startGesture(touches);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ touchmove
     */
    handleTouchMove(event) {
        event.preventDefault();

        const touches = Array.from(event.touches);

        if (touches.length === 1) {
            // –û–¥–∏–Ω–æ—á–Ω–æ–µ –∫–∞—Å–∞–Ω–∏–µ - –∏–º–∏—Ç–∏—Ä—É–µ–º mousemove
            const touch = touches[0];
            this.simulateMouseEvent('mousemove', touch);
        } else if (touches.length === 2) {
            // –î–≤–∞ –∫–∞—Å–∞–Ω–∏—è - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∂–µ—Å—Ç
            this.updateGesture(touches);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ touchend
     */
    handleTouchEnd(event) {
        event.preventDefault();

        if (this.gestureState.touches.length === 1) {
            // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω–æ–µ –∫–∞—Å–∞–Ω–∏–µ
            const touch = this.gestureState.touches[0];
            this.simulateMouseEvent('mouseup', touch);
        }

        this.endGesture();
    }

    /**
     * –ò–º–∏—Ç–∞—Ü–∏—è mouse —Å–æ–±—ã—Ç–∏—è –∏–∑ touch
     */
    simulateMouseEvent(type, touch) {
        const mouseEvent = new MouseEvent(type, {
            bubbles: true,
            cancelable: true,
            clientX: touch.clientX,
            clientY: touch.clientY,
            button: 0
        });

        touch.target.dispatchEvent(mouseEvent);
    }

    /**
     * –ù–∞—á–∞–ª–æ –∂–µ—Å—Ç–∞ (–∑—É–º/–ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ)
     */
    startGesture(touches) {
        if (touches.length !== 2) return;

        this.gestureState.isGesturing = true;
        this.gestureState.initialDistance = this.getTouchDistance(touches);
        this.gestureState.initialScale = this.canvasScale;
        this.gestureState.touches = touches;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∂–µ—Å—Ç–∞
     */
    updateGesture(touches) {
        if (!this.gestureState.isGesturing || touches.length !== 2) return;

        const currentDistance = this.getTouchDistance(touches);
        const scale = currentDistance / this.gestureState.initialDistance;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑—É–º
        const newScale = this.gestureState.initialScale * scale;
        const clampedScale = Math.max(this.minZoom, Math.min(this.maxZoom, newScale));

        this.setCanvasScale(clampedScale);
    }

    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∂–µ—Å—Ç–∞
     */
    endGesture() {
        this.gestureState.isGesturing = false;
        this.gestureState.touches = [];
    }

    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è –∫–∞—Å–∞–Ω–∏—è–º–∏
     */
    getTouchDistance(touches) {
        const dx = touches[0].clientX - touches[1].clientX;
        const dy = touches[0].clientY - touches[1].clientY;
        return Math.sqrt(dx * dx + dy * dy);
    }

    // =======================================================
    // –ó–£–ú–ú–ò–†–û–í–ê–ù–ò–ï –ò –ü–ê–ù–û–†–ê–ú–ò–†–û–í–ê–ù–ò–ï
    // =======================================================

    /**
     * –ó—É–º canvas
     */
    zoomCanvas(zoomDelta, centerX, centerY) {
        const newScale = Math.max(this.minZoom, Math.min(this.maxZoom, this.canvasScale * zoomDelta));

        if (newScale === this.canvasScale) return;

        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –∑—É–º–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–æ—á–∫–∏
        const scaleDelta = newScale / this.canvasScale;
        const newOffsetX = centerX - (centerX - this.canvasOffset.x) * scaleDelta;
        const newOffsetY = centerY - (centerY - this.canvasOffset.y) * scaleDelta;

        this.setCanvasScale(newScale);
        this.setCanvasOffset(newOffsetX, newOffsetY);

        this.emit('canvasZoomed', { scale: newScale, centerX, centerY });
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—Å—à—Ç–∞–±–∞ canvas
     */
    setCanvasScale(scale) {
        this.canvasScale = Math.max(this.minZoom, Math.min(this.maxZoom, scale));
        this.applyCanvasTransform();

        // –û–±–Ω–æ–≤–ª—è–µ–º UI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑—É–º–∞
        this.updateZoomIndicator();
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–º–µ—â–µ–Ω–∏—è canvas
     */
    setCanvasOffset(x, y) {
        this.canvasOffset.x = x;
        this.canvasOffset.y = y;
        this.applyCanvasTransform();
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫ canvas
     */
    applyCanvasTransform() {
        if (this.nodeLayer) {
            this.nodeLayer.style.transform =
                `translate(${this.canvasOffset.x}px, ${this.canvasOffset.y}px) scale(${this.canvasScale})`;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—à—Ç–∞–± —Å–µ—Ç–∫–∏
        if (this.gridLayer && this.snapToGrid) {
            this.renderGrid();
        }
    }

    /**
     * –°–±—Ä–æ—Å –∑—É–º–∞ –∏ –ø–æ–∑–∏—Ü–∏–∏
     */
    resetCanvasTransform() {
        this.setCanvasScale(1.0);
        this.setCanvasOffset(0, 0);

        console.log('üéØ Canvas transform reset');
        this.emit('canvasTransformReset');
    }

    /**
     * –ü–æ–¥–≥–æ–Ω–∫–∞ –≤—Å–µ—Ö —É–∑–ª–æ–≤ –≤ –≤–∏–¥–∏–º—É—é –æ–±–ª–∞—Å—Ç—å
     */
    fitNodesToView() {
        if (this.canvasNodes.size === 0) return;

        // –ù–∞—Ö–æ–¥–∏–º –≥—Ä–∞–Ω–∏—Ü—ã –≤—Å–µ—Ö —É–∑–ª–æ–≤
        let minX = Infinity, minY = Infinity;
        let maxX = -Infinity, maxY = -Infinity;

        this.canvasNodes.forEach(node => {
            minX = Math.min(minX, node.position.x);
            minY = Math.min(minY, node.position.y);
            maxX = Math.max(maxX, node.position.x + node.style.width);
            maxY = Math.max(maxY, node.position.y + node.style.height);
        });

        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –º–∞—Å—à—Ç–∞–± –∏ —Å–º–µ—â–µ–Ω–∏–µ
        const padding = 50;
        const availableWidth = this.canvasElement.clientWidth - padding * 2;
        const availableHeight = this.canvasElement.clientHeight - padding * 2;

        const contentWidth = maxX - minX;
        const contentHeight = maxY - minY;

        const scaleX = availableWidth / contentWidth;
        const scaleY = availableHeight / contentHeight;
        const scale = Math.min(scaleX, scaleY, 1.0);

        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        const offsetX = (availableWidth - contentWidth * scale) / 2 + padding - minX * scale;
        const offsetY = (availableHeight - contentHeight * scale) / 2 + padding - minY * scale;

        this.setCanvasScale(scale);
        this.setCanvasOffset(offsetX, offsetY);

        console.log('üìê Fitted nodes to view');
        this.emit('nodesFittedToView');
    }

    // =======================================================
    // –í–´–î–ï–õ–ï–ù–ò–ï –û–ë–õ–ê–°–¢–ò
    // =======================================================

    /**
     * –ù–∞—á–∞–ª–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏
     */
    startAreaSelection(event) {
        const rect = this.canvasElement.getBoundingClientRect();

        this.isAreaSelecting = true;
        this.areaSelectionStart = {
            x: event.clientX - rect.left,
            y: event.clientY - rect.top
        };

        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è
        this.createSelectionBox();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏
     */
    updateAreaSelection(event) {
        if (!this.isAreaSelecting) return;

        const rect = this.canvasElement.getBoundingClientRect();
        const currentPos = {
            x: event.clientX - rect.left,
            y: event.clientY - rect.top
        };

        this.updateSelectionBox(this.areaSelectionStart, currentPos);
    }

    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏
     */
    endAreaSelection() {
        if (!this.isAreaSelecting) return;

        this.isAreaSelecting = false;

        // –ù–∞—Ö–æ–¥–∏–º —É–∑–ª—ã –≤ –æ–±–ª–∞—Å—Ç–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        const selectedNodeIds = this.getNodesInSelectionArea();

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —É–∑–ª–æ–≤
        if (selectedNodeIds.length > 0) {
            this.clearNodeSelection();
            selectedNodeIds.forEach(nodeId => {
                this.addNodeToSelection(nodeId);
            });
        }

        // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è
        this.removeSelectionBox();
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–º–∫–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è
     */
    createSelectionBox() {
        this.removeSelectionBox();

        const selectionBox = document.createElement('div');
        selectionBox.className = 'selection-box';
        selectionBox.style.cssText = `
            position: absolute;
            border: 2px dashed var(--color-primary);
            background: rgba(var(--color-primary-rgb), 0.1);
            pointer-events: none;
            z-index: 15;
        `;

        this.selectionLayer.appendChild(selectionBox);
        this.selectionBox = selectionBox;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–º–∫–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è
     */
    updateSelectionBox(start, current) {
        if (!this.selectionBox) return;

        const left = Math.min(start.x, current.x);
        const top = Math.min(start.y, current.y);
        const width = Math.abs(current.x - start.x);
        const height = Math.abs(current.y - start.y);

        Object.assign(this.selectionBox.style, {
            left: `${left}px`,
            top: `${top}px`,
            width: `${width}px`,
            height: `${height}px`
        });
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–º–∫–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è
     */
    removeSelectionBox() {
        if (this.selectionBox) {
            this.selectionBox.remove();
            this.selectionBox = null;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —É–∑–ª–æ–≤ –≤ –æ–±–ª–∞—Å—Ç–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è
     */
    getNodesInSelectionArea() {
        if (!this.selectionBox) return [];

        const boxRect = this.selectionBox.getBoundingClientRect();
        const canvasRect = this.canvasElement.getBoundingClientRect();

        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ canvas
        const selectionArea = {
            left: boxRect.left - canvasRect.left,
            top: boxRect.top - canvasRect.top,
            right: boxRect.right - canvasRect.left,
            bottom: boxRect.bottom - canvasRect.top
        };

        const selectedNodeIds = [];

        this.canvasNodes.forEach((node, nodeId) => {
            const nodeArea = {
                left: node.position.x,
                top: node.position.y,
                right: node.position.x + node.style.width,
                bottom: node.position.y + node.style.height
            };

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–µ–π
            if (this.areAreasIntersecting(selectionArea, nodeArea)) {
                selectedNodeIds.push(nodeId);
            }
        });

        return selectedNodeIds;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –¥–≤—É—Ö –æ–±–ª–∞—Å—Ç–µ–π
     */
    areAreasIntersecting(area1, area2) {
        return !(area1.right < area2.left ||
            area1.left > area2.right ||
            area1.bottom < area2.top ||
            area1.top > area2.bottom);
    }

    // =======================================================
    // –ú–ê–°–°–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò –° –£–ó–õ–ê–ú–ò
    // =======================================================

    /**
     * –í—ã–±–æ—Ä –≤—Å–µ—Ö —É–∑–ª–æ–≤
     */
    selectAllNodes() {
        this.canvasNodes.forEach((node, nodeId) => {
            this.addNodeToSelection(nodeId);
        });

        console.log(`üéØ Selected all nodes: ${this.selectedNodes.size}`);
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É–∑–ª–æ–≤
     */
    deleteSelectedNodes() {
        if (this.selectedNodes.size === 0) return;

        const nodeCount = this.selectedNodes.size;
        const confirmMessage = `–£–¥–∞–ª–∏—Ç—å ${nodeCount} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤?`;

        if (!confirm(confirmMessage)) return;

        // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è Set –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
        const nodesToDelete = Array.from(this.selectedNodes);

        nodesToDelete.forEach(nodeId => {
            this.deleteNode(nodeId);
        });

        console.log(`üóëÔ∏è Deleted ${nodeCount} selected nodes`);
    }

    /**
     * –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É–∑–ª–æ–≤
     */
    duplicateSelectedNodes() {
        if (this.selectedNodes.size === 0) return;

        const nodesToDuplicate = Array.from(this.selectedNodes);
        const newNodeIds = [];

        nodesToDuplicate.forEach(nodeId => {
            const newNodeId = this.duplicateNode(nodeId);
            if (newNodeId) {
                newNodeIds.push(newNodeId);
            }
        });

        // –í—ã–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–∑–ª—ã
        if (newNodeIds.length > 0) {
            this.clearNodeSelection();
            newNodeIds.forEach(nodeId => {
                this.addNodeToSelection(nodeId);
            });
        }

        console.log(`üìã Duplicated ${newNodeIds.length} nodes`);
    }

    // =======================================================
    // –û–ë–†–ê–ë–û–¢–ö–ê –°–û–ï–î–ò–ù–ï–ù–ò–ô
    // =======================================================

    /**
     * –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    handleConnectionStart(nodeId, pointType, event) {
        event.stopPropagation();

        // –£–≤–µ–¥–æ–º–ª—è–µ–º connection-manager –æ –Ω–∞—á–∞–ª–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        this.emit('connectionStarted', {
            nodeId,
            pointType,
            position: {
                x: event.clientX,
                y: event.clientY
            }
        });

        console.log(`üîó Connection started from ${nodeId} (${pointType})`);
    }

    // =======================================================
    // –£–¢–ò–õ–ò–¢–ê–†–ù–´–ï –ú–ï–¢–û–î–´
    // =======================================================

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ canvas
     */
    clearCanvas() {
        console.log('üßπ Clearing canvas...');

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —É–∑–ª—ã
        this.canvasNodes.forEach((node, nodeId) => {
            const element = document.getElementById(nodeId);
            if (element) {
                element.remove();
            }
        });

        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        this.canvasNodes.clear();
        this.selectedNodes.clear();
        this.nodeEventListeners.clear();

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.isDragging = false;
        this.draggedNode = null;
        this.isAreaSelecting = false;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.showEmptyState();

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—á–∏—Å—Ç–∫–µ
        this.emit('canvasCleared');

        console.log('‚úÖ Canvas cleared');
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑—É–º–∞
     */
    updateZoomIndicator() {
        const zoomPercent = Math.round(this.canvasScale * 100);

        // –ò—â–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑—É–º–∞ –≤ UI
        const zoomIndicator = document.querySelector('.zoom-indicator');
        if (zoomIndicator) {
            zoomIndicator.textContent = `${zoomPercent}%`;
        }

        console.log(`üîç Zoom updated: ${zoomPercent}%`);
    }

    /**
     * –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
     */
    showError(message) {
        if (window.app?.showErrorNotification) {
            window.app.showErrorNotification(message);
        } else {
            console.error('‚ùå', message);
        }
    }

    /**
     * –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
     */
    showSuccess(message) {
        if (window.app?.showSuccessNotification) {
            window.app.showSuccessNotification(message);
        } else {
            console.log('‚úÖ', message);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ canvas
     */
    getCanvasStats() {
        return {
            version: this.version,
            nodeCount: this.canvasNodes.size,
            selectedCount: this.selectedNodes.size,
            scale: this.canvasScale,
            offset: { ...this.canvasOffset },
            performanceMode: this.performanceMode,
            gridEnabled: this.snapToGrid,
            initialized: this.isInitialized
        };
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö canvas
     */
    exportCanvasData() {
        const nodesData = Array.from(this.canvasNodes.values()).map(node => ({
            id: node.id,
            componentId: node.componentId,
            position: { ...node.position },
            parameters: { ...node.parameters },
            metadata: { ...node.metadata }
        }));

        return {
            version: this.version,
            timestamp: new Date().toISOString(),
            settings: {
                scale: this.canvasScale,
                offset: { ...this.canvasOffset },
                gridSize: this.gridSize,
                snapToGrid: this.snapToGrid
            },
            nodes: nodesData
        };
    }

    /**
     * –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö canvas
     */
    async importCanvasData(data) {
        try {
            console.log('üì• Importing canvas data...');

            // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π canvas
            this.clearCanvas();

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if (data.settings) {
                this.setCanvasScale(data.settings.scale || 1.0);
                this.setCanvasOffset(
                    data.settings.offset?.x || 0,
                    data.settings.offset?.y || 0
                );

                if (data.settings.gridSize) {
                    this.gridSize = data.settings.gridSize;
                }

                if (data.settings.snapToGrid !== undefined) {
                    this.snapToGrid = data.settings.snapToGrid;
                }
            }

            // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–∑–ª—ã
            if (data.nodes && Array.isArray(data.nodes)) {
                for (const nodeData of data.nodes) {
                    const result = this.addComponent(
                        nodeData.componentId,
                        nodeData.position.x,
                        nodeData.position.y,
                        nodeData.parameters || {}
                    );

                    if (result && nodeData.metadata) {
                        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                        result.node.metadata = { ...nodeData.metadata };
                    }
                }
            }

            console.log(`‚úÖ Imported ${data.nodes?.length || 0} nodes`);
            this.emit('canvasImported', { nodeCount: data.nodes?.length || 0 });

        } catch (error) {
            console.error('‚ùå Error importing canvas data:', error);
            this.showError('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö canvas');
            throw error;
        }
    }

    // =======================================================
    // –°–ò–°–¢–ï–ú–ê –°–û–ë–´–¢–ò–ô
    // =======================================================

    /**
     * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
     */
    on(event, handler) {
        if (!this.eventHandlers.has(event)) {
            this.eventHandlers.set(event, []);
        }
        this.eventHandlers.get(event).push(handler);
    }

    /**
     * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏—è
     */
    off(event, handler) {
        if (this.eventHandlers.has(event)) {
            const handlers = this.eventHandlers.get(event);
            const index = handlers.indexOf(handler);
            if (index > -1) {
                handlers.splice(index, 1);
            }
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è
     */
    emit(event, data) {
        if (this.eventHandlers.has(event)) {
            this.eventHandlers.get(event).forEach(handler => {
                try {
                    handler(data);
                } catch (error) {
                    console.error(`Error in event handler for ${event}:`, error);
                }
            });
        }
    }

    // =======================================================
    // –ú–ï–¢–û–î–´ –ñ–ò–ó–ù–ï–ù–ù–û–ì–û –¶–ò–ö–õ–ê
    // =======================================================

    /**
     * –ê–∫—Ç–∏–≤–∞—Ü–∏—è Canvas Manager
     */
    activate() {
        if (!this.isInitialized) {
            console.warn('‚ö†Ô∏è Canvas Manager not initialized');
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç–∫—É –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        if (this.snapToGrid) {
            this.renderGrid();
        }

        console.log('üü¢ Canvas Manager activated');
        this.emit('activated');
    }

    /**
     * –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è Canvas Manager
     */
    deactivate() {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.clearNodeSelection();
        this.removeContextMenu();

        console.log('üü° Canvas Manager deactivated');
        this.emit('deactivated');
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    cleanup() {
        console.log('üßπ Cleaning up Canvas Manager...');

        try {
            // –û—á–∏—â–∞–µ–º canvas
            this.clearCanvas();

            // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.eventHandlers.clear();
            this.nodeEventListeners.clear();

            // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã UI
            this.removeContextMenu();
            this.removeSelectionBox();

            // –û—á–∏—â–∞–µ–º —Å–ª–æ–∏
            if (this.gridLayer) this.gridLayer.innerHTML = '';
            if (this.nodeLayer) this.nodeLayer.innerHTML = '';
            if (this.selectionLayer) this.selectionLayer.innerHTML = '';
            if (this.previewLayer) this.previewLayer.innerHTML = '';

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.isInitialized = false;
            this.isDragging = false;
            this.isAreaSelecting = false;
            this.draggedNode = null;

            console.log('‚úÖ Canvas Manager cleanup completed');

        } catch (error) {
            console.error('‚ùå Error during Canvas Manager cleanup:', error);
        }
    }
}

// =======================================================
// –≠–ö–°–ü–û–†–¢ –ò –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø
// =======================================================

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è Canvas Manager
 */
function createCanvasManager(coreInstance) {
    return new CanvasManager(coreInstance);
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–¥—É–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        CanvasManager,
        createCanvasManager
    };
}

// ES6 —ç–∫—Å–ø–æ—Ä—Ç—ã
if (typeof window !== 'undefined') {
    window.CanvasManager = CanvasManager;
    window.createCanvasManager = createCanvasManager;

    // –î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π attack-constructor
    window.CanvasManagerExports = {
        CanvasManager,
        createCanvasManager,
        version: '4.0.0-Enhanced-Canvas'
    };
}

console.log('‚úÖ Canvas Manager v4.0.0-Enhanced loaded successfully');

/**
 * =======================================================
 * –ö–û–ù–ï–¶ –§–ê–ô–õ–ê canvas-manager.js
 * 
 * IP Roast Enterprise 4.0 - Canvas Manager Module
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è canvas –æ–±–ª–∞—Å—Ç—å—é
 * –í–µ—Ä—Å–∏—è: 4.0.0-Enhanced-Canvas
 * 
 * –ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–∑–ª–∞–º–∏ (CRUD)
 * - Drag & Drop —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —Å–µ—Ç–∫–µ
 * - –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏ –º–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
 * - –ó—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ canvas
 * - Touch gestures –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
 * - –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –º–µ–Ω—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
 * - –≠–∫—Å–ø–æ—Ä—Ç/–∏–º–ø–æ—Ä—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è canvas
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å connection-manager
 * - Enterprise-—É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
 * =======================================================
 */
