import React, { useState, useEffect, useCallback, useMemo } from 'react'
import { useSearchParams } from 'react-router-dom'

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import Card from '@/components/common/Card'
import Button from '@/components/common/Button'
import LoadingSpinner from '@/components/common/LoadingSpinner'
import StatusIndicator from '@/components/common/StatusIndicator'
import Modal from '@/components/common/Modal'
import Toast from '@/components/common/Toast'

// –•—É–∫–∏
import { useTheme } from '@/hooks/useTheme'
import { useNotifications } from '@/hooks/useNotifications'
import { useLocalStorage } from '@/hooks/useLocalStorage'

// –£—Ç–∏–ª–∏—Ç—ã
import { formatDate, formatFileSize } from '@/utils/formatters'

// –¢–∏–ø—ã
interface SettingsSection {
    id: string;
    title: string;
    icon: string;
    description: string;
}

interface UserProfile {
    fullName: string;
    email: string;
    position: string;
    organization: string;
    timezone: string;
    language: string;
    avatar?: string;
}

interface SecuritySettings {
    totpEnabled: boolean;
    sessionLifetime: number;
    autoLogout: boolean;
    loginNotifications: boolean;
    deviceTracking: boolean;
    apiKeys: ApiKey[];
}

interface ApiKey {
    id: string;
    name: string;
    key: string;
    permissions: string[];
    createdAt: string;
    lastUsed?: string;
    isActive: boolean;
}

interface ScanningSettings {
    defaultProfile: string;
    maxConcurrentScans: number;
    defaultTimeout: number;
    autoSaveResults: boolean;
    enableScriptScan: boolean;
    defaultPorts: string;
    excludedRanges: string[];
}

interface NotificationSettings {
    emailNotifications: boolean;
    emailAddress: string;
    telegramEnabled: boolean;
    telegramChatId: string;
    webhookUrl: string;
    notificationEvents: string[];
    quietHours: {
        enabled: boolean;
        startTime: string;
        endTime: string;
    };
}

interface ThemeSettings {
    theme: 'light' | 'dark' | 'auto';
    accent: string;
    size: 'compact' | 'medium' | 'large';
    fontSize: number;
    highContrast: boolean;
    animations: boolean;
}

const SettingsPage: React.FC = () => {
    // URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const [searchParams, setSearchParams] = useSearchParams();

    // –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ–∫—Ü–∏—è
    const [activeSection, setActiveSection] = useState(searchParams.get('section') || 'profile');

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    const [isLoading, setIsLoading] = useState(true);
    const [isSaving, setIsSaving] = useState(false);

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const [userProfile, setUserProfile] = useLocalStorage<UserProfile>('userProfile', {
        fullName: '',
        email: '',
        position: '',
        organization: '',
        timezone: 'Europe/Moscow',
        language: 'ru'
    });

    const [securitySettings, setSecuritySettings] = useState<SecuritySettings>({
        totpEnabled: false,
        sessionLifetime: 7,
        autoLogout: false,
        loginNotifications: true,
        deviceTracking: true,
        apiKeys: []
    });

    const [scanningSettings, setScanningSettings] = useLocalStorage<ScanningSettings>('scanningSettings', {
        defaultProfile: 'balanced',
        maxConcurrentScans: 3,
        defaultTimeout: 300,
        autoSaveResults: true,
        enableScriptScan: true,
        defaultPorts: 'common',
        excludedRanges: []
    });

    const [notificationSettings, setNotificationSettings] = useLocalStorage<NotificationSettings>('notificationSettings', {
        emailNotifications: false,
        emailAddress: '',
        telegramEnabled: false,
        telegramChatId: '',
        webhookUrl: '',
        notificationEvents: ['scan_completed', 'vulnerabilities_found'],
        quietHours: {
            enabled: false,
            startTime: '22:00',
            endTime: '08:00'
        }
    });

    const [themeSettings, setThemeSettings] = useLocalStorage<ThemeSettings>('themeSettings', {
        theme: 'auto',
        accent: 'blue',
        size: 'medium',
        fontSize: 14,
        highContrast: false,
        animations: true
    });

    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    const [showResetModal, setShowResetModal] = useState(false);
    const [showExportModal, setShowExportModal] = useState(false);
    const [showApiKeyModal, setShowApiKeyModal] = useState(false);
    const [editingApiKey, setEditingApiKey] = useState<ApiKey | null>(null);

    // –•—É–∫–∏
    const { theme, setTheme } = useTheme();
    const { addNotification } = useNotifications();

    // –°–µ–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const settingsSections = useMemo<SettingsSection[]>(() => [
        {
            id: 'profile',
            title: '–ü—Ä–æ—Ñ–∏–ª—å',
            icon: 'üë§',
            description: '–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'
        },
        {
            id: 'security',
            title: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
            icon: 'üîê',
            description: '–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ API –∫–ª—é—á–∏'
        },
        {
            id: 'scanning',
            title: '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
            icon: 'üîç',
            description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è'
        },
        {
            id: 'notifications',
            title: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
            icon: 'üîî',
            description: 'Email, Telegram –∏ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
        },
        {
            id: 'appearance',
            title: '–í–Ω–µ—à–Ω–∏–π –≤–∏–¥',
            icon: 'üé®',
            description: '–¢–µ–º—ã, —Ü–≤–µ—Ç–∞ –∏ —Ä–∞–∑–º–µ—Ä—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞'
        },
        {
            id: 'integrations',
            title: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
            icon: 'üîó',
            description: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤'
        },
        {
            id: 'backup',
            title: '–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ',
            icon: 'üíæ',
            description: '–≠–∫—Å–ø–æ—Ä—Ç –∏ –∏–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫'
        },
        {
            id: 'system',
            title: '–°–∏—Å—Ç–µ–º–∞',
            icon: '‚öôÔ∏è',
            description: '–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞'
        }
    ], []);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    useEffect(() => {
        initializeSettings();
    }, []);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ URL –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–µ–∫—Ü–∏–∏
    useEffect(() => {
        const params = new URLSearchParams();
        if (activeSection !== 'profile') {
            params.set('section', activeSection);
        }
        setSearchParams(params, { replace: true });
    }, [activeSection, setSearchParams]);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const initializeSettings = useCallback(async () => {
        try {
            setIsLoading(true);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
            await Promise.allSettled([
                loadUserProfile(),
                loadSecuritySettings(),
                loadSystemInfo()
            ]);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
            addNotification({
                type: 'error',
                title: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏',
                message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'
            });
        } finally {
            setIsLoading(false);
        }
    }, [addNotification]);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const loadUserProfile = useCallback(async () => {
        try {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å
            // const response = await fetch('/api/settings/profile');
            // const data = await response.json();
            // setUserProfile(data);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        }
    }, []);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const loadSecuritySettings = useCallback(async () => {
        try {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å
            // const response = await fetch('/api/settings/security');
            // const data = await response.json();
            // setSecuritySettings(data);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:', error);
        }
    }, []);

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    const loadSystemInfo = useCallback(async () => {
        try {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
        }
    }, []);

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const saveSettings = useCallback(async (section: string) => {
        try {
            setIsSaving(true);

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å
            let dataToSave: any;
            let endpoint: string;

            switch (section) {
                case 'profile':
                    dataToSave = userProfile;
                    endpoint = '/api/settings/profile';
                    break;
                case 'security':
                    dataToSave = securitySettings;
                    endpoint = '/api/settings/security';
                    break;
                case 'scanning':
                    dataToSave = scanningSettings;
                    endpoint = '/api/settings/scanning';
                    break;
                case 'notifications':
                    dataToSave = notificationSettings;
                    endpoint = '/api/settings/notifications';
                    break;
                case 'appearance':
                    dataToSave = themeSettings;
                    endpoint = '/api/settings/appearance';
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É —Å—Ä–∞–∑—É
                    setTheme(themeSettings.theme);
                    break;
                default:
                    throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
            }

            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å
            // await fetch(endpoint, {
            //   method: 'PUT',
            //   headers: { 'Content-Type': 'application/json' },
            //   body: JSON.stringify(dataToSave)
            // });

            addNotification({
                type: 'success',
                title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
                message: `–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–∫—Ü–∏–∏ "${settingsSections.find(s => s.id === section)?.title}" –æ–±–Ω–æ–≤–ª–µ–Ω—ã`
            });

        } catch (error) {
            addNotification({
                type: 'error',
                title: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
                message: error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'
            });
        } finally {
            setIsSaving(false);
        }
    }, [userProfile, securitySettings, scanningSettings, notificationSettings, themeSettings, settingsSections, addNotification, setTheme]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–µ–∫—Ü–∏–∏
    const handleSectionChange = useCallback((sectionId: string) => {
        setActiveSection(sectionId);
    }, []);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const handleResetSettings = useCallback(async () => {
        try {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            localStorage.removeItem('userProfile');
            localStorage.removeItem('scanningSettings');
            localStorage.removeItem('notificationSettings');
            localStorage.removeItem('themeSettings');

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            window.location.reload();

        } catch (error) {
            addNotification({
                type: 'error',
                title: '–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞',
                message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'
            });
        }
    }, [addNotification]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const handleExportSettings = useCallback(() => {
        try {
            const settings = {
                userProfile,
                scanningSettings,
                notificationSettings,
                themeSettings,
                exportDate: new Date().toISOString(),
                version: '2.1.0'
            };

            const blob = new Blob([JSON.stringify(settings, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            link.download = `ip-roast-settings-${new Date().toISOString().split('T')[0]}.json`;
            link.click();
            URL.revokeObjectURL(url);

            addNotification({
                type: 'success',
                title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã',
                message: '–§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'
            });

        } catch (error) {
            addNotification({
                type: 'error',
                title: '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞',
                message: '–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'
            });
        }
    }, [userProfile, scanningSettings, notificationSettings, themeSettings, addNotification]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const handleImportSettings = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {
        const file = event.target.files?.[0];
        if (!file) return;

        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const settings = JSON.parse(e.target?.result as string);

                // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                if (!settings.version || !settings.userProfile) {
                    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
                }

                // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                if (settings.userProfile) setUserProfile(settings.userProfile);
                if (settings.scanningSettings) setScanningSettings(settings.scanningSettings);
                if (settings.notificationSettings) setNotificationSettings(settings.notificationSettings);
                if (settings.themeSettings) {
                    setThemeSettings(settings.themeSettings);
                    setTheme(settings.themeSettings.theme);
                }

                addNotification({
                    type: 'success',
                    title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã',
                    message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞'
                });

            } catch (error) {
                addNotification({
                    type: 'error',
                    title: '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞',
                    message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫'
                });
            }
        };
        reader.readAsText(file);
    }, [setUserProfile, setScanningSettings, setNotificationSettings, setThemeSettings, setTheme, addNotification]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è API –∫–ª—é—á–∞
    const handleCreateApiKey = useCallback(async (keyData: Partial<ApiKey>) => {
        try {
            const newKey: ApiKey = {
                id: `key_${Date.now()}`,
                name: keyData.name || '–ù–æ–≤—ã–π –∫–ª—é—á',
                key: `iprs_${Math.random().toString(36).substr(2, 32)}`,
                permissions: keyData.permissions || ['read'],
                createdAt: new Date().toISOString(),
                isActive: true
            };

            setSecuritySettings(prev => ({
                ...prev,
                apiKeys: [...prev.apiKeys, newKey]
            }));

            addNotification({
                type: 'success',
                title: 'API –∫–ª—é—á —Å–æ–∑–¥–∞–Ω',
                message: '–ù–æ–≤—ã–π API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
            });

            setShowApiKeyModal(false);

        } catch (error) {
            addNotification({
                type: 'error',
                title: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞',
                message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å API –∫–ª—é—á'
            });
        }
    }, [addNotification]);

    // –†–µ–Ω–¥–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    if (isLoading) {
        return (
            <div className="min-h-screen flex items-center justify-center">
                <div className="text-center space-y-4">
                    <LoadingSpinner size="xl" />
                    <div className="space-y-2">
                        <h2 className="text-xl font-semibold text-gray-900 dark:text-gray-100">
                            –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                        </h2>
                        <p className="text-gray-600 dark:text-gray-400">
                            –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã...
                        </p>
                    </div>
                </div>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-gray-50 dark:bg-gray-900 p-4 lg:p-6">
            <div className="max-w-7xl mx-auto">

                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
                <div className="mb-8">
                    <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100 flex items-center gap-3">
                        ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
                    </h1>
                    <p className="text-gray-600 dark:text-gray-400 mt-2">
                        –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è IP Roast Security Platform
                    </p>
                </div>

                <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">

                    {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å–µ–∫—Ü–∏—è–º */}
                    <div className="lg:col-span-1">
                        <Card className="sticky top-6">
                            <div className="p-6">
                                <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4">
                                    –†–∞–∑–¥–µ–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
                                </h3>

                                <nav className="space-y-2">
                                    {settingsSections.map((section) => (
                                        <button
                                            key={section.id}
                                            onClick={() => handleSectionChange(section.id)}
                                            className={`
                        w-full text-left p-3 rounded-lg transition-all duration-200
                        ${activeSection === section.id
                                                    ? 'bg-blue-50 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300 border-l-4 border-blue-500'
                                                    : 'text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-800'
                                                }
                      `}
                                        >
                                            <div className="flex items-center space-x-3">
                                                <span className="text-lg">{section.icon}</span>
                                                <div className="flex-1">
                                                    <div className="font-medium">{section.title}</div>
                                                    <div className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                                                        {section.description}
                                                    </div>
                                                </div>
                                            </div>
                                        </button>
                                    ))}
                                </nav>
                            </div>
                        </Card>
                    </div>

                    {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ–∫—Ü–∏–π */}
                    <div className="lg:col-span-3 space-y-6">

                        {/* –°–µ–∫—Ü–∏—è: –ü—Ä–æ—Ñ–∏–ª—å */}
                        {activeSection === 'profile' && (
                            <Card>
                                <div className="p-6">
                                    <div className="flex items-center justify-between mb-6">
                                        <h2 className="text-xl font-semibold text-gray-900 dark:text-gray-100">
                                            üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                        </h2>
                                        <Button
                                            onClick={() => saveSettings('profile')}
                                            disabled={isSaving}
                                        >
                                            {isSaving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                                        </Button>
                                    </div>

                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                                –ü–æ–ª–Ω–æ–µ –∏–º—è
                                            </label>
                                            <input
                                                type="text"
                                                value={userProfile.fullName}
                                                onChange={(e) => setUserProfile(prev => ({ ...prev, fullName: e.target.value }))}
                                                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
                                                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                                            />
                                        </div>

                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                                Email –∞–¥—Ä–µ—Å
                                            </label>
                                            <input
                                                type="email"
                                                value={userProfile.email}
                                                onChange={(e) => setUserProfile(prev => ({ ...prev, email: e.target.value }))}
                                                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
                                                placeholder="user@example.com"
                                            />
                                        </div>

                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                                –î–æ–ª–∂–Ω–æ—Å—Ç—å
                                            </label>
                                            <input
                                                type="text"
                                                value={userProfile.position}
                                                onChange={(e) => setUserProfile(prev => ({ ...prev, position: e.target.value }))}
                                                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
                                                placeholder="–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
                                            />
                                        </div>

                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                                –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
                                            </label>
                                            <input
                                                type="text"
                                                value={userProfile.organization}
                                                onChange={(e) => setUserProfile(prev => ({ ...prev, organization: e.target.value }))}
                                                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
                                                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"
                                            />
                                        </div>

                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                                –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
                                            </label>
                                            <select
                                                value={userProfile.timezone}
                                                onChange={(e) => setUserProfile(prev => ({ ...prev, timezone: e.target.value }))}
                                                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
                                            >
                                                <option value="Europe/Moscow">–ú–æ—Å–∫–≤–∞ (UTC+3)</option>
                                                <option value="Europe/Kiev">–ö–∏–µ–≤ (UTC+2)</option>
                                                <option value="Europe/London">–õ–æ–Ω–¥–æ–Ω (UTC+0)</option>
                                                <option value="America/New_York">–ù—å—é-–ô–æ—Ä–∫ (UTC-5)</option>
                                            </select>
                                        </div>

                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                                –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                                            </label>
                                            <select
                                                value={userProfile.language}
                                                onChange={(e) => setUserProfile(prev => ({ ...prev, language: e.target.value }))}
                                                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
                                            >
                                                <option value="ru">–†—É—Å—Å–∫–∏–π</option>
                                                <option value="en">English</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </Card>
                        )}

                        {/* –°–µ–∫—Ü–∏—è: –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å */}
                        {activeSection === 'security' && (
                            <div className="space-y-6">
                                <Card>
                                    <div className="p-6">
                                        <div className="flex items-center justify-between mb-6">
                                            <h2 className="text-xl font-semibold text-gray-900 dark:text-gray-100">
                                                üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                                            </h2>
                                            <Button
                                                onClick={() => saveSettings('security')}
                                                disabled={isSaving}
                                            >
                                                {isSaving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                                            </Button>
                                        </div>

                                        <div className="space-y-6">
                                            {/* –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è */}
                                            <div className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                                                <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4">
                                                    –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                                                </h3>

                                                <div className="flex items-center justify-between">
                                                    <div>
                                                        <p className="text-gray-700 dark:text-gray-300">
                                                            –í–∫–ª—é—á–∏—Ç—å TOTP –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
                                                        </p>
                                                        <p className="text-sm text-gray-500 dark:text-gray-400">
                                                            –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –≤–∞—à–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
                                                        </p>
                                                    </div>
                                                    <label className="relative inline-flex items-center cursor-pointer">
                                                        <input
                                                            type="checkbox"
                                                            checked={securitySettings.totpEnabled}
                                                            onChange={(e) => setSecuritySettings(prev => ({
                                                                ...prev,
                                                                totpEnabled: e.target.checked
                                                            }))}
                                                            className="sr-only peer"
                                                        />
                                                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                                                    </label>
                                                </div>
                                            </div>

                                            {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–∏ */}
                                            <div className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                                                <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4">
                                                    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏
                                                </h3>

                                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                                    <div>
                                                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                                            –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–µ—Å—Å–∏–∏ (–¥–Ω–∏)
                                                        </label>
                                                        <select
                                                            value={securitySettings.sessionLifetime}
                                                            onChange={(e) => setSecuritySettings(prev => ({
                                                                ...prev,
                                                                sessionLifetime: parseInt(e.target.value)
                                                            }))}
                                                            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
                                                        >
                                                            <option value={1}>1 –¥–µ–Ω—å</option>
                                                            <option value={7}>7 –¥–Ω–µ–π</option>
                                                            <option value={30}>30 –¥–Ω–µ–π</option>
                                                            <option value={90}>90 –¥–Ω–µ–π</option>
                                                        </select>
                                                    </div>

                                                    <div className="space-y-3">
                                                        <label className="flex items-center space-x-2">
                                                            <input
                                                                type="checkbox"
                                                                checked={securitySettings.autoLogout}
                                                                onChange={(e) => setSecuritySettings(prev => ({
                                                                    ...prev,
                                                                    autoLogout: e.target.checked
                                                                }))}
                                                                className="rounded text-blue-600"
                                                            />
                                                            <span className="text-sm text-gray-700 dark:text-gray-300">
                                                                –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã—Ö–æ–¥ –ø—Ä–∏ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–∏
                                                            </span>
                                                        </label>

                                                        <label className="flex items-center space-x-2">
                                                            <input
                                                                type="checkbox"
                                                                checked={securitySettings.loginNotifications}
                                                                onChange={(e) => setSecuritySettings(prev => ({
                                                                    ...prev,
                                                                    loginNotifications: e.target.checked
                                                                }))}
                                                                className="rounded text-blue-600"
                                                            />
                                                            <span className="text-sm text-gray-700 dark:text-gray-300">
                                                                –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ö–æ–¥–∞—Ö
                                                            </span>
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </Card>

                                {/* API –∫–ª—é—á–∏ */}
                                <Card>
                                    <div className="p-6">
                                        <div className="flex items-center justify-between mb-6">
                                            <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100">
                                                üîë API –∫–ª—é—á–∏
                                            </h3>
                                            <Button
                                                onClick={() => setShowApiKeyModal(true)}
                                            >
                                                + –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á
                                            </Button>
                                        </div>

                                        {securitySettings.apiKeys.length === 0 ? (
                                            <div className="text-center py-8">
                                                <div className="text-gray-400 text-4xl mb-4">üîë</div>
                                                <h4 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">
                                                    –ù–µ—Ç API –∫–ª—é—á–µ–π
                                                </h4>
                                                <p className="text-gray-600 dark:text-gray-400">
                                                    –°–æ–∑–¥–∞–π—Ç–µ API –∫–ª—é—á –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
                                                </p>
                                            </div>
                                        ) : (
                                            <div className="space-y-3">
                                                {securitySettings.apiKeys.map((key) => (
                                                    <div key={key.id} className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                                                        <div className="flex items-center justify-between">
                                                            <div className="flex-1">
                                                                <div className="font-medium text-gray-900 dark:text-gray-100">
                                                                    {key.name}
                                                                </div>
                                                                <div className="text-sm text-gray-600 dark:text-gray-400 space-x-4">
                                                                    <span>–°–æ–∑–¥–∞–Ω: {formatDate(key.createdAt)}</span>
                                                                    {key.lastUsed && (
                                                                        <span>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {formatDate(key.lastUsed)}</span>
                                                                    )}
                                                                </div>
                                                                <div className="mt-2">
                                                                    <code className="text-xs bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded">
                                                                        {key.key.substring(0, 20)}...
                                                                    </code>
                                                                </div>
                                                            </div>
                                                            <div className="flex items-center space-x-2">
                                                                <StatusIndicator
                                                                    status={key.isActive ? 'online' : 'offline'}
                                                                    size="sm"
                                                                />
                                                                <Button
                                                                    variant="outline"
                                                                    size="sm"
                                                                    onClick={() => setEditingApiKey(key)}
                                                                >
                                                                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                                                                </Button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                ))}
                                            </div>
                                        )}
                                    </div>
                                </Card>
                            </div>
                        )}

                        {/* –°–µ–∫—Ü–∏—è: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ */}
                        {activeSection === 'scanning' && (
                            <Card>
                                <div className="p-6">
                                    <div className="flex items-center justify-between mb-6">
                                        <h2 className="text-xl font-semibold text-gray-900 dark:text-gray-100">
                                            üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                                        </h2>
                                        <Button
                                            onClick={() => saveSettings('scanning')}
                                            disabled={isSaving}
                                        >
                                            {isSaving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                                        </Button>
                                    </div>

                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                                –ü—Ä–æ—Ñ–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                                            </label>
                                            <select
                                                value={scanningSettings.defaultProfile}
                                                onChange={(e) => setScanningSettings(prev => ({
                                                    ...prev,
                                                    defaultProfile: e.target.value
                                                }))}
                                                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
                                            >
                                                <option value="quick">‚ö° –ë—ã—Å—Ç—Ä–æ–µ</option>
                                                <option value="balanced">‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ</option>
                                                <option value="thorough">üîç –¢—â–∞—Ç–µ–ª—å–Ω–æ–µ</option>
                                                <option value="stealth">üê±‚Äçüë§ –°–∫—Ä—ã—Ç–Ω–æ–µ</option>
                                            </select>
                                        </div>

                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                                –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
                                            </label>
                                            <input
                                                type="number"
                                                min={1}
                                                max={10}
                                                value={scanningSettings.maxConcurrentScans}
                                                onChange={(e) => setScanningSettings(prev => ({
                                                    ...prev,
                                                    maxConcurrentScans: parseInt(e.target.value)
                                                }))}
                                                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
                                            />
                                        </div>

                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                                –¢–∞–π–º–∞—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Å–µ–∫—É–Ω–¥—ã)
                                            </label>
                                            <input
                                                type="number"
                                                min={30}
                                                max={3600}
                                                value={scanningSettings.defaultTimeout}
                                                onChange={(e) => setScanningSettings(prev => ({
                                                    ...prev,
                                                    defaultTimeout: parseInt(e.target.value)
                                                }))}
                                                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
                                            />
                                        </div>

                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                                –ü–æ—Ä—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                                            </label>
                                            <select
                                                value={scanningSettings.defaultPorts}
                                                onChange={(e) => setScanningSettings(prev => ({
                                                    ...prev,
                                                    defaultPorts: e.target.value
                                                }))}
                                                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
                                            >
                                                <option value="common">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ—Ä—Ç—ã</option>
                                                <option value="top-1000">–¢–æ–ø 1000 –ø–æ—Ä—Ç–æ–≤</option>
                                                <option value="all">–í—Å–µ –ø–æ—Ä—Ç—ã</option>
                                                <option value="custom">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ</option>
                                            </select>
                                        </div>
                                    </div>

                                    <div className="mt-6 space-y-4">
                                        <label className="flex items-center space-x-2">
                                            <input
                                                type="checkbox"
                                                checked={scanningSettings.autoSaveResults}
                                                onChange={(e) => setScanningSettings(prev => ({
                                                    ...prev,
                                                    autoSaveResults: e.target.checked
                                                }))}
                                                className="rounded text-blue-600"
                                            />
                                            <span className="text-sm text-gray-700 dark:text-gray-300">
                                                –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                                            </span>
                                        </label>

                                        <label className="flex items-center space-x-2">
                                            <input
                                                type="checkbox"
                                                checked={scanningSettings.enableScriptScan}
                                                onChange={(e) => setScanningSettings(prev => ({
                                                    ...prev,
                                                    enableScriptScan: e.target.checked
                                                }))}
                                                className="rounded text-blue-600"
                                            />
                                            <span className="text-sm text-gray-700 dark:text-gray-300">
                                                –í–∫–ª—é—á–∞—Ç—å —Å–∫—Ä–∏–ø—Ç—ã NSE –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                                            </span>
                                        </label>
                                    </div>
                                </div>
                            </Card>
                        )}

                        {/* –°–µ–∫—Ü–∏—è: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
                        {activeSection === 'notifications' && (
                            <Card>
                                <div className="p-6">
                                    <div className="flex items-center justify-between mb-6">
                                        <h2 className="text-xl font-semibold text-gray-900 dark:text-gray-100">
                                            üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                                        </h2>
                                        <Button
                                            onClick={() => saveSettings('notifications')}
                                            disabled={isSaving}
                                        >
                                            {isSaving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                                        </Button>
                                    </div>

                                    <div className="space-y-6">
                                        {/* Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
                                        <div className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                                            <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4">
                                                üìß Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                                            </h3>

                                            <div className="space-y-4">
                                                <label className="flex items-center space-x-2">
                                                    <input
                                                        type="checkbox"
                                                        checked={notificationSettings.emailNotifications}
                                                        onChange={(e) => setNotificationSettings(prev => ({
                                                            ...prev,
                                                            emailNotifications: e.target.checked
                                                        }))}
                                                        className="rounded text-blue-600"
                                                    />
                                                    <span className="text-sm text-gray-700 dark:text-gray-300">
                                                        –í–∫–ª—é—á–∏—Ç—å email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                                                    </span>
                                                </label>

                                                {notificationSettings.emailNotifications && (
                                                    <div>
                                                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                                            Email –∞–¥—Ä–µ—Å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                                                        </label>
                                                        <input
                                                            type="email"
                                                            value={notificationSettings.emailAddress}
                                                            onChange={(e) => setNotificationSettings(prev => ({
                                                                ...prev,
                                                                emailAddress: e.target.value
                                                            }))}
                                                            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
                                                            placeholder="notifications@example.com"
                                                        />
                                                    </div>
                                                )}
                                            </div>
                                        </div>

                                        {/* Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
                                        <div className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                                            <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4">
                                                üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                                            </h3>

                                            <div className="space-y-4">
                                                <label className="flex items-center space-x-2">
                                                    <input
                                                        type="checkbox"
                                                        checked={notificationSettings.telegramEnabled}
                                                        onChange={(e) => setNotificationSettings(prev => ({
                                                            ...prev,
                                                            telegramEnabled: e.target.checked
                                                        }))}
                                                        className="rounded text-blue-600"
                                                    />
                                                    <span className="text-sm text-gray-700 dark:text-gray-300">
                                                        –í–∫–ª—é—á–∏—Ç—å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                                                    </span>
                                                </label>

                                                {notificationSettings.telegramEnabled && (
                                                    <div>
                                                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                                            Chat ID Telegram
                                                        </label>
                                                        <input
                                                            type="text"
                                                            value={notificationSettings.telegramChatId}
                                                            onChange={(e) => setNotificationSettings(prev => ({
                                                                ...prev,
                                                                telegramChatId: e.target.value
                                                            }))}
                                                            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
                                                            placeholder="@username –∏–ª–∏ chat_id"
                                                        />
                                                    </div>
                                                )}
                                            </div>
                                        </div>

                                        {/* –¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π */}
                                        <div className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                                            <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4">
                                                üìã –°–æ–±—ã—Ç–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                                            </h3>

                                            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                                                {[
                                                    { id: 'scan_completed', label: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è' },
                                                    { id: 'vulnerabilities_found', label: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π' },
                                                    { id: 'scan_failed', label: '–û—à–∏–±–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è' },
                                                    { id: 'system_alerts', label: '–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' }
                                                ].map((event) => (
                                                    <label key={event.id} className="flex items-center space-x-2">
                                                        <input
                                                            type="checkbox"
                                                            checked={notificationSettings.notificationEvents.includes(event.id)}
                                                            onChange={(e) => {
                                                                const newEvents = e.target.checked
                                                                    ? [...notificationSettings.notificationEvents, event.id]
                                                                    : notificationSettings.notificationEvents.filter(id => id !== event.id);
                                                                setNotificationSettings(prev => ({
                                                                    ...prev,
                                                                    notificationEvents: newEvents
                                                                }));
                                                            }}
                                                            className="rounded text-blue-600"
                                                        />
                                                        <span className="text-sm text-gray-700 dark:text-gray-300">
                                                            {event.label}
                                                        </span>
                                                    </label>
                                                ))}
                                            </div>
                                        </div>

                                        {/* –¢–∏—Ö–∏–µ —á–∞—Å—ã */}
                                        <div className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                                            <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4">
                                                üåô –¢–∏—Ö–∏–µ —á–∞—Å—ã
                                            </h3>

                                            <div className="space-y-4">
                                                <label className="flex items-center space-x-2">
                                                    <input
                                                        type="checkbox"
                                                        checked={notificationSettings.quietHours.enabled}
                                                        onChange={(e) => setNotificationSettings(prev => ({
                                                            ...prev,
                                                            quietHours: { ...prev.quietHours, enabled: e.target.checked }
                                                        }))}
                                                        className="rounded text-blue-600"
                                                    />
                                                    <span className="text-sm text-gray-700 dark:text-gray-300">
                                                        –í–∫–ª—é—á–∏—Ç—å —Ç–∏—Ö–∏–µ —á–∞—Å—ã
                                                    </span>
                                                </label>

                                                {notificationSettings.quietHours.enabled && (
                                                    <div className="grid grid-cols-2 gap-4">
                                                        <div>
                                                            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                                                –ù–∞—á–∞–ª–æ
                                                            </label>
                                                            <input
                                                                type="time"
                                                                value={notificationSettings.quietHours.startTime}
                                                                onChange={(e) => setNotificationSettings(prev => ({
                                                                    ...prev,
                                                                    quietHours: { ...prev.quietHours, startTime: e.target.value }
                                                                }))}
                                                                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
                                                            />
                                                        </div>
                                                        <div>
                                                            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                                                –û–∫–æ–Ω—á–∞–Ω–∏–µ
                                                            </label>
                                                            <input
                                                                type="time"
                                                                value={notificationSettings.quietHours.endTime}
                                                                onChange={(e) => setNotificationSettings(prev => ({
                                                                    ...prev,
                                                                    quietHours: { ...prev.quietHours, endTime: e.target.value }
                                                                }))}
                                                                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
                                                            />
                                                        </div>
                                                    </div>
                                                )}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </Card>
                        )}

                        {/* –°–µ–∫—Ü–∏—è: –í–Ω–µ—à–Ω–∏–π –≤–∏–¥ */}
                        {activeSection === 'appearance' && (
                            <Card>
                                <div className="p-6">
                                    <div className="flex items-center justify-between mb-6">
                                        <h2 className="text-xl font-semibold text-gray-900 dark:text-gray-100">
                                            üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
                                        </h2>
                                        <Button
                                            onClick={() => saveSettings('appearance')}
                                            disabled={isSaving}
                                        >
                                            {isSaving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                                        </Button>
                                    </div>

                                    <div className="space-y-6">
                                        {/* –í—ã–±–æ—Ä —Ç–µ–º—ã */}
                                        <div>
                                            <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4">
                                                üåì –¶–≤–µ—Ç–æ–≤–∞—è —Ç–µ–º–∞
                                            </h3>
                                            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                                {[
                                                    { id: 'light', name: '–°–≤–µ—Ç–ª–∞—è', icon: '‚òÄÔ∏è', description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ —Å–≤–µ—Ç–ª–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ' },
                                                    { id: 'dark', name: '–¢–µ–º–Ω–∞—è', icon: 'üåô', description: '–¢–µ–º–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–æ—á—å—é' },
                                                    { id: 'auto', name: '–ê–≤—Ç–æ', icon: 'üåó', description: '–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ —Å–∏—Å—Ç–µ–º–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º' }
                                                ].map((themeOption) => (
                                                    <label
                                                        key={themeOption.id}
                                                        className={`
                              relative p-4 border-2 rounded-lg cursor-pointer transition-all
                              ${themeSettings.theme === themeOption.id
                                                                ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                                                                : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'
                                                            }
                            `}
                                                    >
                                                        <input
                                                            type="radio"
                                                            name="theme"
                                                            value={themeOption.id}
                                                            checked={themeSettings.theme === themeOption.id}
                                                            onChange={(e) => setThemeSettings(prev => ({
                                                                ...prev,
                                                                theme: e.target.value as any
                                                            }))}
                                                            className="sr-only"
                                                        />
                                                        <div className="flex items-center space-x-3">
                                                            <span className="text-2xl">{themeOption.icon}</span>
                                                            <div>
                                                                <div className="font-medium text-gray-900 dark:text-gray-100">
                                                                    {themeOption.name}
                                                                </div>
                                                                <div className="text-sm text-gray-600 dark:text-gray-400">
                                                                    {themeOption.description}
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </label>
                                                ))}
                                            </div>
                                        </div>

                                        {/* –ê–∫—Ü–µ–Ω—Ç–Ω—ã–π —Ü–≤–µ—Ç */}
                                        <div>
                                            <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4">
                                                üéØ –ê–∫—Ü–µ–Ω—Ç–Ω—ã–π —Ü–≤–µ—Ç
                                            </h3>
                                            <div className="grid grid-cols-3 md:grid-cols-6 gap-3">
                                                {[
                                                    { id: 'blue', name: '–°–∏–Ω–∏–π', color: 'bg-blue-500' },
                                                    { id: 'green', name: '–ó–µ–ª–µ–Ω—ã–π', color: 'bg-green-500' },
                                                    { id: 'red', name: '–ö—Ä–∞—Å–Ω—ã–π', color: 'bg-red-500' },
                                                    { id: 'purple', name: '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π', color: 'bg-purple-500' },
                                                    { id: 'orange', name: '–û—Ä–∞–Ω–∂–µ–≤—ã–π', color: 'bg-orange-500' },
                                                    { id: 'teal', name: '–ë–∏—Ä—é–∑–æ–≤—ã–π', color: 'bg-teal-500' }
                                                ].map((accent) => (
                                                    <label
                                                        key={accent.id}
                                                        className={`
                              relative p-3 border-2 rounded-lg cursor-pointer transition-all
                              ${themeSettings.accent === accent.id
                                                                ? 'border-gray-900 dark:border-gray-100'
                                                                : 'border-gray-200 dark:border-gray-700 hover:border-gray-300'
                                                            }
                            `}
                                                    >
                                                        <input
                                                            type="radio"
                                                            name="accent"
                                                            value={accent.id}
                                                            checked={themeSettings.accent === accent.id}
                                                            onChange={(e) => setThemeSettings(prev => ({
                                                                ...prev,
                                                                accent: e.target.value
                                                            }))}
                                                            className="sr-only"
                                                        />
                                                        <div className="text-center">
                                                            <div className={`w-8 h-8 ${accent.color} rounded-full mx-auto mb-2`}></div>
                                                            <div className="text-xs text-gray-600 dark:text-gray-400">
                                                                {accent.name}
                                                            </div>
                                                        </div>
                                                    </label>
                                                ))}
                                            </div>
                                        </div>

                                        {/* –†–∞–∑–º–µ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ */}
                                        <div>
                                            <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4">
                                                üìè –†–∞–∑–º–µ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                                            </h3>
                                            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                                {[
                                                    { id: 'compact', name: '–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π', description: '–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ' },
                                                    { id: 'medium', name: '–°—Ä–µ–¥–Ω–∏–π', description: '–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä' },
                                                    { id: 'large', name: '–ö—Ä—É–ø–Ω—ã–π', description: '–£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã' }
                                                ].map((sizeOption) => (
                                                    <label
                                                        key={sizeOption.id}
                                                        className={`
                              relative p-4 border-2 rounded-lg cursor-pointer transition-all
                              ${themeSettings.size === sizeOption.id
                                                                ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                                                                : 'border-gray-200 dark:border-gray-700 hover:border-gray-300'
                                                            }
                            `}
                                                    >
                                                        <input
                                                            type="radio"
                                                            name="size"
                                                            value={sizeOption.id}
                                                            checked={themeSettings.size === sizeOption.id}
                                                            onChange={(e) => setThemeSettings(prev => ({
                                                                ...prev,
                                                                size: e.target.value as any
                                                            }))}
                                                            className="sr-only"
                                                        />
                                                        <div>
                                                            <div className="font-medium text-gray-900 dark:text-gray-100">
                                                                {sizeOption.name}
                                                            </div>
                                                            <div className="text-sm text-gray-600 dark:text-gray-400">
                                                                {sizeOption.description}
                                                            </div>
                                                        </div>
                                                    </label>
                                                ))}
                                            </div>
                                        </div>

                                        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
                                        <div className="space-y-4">
                                            <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100">
                                                ‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                                            </h3>

                                            <div className="space-y-3">
                                                <div>
                                                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                                        –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞: {themeSettings.fontSize}px
                                                    </label>
                                                    <input
                                                        type="range"
                                                        min={12}
                                                        max={18}
                                                        value={themeSettings.fontSize}
                                                        onChange={(e) => setThemeSettings(prev => ({
                                                            ...prev,
                                                            fontSize: parseInt(e.target.value)
                                                        }))}
                                                        className="w-full"
                                                    />
                                                </div>

                                                <label className="flex items-center space-x-2">
                                                    <input
                                                        type="checkbox"
                                                        checked={themeSettings.highContrast}
                                                        onChange={(e) => setThemeSettings(prev => ({
                                                            ...prev,
                                                            highContrast: e.target.checked
                                                        }))}
                                                        className="rounded text-blue-600"
                                                    />
                                                    <span className="text-sm text-gray-700 dark:text-gray-300">
                                                        –í—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç (–¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏)
                                                    </span>
                                                </label>

                                                <label className="flex items-center space-x-2">
                                                    <input
                                                        type="checkbox"
                                                        checked={themeSettings.animations}
                                                        onChange={(e) => setThemeSettings(prev => ({
                                                            ...prev,
                                                            animations: e.target.checked
                                                        }))}
                                                        className="rounded text-blue-600"
                                                    />
                                                    <span className="text-sm text-gray-700 dark:text-gray-300">
                                                        –ê–Ω–∏–º–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                                                    </span>
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </Card>
                        )}

                        {/* –°–µ–∫—Ü–∏—è: –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ */}
                        {activeSection === 'backup' && (
                            <Card>
                                <div className="p-6">
                                    <h2 className="text-xl font-semibold text-gray-900 dark:text-gray-100 mb-6">
                                        üíæ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
                                    </h2>

                                    <div className="space-y-6">
                                        {/* –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
                                        <div className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                                            <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4">
                                                üì§ –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
                                            </h3>
                                            <p className="text-gray-600 dark:text-gray-400 mb-4">
                                                –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                                            </p>
                                            <Button onClick={handleExportSettings}>
                                                üìÅ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                                            </Button>
                                        </div>

                                        {/* –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
                                        <div className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                                            <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4">
                                                üì• –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
                                            </h3>
                                            <p className="text-gray-600 dark:text-gray-400 mb-4">
                                                –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
                                            </p>
                                            <div className="flex items-center space-x-4">
                                                <label className="cursor-pointer">
                                                    <input
                                                        type="file"
                                                        accept=".json"
                                                        onChange={handleImportSettings}
                                                        className="hidden"
                                                    />
                                                    <span className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                                                        üìÇ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª
                                                    </span>
                                                </label>
                                            </div>
                                        </div>

                                        {/* –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
                                        <div className="border border-red-200 dark:border-red-800 rounded-lg p-4">
                                            <h3 className="text-lg font-medium text-red-900 dark:text-red-100 mb-4">
                                                üîÑ –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫
                                            </h3>
                                            <p className="text-red-600 dark:text-red-400 mb-4">
                                                ‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å–±—Ä–æ—Å–∏—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                                            </p>
                                            <Button
                                                onClick={() => setShowResetModal(true)}
                                                className="bg-red-600 hover:bg-red-700 text-white"
                                            >
                                                üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                                            </Button>
                                        </div>
                                    </div>
                                </div>
                            </Card>
                        )}

                        {/* –°–µ–∫—Ü–∏—è: –°–∏—Å—Ç–µ–º–∞ */}
                        {activeSection === 'system' && (
                            <Card>
                                <div className="p-6">
                                    <h2 className="text-xl font-semibold text-gray-900 dark:text-gray-100 mb-6">
                                        ‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                                    </h2>

                                    <div className="space-y-6">
                                        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ */}
                                        <div className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                                            <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4">
                                                üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
                                            </h3>
                                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                                                <div className="flex justify-between">
                                                    <span className="text-gray-600 dark:text-gray-400">–í–µ—Ä—Å–∏—è:</span>
                                                    <span className="font-medium">IP Roast v2.1.0</span>
                                                </div>
                                                <div className="flex justify-between">
                                                    <span className="text-gray-600 dark:text-gray-400">–°–±–æ—Ä–∫–∞:</span>
                                                    <span className="font-medium">2025.01.15</span>
                                                </div>
                                                <div className="flex justify-between">
                                                    <span className="text-gray-600 dark:text-gray-400">–ë—Ä–∞—É–∑–µ—Ä:</span>
                                                    <span className="font-medium">{navigator.userAgent.split(' ')[0]}</span>
                                                </div>
                                                <div className="flex justify-between">
                                                    <span className="text-gray-600 dark:text-gray-400">–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</span>
                                                    <span className="font-medium">{navigator.platform}</span>
                                                </div>
                                            </div>
                                        </div>

                                        {/* –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ */}
                                        <div className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                                            <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4">
                                                üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
                                            </h3>
                                            <div className="space-y-3">
                                                <div className="flex justify-between items-center">
                                                    <span className="text-gray-600 dark:text-gray-400">LocalStorage:</span>
                                                    <span className="font-medium">
                                                        {formatFileSize(JSON.stringify(localStorage).length)}
                                                    </span>
                                                </div>
                                                <div className="flex justify-between items-center">
                                                    <span className="text-gray-600 dark:text-gray-400">–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</span>
                                                    <span className="font-medium">
                                                        {Object.keys(localStorage).filter(key => key.startsWith('ip-roast')).length} –∑–∞–ø–∏—Å–µ–π
                                                    </span>
                                                </div>
                                            </div>
                                        </div>

                                        {/* –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ */}
                                        <div className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                                            <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4">
                                                üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                                            </h3>
                                            <div className="space-y-3">
                                                <div className="flex justify-between items-center">
                                                    <span className="text-gray-600 dark:text-gray-400">WebSocket –ø–æ–¥–¥–µ—Ä–∂–∫–∞:</span>
                                                    <StatusIndicator
                                                        status={typeof WebSocket !== 'undefined' ? 'online' : 'offline'}
                                                        size="sm"
                                                    />
                                                </div>
                                                <div className="flex justify-between items-center">
                                                    <span className="text-gray-600 dark:text-gray-400">LocalStorage:</span>
                                                    <StatusIndicator
                                                        status={typeof Storage !== 'undefined' ? 'online' : 'offline'}
                                                        size="sm"
                                                    />
                                                </div>
                                                <div className="flex justify-between items-center">
                                                    <span className="text-gray-600 dark:text-gray-400">Service Worker:</span>
                                                    <StatusIndicator
                                                        status={'serviceWorker' in navigator ? 'online' : 'offline'}
                                                        size="sm"
                                                    />
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </Card>
                        )}
                    </div>
                </div>
            </div>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
            {showResetModal && (
                <Modal
                    isOpen={true}
                    onClose={() => setShowResetModal(false)}
                    title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
                >
                    <div className="space-y-4">
                        <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4">
                            <div className="flex items-start space-x-3">
                                <span className="text-red-600 dark:text-red-400 text-xl">‚ö†Ô∏è</span>
                                <div>
                                    <h4 className="font-medium text-red-800 dark:text-red-200">
                                        –í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å
                                    </h4>
                                    <p className="text-sm text-red-700 dark:text-red-300 mt-1">
                                        –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
                                        –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º.
                                    </p>
                                </div>
                            </div>
                        </div>

                        <p className="text-gray-600 dark:text-gray-400">
                            –ë—É–¥—É—Ç —Å–±—Ä–æ—à–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
                        </p>
                        <ul className="list-disc list-inside text-sm text-gray-600 dark:text-gray-400 space-y-1">
                            <li>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</li>
                            <li>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</li>
                            <li>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</li>
                            <li>–í–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∏ —Ç–µ–º–∞</li>
                            <li>–õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</li>
                        </ul>

                        <div className="flex justify-end space-x-3 pt-4">
                            <Button
                                variant="outline"
                                onClick={() => setShowResetModal(false)}
                            >
                                –û—Ç–º–µ–Ω–∏—Ç—å
                            </Button>
                            <Button
                                onClick={() => {
                                    handleResetSettings();
                                    setShowResetModal(false);
                                }}
                                className="bg-red-600 hover:bg-red-700 text-white"
                            >
                                üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                            </Button>
                        </div>
                    </div>
                </Modal>
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è API –∫–ª—é—á–∞ */}
            {showApiKeyModal && (
                <Modal
                    isOpen={true}
                    onClose={() => setShowApiKeyModal(false)}
                    title="–°–æ–∑–¥–∞–Ω–∏–µ API –∫–ª—é—á–∞"
                >
                    <ApiKeyForm
                        onSubmit={handleCreateApiKey}
                        onCancel={() => setShowApiKeyModal(false)}
                    />
                </Modal>
            )}
        </div>
    );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è API –∫–ª—é—á–∞
interface ApiKeyFormProps {
    onSubmit: (keyData: Partial<ApiKey>) => void;
    onCancel: () => void;
}

const ApiKeyForm: React.FC<ApiKeyFormProps> = ({ onSubmit, onCancel }) => {
    const [formData, setFormData] = useState({
        name: '',
        permissions: ['read'] as string[]
    });

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        if (formData.name.trim()) {
            onSubmit(formData);
        }
    };

    const togglePermission = (permission: string) => {
        setFormData(prev => ({
            ...prev,
            permissions: prev.permissions.includes(permission)
                ? prev.permissions.filter(p => p !== permission)
                : [...prev.permissions, permission]
        }));
    };

    return (
        <form onSubmit={handleSubmit} className="space-y-4">
            <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª—é—á–∞
                </label>
                <input
                    type="text"
                    value={formData.name}
                    onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
                    placeholder="–ú–æ–π API –∫–ª—é—á"
                    required
                />
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    –†–∞–∑—Ä–µ—à–µ–Ω–∏—è
                </label>
                <div className="space-y-2">
                    {[
                        { id: 'read', label: '–ß—Ç–µ–Ω–∏–µ' },
                        { id: 'write', label: '–ó–∞–ø–∏—Å—å' },
                        { id: 'scan', label: '–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è' },
                        { id: 'admin', label: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ' }
                    ].map((permission) => (
                        <label key={permission.id} className="flex items-center space-x-2">
                            <input
                                type="checkbox"
                                checked={formData.permissions.includes(permission.id)}
                                onChange={() => togglePermission(permission.id)}
                                className="rounded text-blue-600"
                            />
                            <span className="text-sm text-gray-700 dark:text-gray-300">
                                {permission.label}
                            </span>
                        </label>
                    ))}
                </div>
            </div>

            <div className="flex justify-end space-x-3 pt-4">
                <Button variant="outline" onClick={onCancel}>
                    –û—Ç–º–µ–Ω–∏—Ç—å
                </Button>
                <Button type="submit">
                    üîë –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á
                </Button>
            </div>
        </form>
    );
};

export default SettingsPage;
