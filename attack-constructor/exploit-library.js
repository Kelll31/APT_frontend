/**
 * IP Roast Enterprise 4.0 — Exploit Library
 * Библиотека модулей атак для корпоративной платформы
 * Версия: Enterprise 4.0
 */

import { MODULE_CATEGORIES } from './AttackModuleConstructor.js';
import { debounce } from '../shared/utils/helpers.js';
import './exploit-library.css';

export class ExploitLibrary {
    constructor(containerId, options = {}) {
        this.container = document.getElementById(containerId);
        this.options = {
            showSearch: true,
            showCategories: true,
            itemsPerPage: 10,
            ...options
        };
        this.searchQuery = '';
        this.selectedCategory = 'all';
        this.page = 1;
        this.filteredModules = [];
        this.init();
    }

    init() {
        this.render();
        this.bindEvents();
        this.updateLibrary();
    }

    render() {
        this.container.innerHTML = `
      <div class="exploit-library">
        <div class="exploit-library__controls">
          ${this.options.showSearch ? `
            <input type="text" class="exploit-library__search" placeholder="Поиск модулей…">
          ` : ''}
          ${this.options.showCategories ? `
            <select class="exploit-library__category">
              <option value="all">Все категории</option>
              ${MODULE_CATEGORIES.map(cat => `
                <option value="${cat.id}">${cat.name}</option>
              `).join('')}
            </select>
          ` : ''}
        </div>
        <div class="exploit-library__list"></div>
        <div class="exploit-library__pagination"></div>
      </div>
    `;
        this.searchInput = this.container.querySelector('.exploit-library__search');
        this.categorySelect = this.container.querySelector('.exploit-library__category');
        this.listEl = this.container.querySelector('.exploit-library__list');
        this.paginationEl = this.container.querySelector('.exploit-library__pagination');
    }

    bindEvents() {
        if (this.searchInput) {
            this.searchInput.addEventListener('input',
                debounce(e => {
                    this.searchQuery = e.target.value.trim().toLowerCase();
                    this.page = 1;
                    this.updateLibrary();
                }, 300)
            );
        }
        if (this.categorySelect) {
            this.categorySelect.addEventListener('change', e => {
                this.selectedCategory = e.target.value;
                this.page = 1;
                this.updateLibrary();
            });
        }
        this.paginationEl.addEventListener('click', e => {
            if (e.target.matches('.page-btn')) {
                this.page = parseInt(e.target.dataset.page, 10);
                this.updateLibrary();
            }
        });
    }

    updateLibrary() {
        // Gather all modules
        let all = MODULE_CATEGORIES.flatMap(cat =>
            cat.modules.map(m => ({ ...m, category: cat.id }))
        );
        // Filter by category
        if (this.selectedCategory !== 'all') {
            all = all.filter(m => m.category === this.selectedCategory);
        }
        // Filter by search
        if (this.searchQuery) {
            all = all.filter(m =>
                m.name.toLowerCase().includes(this.searchQuery) ||
                m.description.toLowerCase().includes(this.searchQuery)
            );
        }
        this.filteredModules = all;
        this.renderList();
        this.renderPagination();
    }

    renderList() {
        const start = (this.page - 1) * this.options.itemsPerPage;
        const slice = this.filteredModules.slice(start, start + this.options.itemsPerPage);
        if (slice.length === 0) {
            this.listEl.innerHTML = `
        <div class="exploit-library__empty">
          <i class="fas fa-box-open"></i>
          <p>Нет модулей для отображения</p>
        </div>
      `;
            return;
        }
        this.listEl.innerHTML = slice.map(m => `
      <div class="exploit-library__item">
        <div class="exploit-library__icon"><i class="${m.icon}"></i></div>
        <div class="exploit-library__info">
          <h4 class="exploit-library__name">${m.name}</h4>
          <p class="exploit-library__desc">${m.description}</p>
        </div>
        <button class="exploit-library__btn" data-id="${m.id}">Добавить</button>
      </div>
    `).join('');
        // Bind add buttons
        this.listEl.querySelectorAll('.exploit-library__btn').forEach(btn =>
            btn.addEventListener('click', () => this.handleAdd(btn.dataset.id))
        );
    }

    renderPagination() {
        const total = this.filteredModules.length;
        const pages = Math.ceil(total / this.options.itemsPerPage);
        if (pages <= 1) {
            this.paginationEl.innerHTML = '';
            return;
        }
        let html = '';
        for (let p = 1; p <= pages; p++) {
            html += `<button class="page-btn ${p === this.page ? 'active' : ''}" data-page="${p}">${p}</button>`;
        }
        this.paginationEl.innerHTML = html;
    }

    handleAdd(moduleId) {
        const mod = MODULE_CATEGORIES
            .flatMap(c => c.modules)
            .find(m => m.id === moduleId);
        if (mod && this.options.onAdd) {
            this.options.onAdd(mod);
        }
    }
}
