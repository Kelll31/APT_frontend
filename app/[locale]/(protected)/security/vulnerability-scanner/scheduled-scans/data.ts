// Интерфейсы
export interface NotificationSettings {
    email: boolean;
    webhook: boolean;
    slack?: boolean;
    teams?: boolean;
    emailAddresses: string[];
    webhookUrl?: string;
    slackChannel?: string;
    teamsWebhook?: string;
}

export interface ScheduledScan {
    id: string;
    name: string;
    description: string;
    target: string;
    targetType: 'single_host' | 'ip_range' | 'domain' | 'subnet' | 'url' | 'network_segment' | 'asset_group';
    scanType:
    | 'quick_scan'
    | 'full_scan'
    | 'stealth_scan'
    | 'aggressive_scan'
    | 'custom_scan'
    | 'authenticated_scan'
    | 'unauthenticated_scan'
    | 'network_scan'
    | 'web_application_scan'
    | 'database_scan'
    | 'wireless_scan'
    | 'configuration_scan'
    | 'compliance_scan'
    | 'malware_scan'
    | 'patch_scan'
    | 'port_scan'
    | 'service_scan';
    schedule: {
        type: 'once' | 'daily' | 'weekly' | 'monthly';
        datetime: string;
        timezone: string;
        recurrence?: {
            interval: number;
            daysOfWeek?: number[];
            dayOfMonth?: number;
            endDate?: string;
        };
    };
    status: 'active' | 'inactive' | 'paused' | 'expired';
    isEnabled: boolean;
    createdBy: string;
    createdAt: string;
    lastRun?: string;
    nextRun: string;
    runCount: number;
    notifications: NotificationSettings;
    priority: 'low' | 'medium' | 'high' | 'critical';
    timeoutMinutes: number;
    maxRetries: number;
    tags: string[];
}

export interface ScheduleTemplate {
    id: string;
    name: string;
    description: string;
    schedule: {
        type: 'once' | 'daily' | 'weekly' | 'monthly';
        datetime: string;
        timezone: string;
        recurrence?: {
            interval: number;
            daysOfWeek?: number[];
            dayOfMonth?: number;
        };
    };
}

// Данные запланированных сканирований
export const scheduledScansData: ScheduledScan[] = [
    {
        id: 'sched-001',
        name: 'Еженедельное сканирование веб-приложений',
        description: 'Автоматическое сканирование всех веб-приложений на предмет уязвимостей безопасности',
        target: 'https://app.company.com',
        targetType: 'url',
        scanType: 'web_application_scan',
        schedule: {
            type: 'weekly',
            datetime: '2025-08-18T02:00:00Z',
            timezone: 'Europe/Moscow',
            recurrence: {
                interval: 1,
                daysOfWeek: [0]
            }
        },
        status: 'active',
        isEnabled: true,
        createdBy: 'admin@company.com',
        createdAt: '2025-08-01T10:00:00Z',
        lastRun: '2025-08-11T02:00:00Z',
        nextRun: '2025-08-18T02:00:00Z',
        runCount: 12,
        notifications: {
            email: true,
            webhook: false,
            emailAddresses: ['security@company.com', 'admin@company.com']
        },
        priority: 'high',
        timeoutMinutes: 120,
        maxRetries: 3,
        tags: ['веб-приложения', 'продакшен', 'OWASP']
    },
    {
        id: 'sched-002',
        name: 'Ежедневное сканирование критической инфраструктуры',
        description: 'Мониторинг критических серверов на предмет новых уязвимостей',
        target: '192.168.1.0/24',
        targetType: 'subnet',
        scanType: 'network_scan',
        schedule: {
            type: 'daily',
            datetime: '2025-08-16T01:00:00Z',
            timezone: 'Europe/Moscow',
            recurrence: {
                interval: 1
            }
        },
        status: 'active',
        isEnabled: true,
        createdBy: 'security@company.com',
        createdAt: '2025-07-15T14:30:00Z',
        lastRun: '2025-08-15T01:00:00Z',
        nextRun: '2025-08-16T01:00:00Z',
        runCount: 31,
        notifications: {
            email: true,
            webhook: true,
            emailAddresses: ['alerts@company.com'],
            webhookUrl: 'https://hooks.company.com/security-alerts'
        },
        priority: 'critical',
        timeoutMinutes: 60,
        maxRetries: 2,
        tags: ['критическая-инфраструктура', 'сеть', '24/7']
    },
    {
        id: 'sched-003',
        name: 'Месячное сканирование соответствия PCI DSS',
        description: 'Проверка соответствия требованиям PCI DSS для платежных систем',
        target: 'payment.company.com',
        targetType: 'domain',
        scanType: 'compliance_scan',
        schedule: {
            type: 'monthly',
            datetime: '2025-09-01T03:00:00Z',
            timezone: 'Europe/Moscow',
            recurrence: {
                interval: 1,
                dayOfMonth: 1
            }
        },
        status: 'active',
        isEnabled: true,
        createdBy: 'compliance@company.com',
        createdAt: '2025-06-01T09:00:00Z',
        lastRun: '2025-08-01T03:00:00Z',
        nextRun: '2025-09-01T03:00:00Z',
        runCount: 3,
        notifications: {
            email: true,
            webhook: false,
            emailAddresses: ['compliance@company.com', 'ciso@company.com']
        },
        priority: 'high',
        timeoutMinutes: 180,
        maxRetries: 1,
        tags: ['PCI-DSS', 'соответствие', 'платежи']
    },
    {
        id: 'sched-004',
        name: 'Быстрое сканирование новых хостов',
        description: 'Автоматическое сканирование новых хостов в сети при их обнаружении',
        target: '10.0.0.0/16',
        targetType: 'subnet',
        scanType: 'quick_scan',
        schedule: {
            type: 'daily',
            datetime: '2025-08-16T06:00:00Z',
            timezone: 'Europe/Moscow',
            recurrence: {
                interval: 6
            }
        },
        status: 'paused',
        isEnabled: false,
        createdBy: 'netops@company.com',
        createdAt: '2025-08-10T16:20:00Z',
        lastRun: '2025-08-14T18:00:00Z',
        nextRun: '2025-08-16T06:00:00Z',
        runCount: 8,
        notifications: {
            email: false,
            webhook: true,
            emailAddresses: [],
            webhookUrl: 'https://automation.company.com/new-hosts'
        },
        priority: 'medium',
        timeoutMinutes: 30,
        maxRetries: 2,
        tags: ['автоматизация', 'новые-хосты', 'мониторинг']
    },
    {
        id: 'sched-005',
        name: 'Еженедельное сканирование БД',
        description: 'Проверка безопасности всех производственных баз данных',
        target: 'Database Cluster',
        targetType: 'asset_group',
        scanType: 'database_scan',
        schedule: {
            type: 'weekly',
            datetime: '2025-08-17T04:00:00Z',
            timezone: 'Europe/Moscow',
            recurrence: {
                interval: 1,
                daysOfWeek: [6]
            }
        },
        status: 'active',
        isEnabled: true,
        createdBy: 'dba@company.com',
        createdAt: '2025-07-20T11:15:00Z',
        lastRun: '2025-08-10T04:00:00Z',
        nextRun: '2025-08-17T04:00:00Z',
        runCount: 4,
        notifications: {
            email: true,
            webhook: false,
            emailAddresses: ['dba@company.com', 'security@company.com']
        },
        priority: 'high',
        timeoutMinutes: 90,
        maxRetries: 3,
        tags: ['база-данных', 'продакшен', 'еженедельно']
    },
    {
        id: 'sched-006',
        name: 'Одноразовое сканирование после обновления',
        description: 'Проверка безопасности после планового обновления системы',
        target: 'update.staging.com',
        targetType: 'domain',
        scanType: 'full_scan',
        schedule: {
            type: 'once',
            datetime: '2025-08-20T10:00:00Z',
            timezone: 'Europe/Moscow'
        },
        status: 'active',
        isEnabled: true,
        createdBy: 'devops@company.com',
        createdAt: '2025-08-15T14:45:00Z',
        nextRun: '2025-08-20T10:00:00Z',
        runCount: 0,
        notifications: {
            email: true,
            webhook: true,
            emailAddresses: ['devops@company.com'],
            webhookUrl: 'https://ci.company.com/security-webhook'
        },
        priority: 'medium',
        timeoutMinutes: 240,
        maxRetries: 1,
        tags: ['обновление', 'staging', 'одноразово']
    }
];

// Шаблоны расписаний
export const scheduleTemplates: ScheduleTemplate[] = [
    {
        id: 'daily-2am',
        name: 'Ежедневно в 2:00',
        description: 'Запуск каждый день в 2:00 ночи',
        schedule: {
            type: 'daily',
            datetime: new Date().toISOString().split('T')[0] + 'T02:00:00Z',
            timezone: 'Europe/Moscow',
            recurrence: {
                interval: 1
            }
        }
    },
    {
        id: 'weekly-sunday',
        name: 'Еженедельно по воскресеньям',
        description: 'Запуск каждое воскресенье в 3:00',
        schedule: {
            type: 'weekly',
            datetime: new Date().toISOString().split('T')[0] + 'T03:00:00Z',
            timezone: 'Europe/Moscow',
            recurrence: {
                interval: 1,
                dayOfMonth: 4
            }
        }
    },
    {
        id: 'monthly-first',
        name: 'Ежемесячно 1 числа',
        description: 'Запуск первого числа каждого месяца в 4:00',
        schedule: {
            type: 'monthly',
            datetime: new Date().toISOString().split('T')[0] + 'T04:00:00Z',
            timezone: 'Europe/Moscow',
            recurrence: {
                interval: 1,
                dayOfMonth: 1
            }
        }
    }
];

// Статистика запланированных сканирований
export const scheduledScansStatistics = {
    total: scheduledScansData.length,
    active: scheduledScansData.filter(scan => scan.status === 'active').length,
    paused: scheduledScansData.filter(scan => scan.status === 'paused').length,
    inactive: scheduledScansData.filter(scan => scan.status === 'inactive').length,
    expired: scheduledScansData.filter(scan => scan.status === 'expired').length,
    enabled: scheduledScansData.filter(scan => scan.isEnabled).length,
    disabled: scheduledScansData.filter(scan => !scan.isEnabled).length,
    nextHour: scheduledScansData.filter(scan => {
        const nextRun = new Date(scan.nextRun);
        const now = new Date();
        return nextRun.getTime() - now.getTime() <= 3600000;
    }).length
};

// Уникальные значения для фильтров
export const uniqueScanTypes = Array.from(new Set(scheduledScansData.map(scan => scan.scanType)));
export const uniqueTargetTypes = Array.from(new Set(scheduledScansData.map(scan => scan.targetType)));
export const uniqueStatuses = Array.from(new Set(scheduledScansData.map(scan => scan.status)));
export const uniquePriorities = Array.from(new Set(scheduledScansData.map(scan => scan.priority)));
export const uniqueCreators = Array.from(new Set(scheduledScansData.map(scan => scan.createdBy)));
export const uniqueTags = Array.from(new Set(scheduledScansData.flatMap(scan => scan.tags)));

// Функции для работы с расписаниями
export const generateNextRunDates = (schedule: ScheduledScan['schedule'], count: number = 5): Date[] => {
    const dates: Date[] = [];
    let currentDate = new Date(schedule.datetime);

    for (let i = 0; i < count; i++) {
        dates.push(new Date(currentDate));

        switch (schedule.type) {
            case 'daily':
                if (schedule.recurrence?.interval) {
                    currentDate.setDate(currentDate.getDate() + schedule.recurrence.interval);
                } else {
                    currentDate.setDate(currentDate.getDate() + 1);
                }
                break;
            case 'weekly':
                if (schedule.recurrence?.interval) {
                    currentDate.setDate(currentDate.getDate() + (schedule.recurrence.interval * 7));
                } else {
                    currentDate.setDate(currentDate.getDate() + 7);
                }
                break;
            case 'monthly':
                if (schedule.recurrence?.interval) {
                    currentDate.setMonth(currentDate.getMonth() + schedule.recurrence.interval);
                } else {
                    currentDate.setMonth(currentDate.getMonth() + 1);
                }
                break;
            case 'once':
                break;
        }

        if (schedule.type === 'once') break;
    }

    return dates;
};

export const validateSchedule = (schedule: ScheduledScan['schedule']): { valid: boolean; errors: string[] } => {
    const errors: string[] = [];

    const scheduleDate = new Date(schedule.datetime);
    if (isNaN(scheduleDate.getTime())) {
        errors.push('Неверный формат даты и времени');
    }

    if (!schedule.timezone) {
        errors.push('Не указан часовой пояс');
    }

    if (schedule.type !== 'once' && !schedule.recurrence) {
        errors.push('Для повторяющихся расписаний необходимо указать параметры повторения');
    }

    if (schedule.recurrence?.interval && schedule.recurrence.interval <= 0) {
        errors.push('Интервал должен быть больше 0');
    }

    return {
        valid: errors.length === 0,
        errors
    };
};
