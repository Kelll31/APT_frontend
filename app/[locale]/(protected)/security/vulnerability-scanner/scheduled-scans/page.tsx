"use client";

import React, { useState, useMemo } from 'react';
import { useTranslations } from 'next-intl';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Switch } from '@/components/ui/switch';
import { Calendar } from '@/components/ui/calendar';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import {
    Clock,
    Play,
    Pause,
    Square,
    Plus,
    Search,
    Filter,
    Settings,
    Trash2,
    Edit,
    Copy,
    Calendar as CalendarIcon,
    Timer,
    Target,
    Shield,
    AlertTriangle,
    CheckCircle,
    Activity,
    Zap,
    RefreshCw,
    MoreHorizontal
} from 'lucide-react';
import { format, addHours, addDays, addWeeks, addMonths } from 'date-fns';
import { ru } from 'date-fns/locale';
import {
    scheduledScansData,
    scheduledScansStatistics,
    scheduleTemplates,
    uniqueScanTypes,
    uniqueTargetTypes,
    uniqueStatuses,
    uniquePriorities,
    type ScheduledScan
} from './data';

const ScheduledScansPage = () => {
    const t = useTranslations('VulnerabilityScanner');
    const tCommon = useTranslations('Common');

    // Состояния для фильтрации и поиска
    const [searchTerm, setSearchTerm] = useState('');
    const [statusFilter, setStatusFilter] = useState('all');
    const [scanTypeFilter, setScanTypeFilter] = useState('all');
    const [priorityFilter, setPriorityFilter] = useState('all');
    const [enabledFilter, setEnabledFilter] = useState('all');

    // Состояния для создания/редактирования
    const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
    const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
    const [selectedScan, setSelectedScan] = useState<ScheduledScan | null>(null);
    const [newScan, setNewScan] = useState<Partial<ScheduledScan>>({
        name: '',
        description: '',
        target: '',
        targetType: 'single_host',
        scanType: 'quick_scan',
        priority: 'medium',
        timeoutMinutes: 60,
        maxRetries: 2,
        notifications: {
            email: true,
            webhook: false,
            emailAddresses: []
        },
        tags: []
    });

    // Фильтрация данных
    const filteredScans = useMemo(() => {
        return scheduledScansData.filter(scan => {
            const matchesSearch = scan.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                scan.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
                scan.target.toLowerCase().includes(searchTerm.toLowerCase());

            const matchesStatus = statusFilter === 'all' || scan.status === statusFilter;
            const matchesScanType = scanTypeFilter === 'all' || scan.scanType === scanTypeFilter;
            const matchesPriority = priorityFilter === 'all' || scan.priority === priorityFilter;
            const matchesEnabled = enabledFilter === 'all' ||
                (enabledFilter === 'enabled' && scan.isEnabled) ||
                (enabledFilter === 'disabled' && !scan.isEnabled);

            return matchesSearch && matchesStatus && matchesScanType && matchesPriority && matchesEnabled;
        });
    }, [searchTerm, statusFilter, scanTypeFilter, priorityFilter, enabledFilter]);

    // Функции для получения цветов и иконок
    const getStatusColor = (status: string) => {
        switch (status) {
            case 'active':
                return 'bg-green-600 text-white';
            case 'paused':
                return 'bg-yellow-500 text-black';
            case 'inactive':
                return 'bg-gray-500 text-white';
            case 'expired':
                return 'bg-red-600 text-white';
            default:
                return 'bg-gray-500 text-white';
        }
    };

    const getPriorityColor = (priority: string) => {
        switch (priority) {
            case 'critical':
                return 'bg-red-700 text-white';
            case 'high':
                return 'bg-orange-600 text-white';
            case 'medium':
                return 'bg-yellow-500 text-black';
            case 'low':
                return 'bg-green-600 text-white';
            default:
                return 'bg-gray-500 text-white';
        }
    };

    const getStatusIcon = (status: string) => {
        switch (status) {
            case 'active':
                return <CheckCircle className="w-4 h-4 text-green-600" />;
            case 'paused':
                return <Pause className="w-4 h-4 text-yellow-500" />;
            case 'inactive':
                return <Square className="w-4 h-4 text-gray-500" />;
            case 'expired':
                return <AlertTriangle className="w-4 h-4 text-red-600" />;
            default:
                return <Clock className="w-4 h-4 text-gray-500" />;
        }
    };

    const formatScheduleType = (type: string) => {
        switch (type) {
            case 'once': return 'Однократно';
            case 'daily': return 'Ежедневно';
            case 'weekly': return 'Еженедельно';
            case 'monthly': return 'Ежемесячно';
            default: return type;
        }
    };

    // Функции управления
    const handleToggleSchedule = (scanId: string) => {
        console.log('Toggle schedule:', scanId);
        // Здесь будет логика включения/отключения расписания
    };

    const handleRunNow = (scanId: string) => {
        console.log('Run now:', scanId);
        // Здесь будет логика немедленного запуска
    };

    const handleDeleteSchedule = (scanId: string) => {
        console.log('Delete schedule:', scanId);
        // Здесь будет логика удаления
    };

    const handleCreateSchedule = () => {
        console.log('Create schedule:', newScan);
        // Здесь будет логика создания нового расписания
        setIsCreateDialogOpen(false);
    };

    const calculateNextRuns = (scan: ScheduledScan, count: number = 5) => {
        const nextRuns = [];
        let currentDate = new Date(scan.nextRun);

        for (let i = 0; i < count; i++) {
            nextRuns.push(new Date(currentDate));

            switch (scan.schedule.type) {
                case 'daily':
                    currentDate = addDays(currentDate, scan.schedule.recurrence?.interval || 1);
                    break;
                case 'weekly':
                    currentDate = addWeeks(currentDate, scan.schedule.recurrence?.interval || 1);
                    break;
                case 'monthly':
                    currentDate = addMonths(currentDate, scan.schedule.recurrence?.interval || 1);
                    break;
            }
        }

        return nextRuns;
    };

    return (
        <div className="max-w-7xl mx-auto p-6 space-y-6">
            {/* Заголовок */}
            <div className="flex items-center justify-between">
                <div>
                    <h1 className="text-3xl font-bold tracking-tight">Запланированные сканирования</h1>
                    <p className="text-muted-foreground mt-2">
                        Управление автоматическими расписаниями сканирования безопасности
                    </p>
                </div>
                <div className="flex items-center gap-2">
                    <Button variant="outline" size="sm">
                        <RefreshCw className="w-4 h-4 mr-2" />
                        Обновить
                    </Button>
                    <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
                        <DialogTrigger asChild>
                            <Button size="sm">
                                <Plus className="w-4 h-4 mr-2" />
                                Создать расписание
                            </Button>
                        </DialogTrigger>
                        <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
                            <DialogHeader>
                                <DialogTitle>Создать новое расписание сканирования</DialogTitle>
                            </DialogHeader>
                            <div className="space-y-6">
                                <Tabs defaultValue="basic" className="w-full">
                                    <TabsList className="grid w-full grid-cols-3">
                                        <TabsTrigger value="basic">Основное</TabsTrigger>
                                        <TabsTrigger value="schedule">Расписание</TabsTrigger>
                                        <TabsTrigger value="notifications">Уведомления</TabsTrigger>
                                    </TabsList>

                                    <TabsContent value="basic" className="space-y-4">
                                        <div className="grid grid-cols-2 gap-4">
                                            <div className="space-y-2">
                                                <Label htmlFor="name">Название</Label>
                                                <Input
                                                    id="name"
                                                    placeholder="Название расписания"
                                                    value={newScan.name || ''}
                                                    onChange={(e) => setNewScan({ ...newScan, name: e.target.value })}
                                                />
                                            </div>
                                            <div className="space-y-2">
                                                <Label htmlFor="target">Цель</Label>
                                                <Input
                                                    id="target"
                                                    placeholder="IP, домен или диапазон"
                                                    value={newScan.target || ''}
                                                    onChange={(e) => setNewScan({ ...newScan, target: e.target.value })}
                                                />
                                            </div>
                                        </div>

                                        <div className="space-y-2">
                                            <Label htmlFor="description">Описание</Label>
                                            <Textarea
                                                id="description"
                                                placeholder="Описание расписания"
                                                value={newScan.description || ''}
                                                onChange={(e) => setNewScan({ ...newScan, description: e.target.value })}
                                            />
                                        </div>

                                        <div className="grid grid-cols-2 gap-4">
                                            <div className="space-y-2">
                                                <Label>Тип сканирования</Label>
                                                <Select
                                                    value={newScan.scanType}
                                                    onValueChange={(value) => setNewScan({ ...newScan, scanType: value as any })}
                                                >
                                                    <SelectTrigger>
                                                        <SelectValue />
                                                    </SelectTrigger>
                                                    <SelectContent>
                                                        <SelectItem value="quick_scan">Быстрое сканирование</SelectItem>
                                                        <SelectItem value="full_scan">Полное сканирование</SelectItem>
                                                        <SelectItem value="web_application_scan">Веб-приложение</SelectItem>
                                                        <SelectItem value="network_scan">Сетевое сканирование</SelectItem>
                                                        <SelectItem value="database_scan">База данных</SelectItem>
                                                    </SelectContent>
                                                </Select>
                                            </div>

                                            <div className="space-y-2">
                                                <Label>Приоритет</Label>
                                                <Select
                                                    value={newScan.priority}
                                                    onValueChange={(value) => setNewScan({ ...newScan, priority: value as any })}
                                                >
                                                    <SelectTrigger>
                                                        <SelectValue />
                                                    </SelectTrigger>
                                                    <SelectContent>
                                                        <SelectItem value="low">Низкий</SelectItem>
                                                        <SelectItem value="medium">Средний</SelectItem>
                                                        <SelectItem value="high">Высокий</SelectItem>
                                                        <SelectItem value="critical">Критический</SelectItem>
                                                    </SelectContent>
                                                </Select>
                                            </div>
                                        </div>
                                    </TabsContent>

                                    <TabsContent value="schedule" className="space-y-4">
                                        <div className="grid grid-cols-2 gap-4">
                                            <div className="space-y-2">
                                                <Label>Тип расписания</Label>
                                                <Select defaultValue="weekly">
                                                    <SelectTrigger>
                                                        <SelectValue />
                                                    </SelectTrigger>
                                                    <SelectContent>
                                                        <SelectItem value="once">Однократно</SelectItem>
                                                        <SelectItem value="daily">Ежедневно</SelectItem>
                                                        <SelectItem value="weekly">Еженедельно</SelectItem>
                                                        <SelectItem value="monthly">Ежемесячно</SelectItem>
                                                    </SelectContent>
                                                </Select>
                                            </div>

                                            <div className="space-y-2">
                                                <Label>Время</Label>
                                                <Input type="time" defaultValue="02:00" />
                                            </div>
                                        </div>

                                        <div className="space-y-4">
                                            <h4 className="font-semibold">Шаблоны расписаний</h4>
                                            <div className="grid grid-cols-1 gap-2">
                                                {scheduleTemplates.map((template) => (
                                                    <Card key={template.id} className="p-3 cursor-pointer hover:bg-muted/50">
                                                        <div className="flex justify-between items-center">
                                                            <div>
                                                                <h5 className="font-medium">{template.name}</h5>
                                                                <p className="text-sm text-muted-foreground">{template.description}</p>
                                                            </div>
                                                            <Button variant="outline" size="sm">Выбрать</Button>
                                                        </div>
                                                    </Card>
                                                ))}
                                            </div>
                                        </div>
                                    </TabsContent>

                                    <TabsContent value="notifications" className="space-y-4">
                                        <div className="space-y-4">
                                            <div className="flex items-center space-x-2">
                                                <Switch id="email-notifications" defaultChecked />
                                                <Label htmlFor="email-notifications">Email уведомления</Label>
                                            </div>

                                            <div className="space-y-2">
                                                <Label htmlFor="email-addresses">Email адреса</Label>
                                                <Textarea
                                                    id="email-addresses"
                                                    placeholder="email1@company.com, email2@company.com"
                                                />
                                            </div>

                                            <div className="flex items-center space-x-2">
                                                <Switch id="webhook-notifications" />
                                                <Label htmlFor="webhook-notifications">Webhook уведомления</Label>
                                            </div>

                                            <div className="space-y-2">
                                                <Label htmlFor="webhook-url">Webhook URL</Label>
                                                <Input
                                                    id="webhook-url"
                                                    placeholder="https://example.com/webhook"
                                                />
                                            </div>
                                        </div>
                                    </TabsContent>
                                </Tabs>

                                <div className="flex justify-end gap-2">
                                    <Button variant="outline" onClick={() => setIsCreateDialogOpen(false)}>
                                        Отмена
                                    </Button>
                                    <Button onClick={handleCreateSchedule}>
                                        Создать расписание
                                    </Button>
                                </div>
                            </div>
                        </DialogContent>
                    </Dialog>
                </div>
            </div>

            {/* Статистика */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                <Card>
                    <CardContent className="p-4">
                        <div className="flex items-center justify-between">
                            <div>
                                <p className="text-sm text-muted-foreground">Всего расписаний</p>
                                <p className="text-2xl font-bold">{scheduledScansStatistics.total}</p>
                            </div>
                            <Clock className="w-8 h-8 text-muted-foreground" />
                        </div>
                    </CardContent>
                </Card>

                <Card>
                    <CardContent className="p-4">
                        <div className="flex items-center justify-between">
                            <div>
                                <p className="text-sm text-muted-foreground">Активных</p>
                                <p className="text-2xl font-bold text-green-600">{scheduledScansStatistics.active}</p>
                            </div>
                            <CheckCircle className="w-8 h-8 text-green-600" />
                        </div>
                    </CardContent>
                </Card>

                <Card>
                    <CardContent className="p-4">
                        <div className="flex items-center justify-between">
                            <div>
                                <p className="text-sm text-muted-foreground">Приостановлено</p>
                                <p className="text-2xl font-bold text-yellow-500">{scheduledScansStatistics.paused}</p>
                            </div>
                            <Pause className="w-8 h-8 text-yellow-500" />
                        </div>
                    </CardContent>
                </Card>

                <Card>
                    <CardContent className="p-4">
                        <div className="flex items-center justify-between">
                            <div>
                                <p className="text-sm text-muted-foreground">Следующий час</p>
                                <p className="text-2xl font-bold text-blue-600">{scheduledScansStatistics.nextHour}</p>
                            </div>
                            <Timer className="w-8 h-8 text-blue-600" />
                        </div>
                    </CardContent>
                </Card>
            </div>

            {/* Фильтры */}
            <Card>
                <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                        <Filter className="w-5 h-5" />
                        Фильтры и поиск
                    </CardTitle>
                </CardHeader>
                <CardContent>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
                        <div className="space-y-2">
                            <Label>Поиск</Label>
                            <div className="relative">
                                <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                                <Input
                                    placeholder="Поиск расписаний..."
                                    value={searchTerm}
                                    onChange={(e) => setSearchTerm(e.target.value)}
                                    className="pl-10"
                                />
                            </div>
                        </div>

                        <div className="space-y-2">
                            <Label>Статус</Label>
                            <Select value={statusFilter} onValueChange={setStatusFilter}>
                                <SelectTrigger>
                                    <SelectValue />
                                </SelectTrigger>
                                <SelectContent>
                                    <SelectItem value="all">Все статусы</SelectItem>
                                    <SelectItem value="active">Активные</SelectItem>
                                    <SelectItem value="paused">Приостановленные</SelectItem>
                                    <SelectItem value="inactive">Неактивные</SelectItem>
                                    <SelectItem value="expired">Истекшие</SelectItem>
                                </SelectContent>
                            </Select>
                        </div>

                        <div className="space-y-2">
                            <Label>Тип сканирования</Label>
                            <Select value={scanTypeFilter} onValueChange={setScanTypeFilter}>
                                <SelectTrigger>
                                    <SelectValue />
                                </SelectTrigger>
                                <SelectContent>
                                    <SelectItem value="all">Все типы</SelectItem>
                                    {uniqueScanTypes.map(type => (
                                        <SelectItem key={type} value={type}>
                                            {t(`scan_types.${type}`)}
                                        </SelectItem>
                                    ))}
                                </SelectContent>
                            </Select>
                        </div>

                        <div className="space-y-2">
                            <Label>Приоритет</Label>
                            <Select value={priorityFilter} onValueChange={setPriorityFilter}>
                                <SelectTrigger>
                                    <SelectValue />
                                </SelectTrigger>
                                <SelectContent>
                                    <SelectItem value="all">Все приоритеты</SelectItem>
                                    <SelectItem value="critical">Критический</SelectItem>
                                    <SelectItem value="high">Высокий</SelectItem>
                                    <SelectItem value="medium">Средний</SelectItem>
                                    <SelectItem value="low">Низкий</SelectItem>
                                </SelectContent>
                            </Select>
                        </div>

                        <div className="space-y-2">
                            <Label>Включено</Label>
                            <Select value={enabledFilter} onValueChange={setEnabledFilter}>
                                <SelectTrigger>
                                    <SelectValue />
                                </SelectTrigger>
                                <SelectContent>
                                    <SelectItem value="all">Все</SelectItem>
                                    <SelectItem value="enabled">Включено</SelectItem>
                                    <SelectItem value="disabled">Отключено</SelectItem>
                                </SelectContent>
                            </Select>
                        </div>
                    </div>

                    <div className="flex items-center justify-between mt-4">
                        <p className="text-sm text-muted-foreground">
                            Найдено: {filteredScans.length} из {scheduledScansData.length}
                        </p>
                        <Button
                            variant="outline"
                            size="sm"
                            onClick={() => {
                                setSearchTerm('');
                                setStatusFilter('all');
                                setScanTypeFilter('all');
                                setPriorityFilter('all');
                                setEnabledFilter('all');
                            }}
                        >
                            Сбросить фильтры
                        </Button>
                    </div>
                </CardContent>
            </Card>

            {/* Таблица расписаний */}
            <Card>
                <CardHeader>
                    <CardTitle>Список расписаний</CardTitle>
                </CardHeader>
                <CardContent>
                    <ScrollArea className="h-[600px]">
                        <Table>
                            <TableHeader>
                                <TableRow>
                                    <TableHead>Расписание</TableHead>
                                    <TableHead>Цель</TableHead>
                                    <TableHead>Статус</TableHead>
                                    <TableHead>Расписание</TableHead>
                                    <TableHead>Следующий запуск</TableHead>
                                    <TableHead>Запусков</TableHead>
                                    <TableHead>Приоритет</TableHead>
                                    <TableHead>Включено</TableHead>
                                    <TableHead className="text-right">Действия</TableHead>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                {filteredScans.map((scan) => (
                                    <TableRow key={scan.id}>
                                        <TableCell>
                                            <div className="space-y-1">
                                                <p className="font-medium">{scan.name}</p>
                                                <div className="flex items-center gap-2">
                                                    <Badge className="text-xs bg-blue-100 text-blue-800">
                                                        {t(`scan_types.${scan.scanType}`)}
                                                    </Badge>
                                                    {scan.tags.slice(0, 2).map(tag => (
                                                        <Badge key={tag} className="text-xs bg-gray-100 text-gray-800">
                                                            {tag}
                                                        </Badge>
                                                    ))}
                                                </div>
                                                <p className="text-xs text-muted-foreground">{scan.description}</p>
                                            </div>
                                        </TableCell>
                                        <TableCell>
                                            <div className="space-y-1">
                                                <p className="font-mono text-sm">{scan.target}</p>
                                                <Badge className="text-xs bg-green-100 text-green-800">
                                                    {t(`target_types.${scan.targetType}`)}
                                                </Badge>
                                            </div>
                                        </TableCell>
                                        <TableCell>
                                            <div className="flex items-center gap-2">
                                                {getStatusIcon(scan.status)}
                                                <Badge className={`text-xs ${getStatusColor(scan.status)}`}>
                                                    {scan.status === 'active' ? 'Активное' :
                                                        scan.status === 'paused' ? 'Приостановлено' :
                                                            scan.status === 'inactive' ? 'Неактивное' : 'Истекшее'}
                                                </Badge>
                                            </div>
                                        </TableCell>
                                        <TableCell>
                                            <div className="space-y-1">
                                                <p className="text-sm">{formatScheduleType(scan.schedule.type)}</p>
                                                {scan.schedule.recurrence && (
                                                    <p className="text-xs text-muted-foreground">
                                                        Каждые {scan.schedule.recurrence.interval}{' '}
                                                        {scan.schedule.type === 'daily' ? 'дн.' :
                                                            scan.schedule.type === 'weekly' ? 'нед.' : 'мес.'}
                                                    </p>
                                                )}
                                            </div>
                                        </TableCell>
                                        <TableCell>
                                            <div className="space-y-1">
                                                <p className="text-sm">
                                                    {format(new Date(scan.nextRun), 'dd.MM.yy HH:mm', { locale: ru })}
                                                </p>
                                                {scan.lastRun && (
                                                    <p className="text-xs text-muted-foreground">
                                                        Последний: {format(new Date(scan.lastRun), 'dd.MM.yy', { locale: ru })}
                                                    </p>
                                                )}
                                            </div>
                                        </TableCell>
                                        <TableCell>
                                            <span className="text-sm font-mono">{scan.runCount}</span>
                                        </TableCell>
                                        <TableCell>
                                            <Badge className={`text-xs ${getPriorityColor(scan.priority)}`}>
                                                {scan.priority === 'critical' ? 'Критический' :
                                                    scan.priority === 'high' ? 'Высокий' :
                                                        scan.priority === 'medium' ? 'Средний' : 'Низкий'}
                                            </Badge>
                                        </TableCell>
                                        <TableCell>
                                            <Switch
                                                checked={scan.isEnabled}
                                                onCheckedChange={() => handleToggleSchedule(scan.id)}
                                            />
                                        </TableCell>
                                        <TableCell>
                                            <div className="flex items-center justify-end gap-1">
                                                <Button
                                                    variant="ghost"
                                                    size="sm"
                                                    onClick={() => handleRunNow(scan.id)}
                                                    title="Запустить сейчас"
                                                >
                                                    <Play className="w-4 h-4" />
                                                </Button>

                                                <Dialog>
                                                    <DialogTrigger asChild>
                                                        <Button
                                                            variant="ghost"
                                                            size="sm"
                                                            onClick={() => setSelectedScan(scan)}
                                                        >
                                                            <Settings className="w-4 h-4" />
                                                        </Button>
                                                    </DialogTrigger>
                                                    {selectedScan && (
                                                        <DialogContent className="max-w-3xl">
                                                            <DialogHeader>
                                                                <DialogTitle>Настройки расписания</DialogTitle>
                                                            </DialogHeader>
                                                            <div className="space-y-4">
                                                                <Tabs defaultValue="info">
                                                                    <TabsList>
                                                                        <TabsTrigger value="info">Информация</TabsTrigger>
                                                                        <TabsTrigger value="schedule">Расписание</TabsTrigger>
                                                                        <TabsTrigger value="history">История</TabsTrigger>
                                                                    </TabsList>

                                                                    <TabsContent value="info" className="space-y-4">
                                                                        <div className="grid grid-cols-2 gap-4">
                                                                            <div>
                                                                                <h4 className="font-semibold mb-2">Основная информация</h4>
                                                                                <div className="space-y-2 text-sm">
                                                                                    <p><strong>Название:</strong> {selectedScan.name}</p>
                                                                                    <p><strong>Цель:</strong> {selectedScan.target}</p>
                                                                                    <p><strong>Создан:</strong> {selectedScan.createdBy}</p>
                                                                                    <p><strong>Приоритет:</strong> {selectedScan.priority}</p>
                                                                                </div>
                                                                            </div>
                                                                            <div>
                                                                                <h4 className="font-semibold mb-2">Настройки</h4>
                                                                                <div className="space-y-2 text-sm">
                                                                                    <p><strong>Тайм-аут:</strong> {selectedScan.timeoutMinutes} мин</p>
                                                                                    <p><strong>Попытки:</strong> {selectedScan.maxRetries}</p>
                                                                                    <p><strong>Email:</strong> {selectedScan.notifications.email ? 'Да' : 'Нет'}</p>
                                                                                    <p><strong>Webhook:</strong> {selectedScan.notifications.webhook ? 'Да' : 'Нет'}</p>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                    </TabsContent>

                                                                    <TabsContent value="schedule" className="space-y-4">
                                                                        <div>
                                                                            <h4 className="font-semibold mb-2">Следующие запуски</h4>
                                                                            <div className="space-y-2">
                                                                                {calculateNextRuns(selectedScan).map((date, index) => (
                                                                                    <div key={index} className="flex justify-between text-sm">
                                                                                        <span>Запуск #{index + 1}</span>
                                                                                        <span>{format(date, 'dd.MM.yyyy HH:mm', { locale: ru })}</span>
                                                                                    </div>
                                                                                ))}
                                                                            </div>
                                                                        </div>
                                                                    </TabsContent>

                                                                    <TabsContent value="history">
                                                                        <div className="space-y-2">
                                                                            <h4 className="font-semibold">Статистика запусков</h4>
                                                                            <div className="grid grid-cols-2 gap-4 text-sm">
                                                                                <p><strong>Всего запусков:</strong> {selectedScan.runCount}</p>
                                                                                <p><strong>Последний запуск:</strong>
                                                                                    {selectedScan.lastRun ?
                                                                                        format(new Date(selectedScan.lastRun), 'dd.MM.yy HH:mm', { locale: ru }) :
                                                                                        'Никогда'
                                                                                    }
                                                                                </p>
                                                                            </div>
                                                                        </div>
                                                                    </TabsContent>
                                                                </Tabs>
                                                            </div>
                                                        </DialogContent>
                                                    )}
                                                </Dialog>

                                                <Button
                                                    variant="ghost"
                                                    size="sm"
                                                    onClick={() => {
                                                        setSelectedScan(scan);
                                                        setIsEditDialogOpen(true);
                                                    }}
                                                    title="Редактировать"
                                                >
                                                    <Edit className="w-4 h-4" />
                                                </Button>

                                                <Button
                                                    variant="ghost"
                                                    size="sm"
                                                    onClick={() => handleDeleteSchedule(scan.id)}
                                                    title="Удалить"
                                                >
                                                    <Trash2 className="w-4 h-4 text-red-600" />
                                                </Button>
                                            </div>
                                        </TableCell>
                                    </TableRow>
                                ))}
                            </TableBody>
                        </Table>
                    </ScrollArea>

                    {filteredScans.length === 0 && (
                        <div className="text-center py-12">
                            <Clock className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
                            <h3 className="text-lg font-semibold mb-2">Расписания не найдены</h3>
                            <p className="text-muted-foreground">
                                Попробуйте изменить фильтры или создать новое расписание
                            </p>
                        </div>
                    )}
                </CardContent>
            </Card>
        </div>
    );
};

export default ScheduledScansPage;
