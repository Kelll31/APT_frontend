"use client";

import React, { useState } from 'react';
import { useTranslations } from 'next-intl';
import { useRouter } from 'next/navigation';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';
import { Separator } from '@/components/ui/separator';
import { Label } from '@/components/ui/label';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Progress } from '@/components/ui/progress';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import {
    AlertTriangle, Shield, Zap, Brain, Target, Clock, CheckCircle, Settings, Save, Play,
    Calendar, Info, Wifi, Database, Globe, Network, Lock, Eye, Cpu, FileText,
    Activity, Search, Layers, Radio, Smartphone, Factory, Coins, Code, Bug,
    Fingerprint, Key, Server, Cloud, Router, Radar, Crosshair, Microscope,
    ChevronDown, ChevronUp, HelpCircle, Loader2, Monitor, HardDrive
} from 'lucide-react';

// Типы и интерфейсы
interface ScanModule {
    id: string;
    name: string;
    description: string;
    severity: 'critical' | 'high' | 'medium' | 'low' | 'informational';
    icon: string; // Название иконки как строка
    estimatedTime: string;
    enabled: boolean;
    category: 'basic' | 'advanced' | 'ai' | 'specialized' | 'experimental';
    requiresCredentials?: boolean;
    riskLevel?: 'safe' | 'moderate' | 'aggressive' | 'destructive';
}

interface ScanCredentials {
    username: string;
    password: string;
    domain: string;
    sshKey?: string;
    apiToken?: string;
    databaseConnectionString?: string;
}

interface AdvancedOptions {
    evasionTechniques: string[];
    trafficAnalysis: boolean;
    deepPacketInspection: boolean;
    behavioralAnalysis: boolean;
    threatIntelligence: boolean;
    customPayloads: boolean;
    zeroDay: boolean;
    socialEngineering: boolean;
}

interface AIModelsConfig {
    anomalyDetection: boolean;
    behaviorAnalysis: boolean;
    patternRecognition: boolean;
    predictiveAnalysis: boolean;
    deepLearning: boolean;
    neuralNetworkEngine: string;
}

// Данные модулей сканирования
const initialScanModules: ScanModule[] = [
    // Базовые модули
    {
        id: 'port_discovery',
        name: 'Port Discovery & Analysis',
        description: 'Комплексное сканирование портов с анализом сервисов и баннеров',
        severity: 'low',
        icon: 'Target',
        estimatedTime: '2-5 мин',
        enabled: true,
        category: 'basic',
        riskLevel: 'safe'
    },
    {
        id: 'service_enumeration',
        name: 'Service Enumeration',
        description: 'Глубокое исследование сервисов с версионным анализом',
        severity: 'medium',
        icon: 'Search',
        estimatedTime: '5-10 мин',
        enabled: true,
        category: 'basic',
        riskLevel: 'safe'
    },
    {
        id: 'os_fingerprinting',
        name: 'Operating System Fingerprinting',
        description: 'Определение операционной системы и её версии',
        severity: 'low',
        icon: 'Monitor',
        estimatedTime: '3-8 мин',
        enabled: false,
        category: 'basic',
        riskLevel: 'safe'
    },
    {
        id: 'vulnerability_discovery',
        name: 'Vulnerability Discovery',
        description: 'Поиск известных уязвимостей в обнаруженных сервисах',
        severity: 'medium',
        icon: 'AlertTriangle',
        estimatedTime: '10-20 мин',
        enabled: false,
        category: 'basic',
        riskLevel: 'moderate'
    },

    // Продвинутые модули
    {
        id: 'web_application_scan',
        name: 'Web Application Security Testing',
        description: 'OWASP Top 10, бизнес-логика, API тестирование, XSS, SQLi',
        severity: 'high',
        icon: 'Globe',
        estimatedTime: '15-45 мин',
        enabled: false,
        category: 'advanced',
        riskLevel: 'moderate'
    },
    {
        id: 'database_security_audit',
        name: 'Database Security Audit',
        description: 'Аудит БД: права доступа, инъекции, конфигурация, слабые пароли',
        severity: 'high',
        icon: 'Database',
        estimatedTime: '10-25 мин',
        enabled: false,
        category: 'advanced',
        requiresCredentials: true,
        riskLevel: 'moderate'
    },
    {
        id: 'network_penetration',
        name: 'Network Penetration Testing',
        description: 'Комплексное тестирование на проникновение в сетевую инфраструктуру',
        severity: 'high',
        icon: 'Network',
        estimatedTime: '30-90 мин',
        enabled: false,
        category: 'advanced',
        riskLevel: 'aggressive'
    },

    // AI-powered модули
    {
        id: 'neural_threat_detection',
        name: 'Neural Threat Detection',
        description: 'ИИ-анализ угроз с использованием глубокого обучения',
        severity: 'critical',
        icon: 'Brain',
        estimatedTime: '20-60 мин',
        enabled: false,
        category: 'ai',
        riskLevel: 'safe'
    },
    {
        id: 'behavioral_analysis',
        name: 'Behavioral Pattern Analysis',
        description: 'Анализ поведенческих паттернов для выявления аномалий',
        severity: 'high',
        icon: 'Activity',
        estimatedTime: '25-50 мин',
        enabled: false,
        category: 'ai',
        riskLevel: 'safe'
    },

    // Специализированные модули
    {
        id: 'wireless_security_audit',
        name: 'Wireless Security Comprehensive Audit',
        description: 'WPA3, Bluetooth, ZigBee, LoRaWAN анализ',
        severity: 'high',
        icon: 'Wifi',
        estimatedTime: '20-45 мин',
        enabled: false,
        category: 'specialized',
        riskLevel: 'moderate'
    },
    {
        id: 'cryptographic_weakness',
        name: 'Cryptographic Weakness Analysis',
        description: 'Анализ криптографических слабостей и реализаций',
        severity: 'critical',
        icon: 'Lock',
        estimatedTime: '20-60 мин',
        enabled: false,
        category: 'specialized',
        riskLevel: 'moderate'
    },

    // Экспериментальные модули
    {
        id: 'zero_day_detection',
        name: 'Zero-Day Detection Engine',
        description: 'Поиск неизвестных уязвимостей с помощью ИИ',
        severity: 'critical',
        icon: 'Eye',
        estimatedTime: '120-480 мин',
        enabled: false,
        category: 'experimental',
        riskLevel: 'aggressive'
    },
    {
        id: 'quantum_cryptanalysis',
        name: 'Quantum Cryptanalysis Simulation',
        description: 'Симуляция квантовых атак на криптографию',
        severity: 'critical',
        icon: 'Microscope',
        estimatedTime: '180-600 мин',
        enabled: false,
        category: 'experimental',
        riskLevel: 'safe'
    }
];

// Техники уклонения
const evasionTechniques = [
    'IP Fragmentation',
    'TCP Segmentation',
    'Timing Delays',
    'Decoy Scanning',
    'Source Port Spoofing',
    'Proxy Chains',
    'Traffic Obfuscation',
    'Protocol Mutation'
];

const NewScanPage = () => {
    const t = useTranslations('VulnerabilityScanner');
    const tCommon = useTranslations('Common');
    const router = useRouter();

    // Основные состояния
    const [scanName, setScanName] = useState('');
    const [scanDescription, setScanDescription] = useState('');
    const [priority, setPriority] = useState<'low' | 'normal' | 'high' | 'urgent'>('normal');
    const [targetType, setTargetType] = useState<'single_host' | 'ip_range' | 'domain' | 'subnet' | 'url' | 'network_segment' | 'asset_group'>('single_host');
    const [target, setTarget] = useState('');
    const [scanType, setScanType] = useState<'quick_scan' | 'full_scan' | 'stealth_scan' | 'aggressive_scan' | 'custom_scan'>('quick_scan');
    const [schedule, setSchedule] = useState<'immediate' | 'scheduled'>('immediate');
    const [scheduledTime, setScheduledTime] = useState('');
    const [customPorts, setCustomPorts] = useState('');

    // Учетные данные
    const [credentials, setCredentials] = useState<ScanCredentials>({
        username: '',
        password: '',
        domain: '',
        sshKey: '',
        apiToken: '',
        databaseConnectionString: ''
    });

    // Продвинутые настройки
    const [maxConcurrentScans, setMaxConcurrentScans] = useState(5);
    const [scanTimeout, setScanTimeout] = useState(30);
    const [retryAttempts, setRetryAttempts] = useState(3);
    const [rateLimiting, setRateLimiting] = useState(100);

    // AI и ML настройки
    const [neuralAssist, setNeuralAssist] = useState(true);
    const [aggressiveMode, setAggressiveMode] = useState(false);
    const [aiModels, setAiModels] = useState<AIModelsConfig>({
        anomalyDetection: true,
        behaviorAnalysis: false,
        patternRecognition: true,
        predictiveAnalysis: false,
        deepLearning: false,
        neuralNetworkEngine: 'TensorFlow'
    });

    // Продвинутые опции
    const [advancedOptions, setAdvancedOptions] = useState<AdvancedOptions>({
        evasionTechniques: [],
        trafficAnalysis: false,
        deepPacketInspection: false,
        behavioralAnalysis: false,
        threatIntelligence: true,
        customPayloads: false,
        zeroDay: false,
        socialEngineering: false
    });

    // Модули сканирования
    const [scanModules, setScanModules] = useState<ScanModule[]>(initialScanModules);

    // Состояния UI
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState('');
    const [validationErrors, setValidationErrors] = useState<{ [key: string]: string }>({});
    const [activeTab, setActiveTab] = useState('basic');
    const [progressValue, setProgressValue] = useState(0);
    const [showAdvancedSettings, setShowAdvancedSettings] = useState(false);
    const [saveAsTemplate, setSaveAsTemplate] = useState(false);
    const [templateName, setTemplateName] = useState('');

    // Обработчики для Select компонентов (ИСПРАВЛЕНИЕ TypeScript ошибок)
    const handlePriorityChange = (value: string) => {
        if (['low', 'normal', 'high', 'urgent'].includes(value)) {
            setPriority(value as 'low' | 'normal' | 'high' | 'urgent');
        }
    };

    const handleTargetTypeChange = (value: string) => {
        const validOptions = ['single_host', 'ip_range', 'domain', 'subnet', 'url', 'network_segment', 'asset_group'];
        if (validOptions.includes(value)) {
            setTargetType(value as typeof targetType);
        }
    };

    const handleScanTypeChange = (value: string) => {
        const validOptions = ['quick_scan', 'full_scan', 'stealth_scan', 'aggressive_scan', 'custom_scan'];
        if (validOptions.includes(value)) {
            setScanType(value as typeof scanType);
        }
    };

    const handleScheduleChange = (value: string) => {
        const validOptions = ['immediate', 'scheduled'];
        if (validOptions.includes(value)) {
            setSchedule(value as typeof schedule);
        }
    };

    // Функции для работы с модулями
    const toggleModule = (moduleId: string) => {
        setScanModules(prev =>
            prev.map(module =>
                module.id === moduleId ? { ...module, enabled: !module.enabled } : module
            )
        );
        if (validationErrors.modules) {
            setValidationErrors(prev => ({ ...prev, modules: '' }));
        }
    };

    // ИСПРАВЛЕННАЯ функция получения иконки
    const getIconComponent = (iconName: string) => {
        const iconMap: { [key: string]: React.ComponentType<any> } = {
            Target, Shield, Zap, Brain, Clock, CheckCircle, Settings, Save, Play,
            Calendar, Info, Wifi, Database, Globe, Network, Lock, Eye, Cpu, FileText,
            Activity, Search, Layers, Radio, Smartphone, Factory, Coins, Code, Bug,
            Fingerprint, Key, Server, Cloud, Router, Radar, Crosshair, Microscope,
            Monitor, HardDrive, AlertTriangle
        };
        return iconMap[iconName] || Shield;
    };

    const getSeverityColor = (severity: string) => {
        switch (severity) {
            case 'critical': return 'bg-red-600 text-white';
            case 'high': return 'bg-orange-600 text-white';
            case 'medium': return 'bg-yellow-500 text-black';
            case 'low': return 'bg-green-600 text-white';
            case 'informational': return 'bg-blue-500 text-white';
            default: return 'bg-gray-500 text-white';
        }
    };

    const getRiskLevelColor = (risk?: string) => {
        switch (risk) {
            case 'safe': return 'border border-green-300 bg-green-50 text-green-800';
            case 'moderate': return 'border border-yellow-300 bg-yellow-50 text-yellow-800';
            case 'aggressive': return 'border border-orange-300 bg-orange-50 text-orange-800';
            case 'destructive': return 'border border-red-300 bg-red-50 text-red-800';
            default: return 'border border-gray-300 bg-gray-50 text-gray-800';
        }
    };

    // ИСПРАВЛЕННАЯ функция получения иконки категории
    const getCategoryIconComponent = (category: string) => {
        const categoryIcons: { [key: string]: React.ComponentType<any> } = {
            basic: Target,
            advanced: Settings,
            ai: Brain,
            specialized: Crosshair,
            experimental: Microscope
        };
        return categoryIcons[category] || Shield;
    };

    const getEnabledModulesCount = () => {
        return scanModules.filter(m => m.enabled).length;
    };

    const getModulesByCategory = (category: string) => {
        return scanModules.filter(module => module.category === category);
    };

    const calculateTotalEstimatedTime = () => {
        const enabledModules = scanModules.filter(m => m.enabled);
        if (enabledModules.length === 0) return '0 мин';

        const totalMinutes = enabledModules.reduce((total, module) => {
            const timeRange = module.estimatedTime.split('-');
            const maxTime = parseInt(timeRange[timeRange.length - 1]);
            return total + maxTime;
        }, 0);

        if (totalMinutes >= 60) {
            const hours = Math.floor(totalMinutes / 60);
            const minutes = totalMinutes % 60;
            return `${hours}ч ${minutes}мин`;
        }
        return `${totalMinutes} мин`;
    };

    const calculateRiskScore = () => {
        const enabledModules = scanModules.filter(m => m.enabled);
        if (enabledModules.length === 0) return 0;

        const riskWeights = {
            'safe': 1,
            'moderate': 2,
            'aggressive': 3,
            'destructive': 4
        };

        const totalRisk = enabledModules.reduce((sum, module) => {
            return sum + (riskWeights[module.riskLevel || 'safe'] || 1);
        }, 0);

        return Math.min(100, (totalRisk / enabledModules.length) * 25);
    };

    // Валидация формы
    const validateForm = () => {
        const errors: { [key: string]: string } = {};

        if (!scanName.trim()) {
            errors.scanName = 'Введите название сканирования';
        }
        if (!target.trim()) {
            errors.target = 'Введите целевой адрес или диапазон';
        }
        if (schedule === 'scheduled' && !scheduledTime) {
            errors.scheduledTime = 'Выберите время для запланированного сканирования';
        }
        if (scanType === 'custom_scan' && !customPorts.trim()) {
            errors.customPorts = 'Введите пользовательские порты для сканирования';
        }

        const enabledModules = scanModules.filter(m => m.enabled);
        if (enabledModules.length === 0) {
            errors.modules = 'Выберите хотя бы один модуль сканирования';
        }

        // Проверка на требующие учетные данные модули
        const credentialRequiredModules = enabledModules.filter(m => m.requiresCredentials);
        if (credentialRequiredModules.length > 0 && !credentials.username) {
            errors.credentials = 'Некоторые модули требуют учетные данные';
        }

        setValidationErrors(errors);
        return Object.keys(errors).length === 0;
    };

    // Обработка отправки формы
    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        if (!validateForm()) {
            setError('Пожалуйста, исправьте ошибки в форме');
            return;
        }

        setLoading(true);
        setError('');

        try {
            // Симуляция прогресса
            for (let i = 0; i <= 100; i += 10) {
                setProgressValue(i);
                await new Promise(resolve => setTimeout(resolve, 100));
            }

            const scanConfig = {
                name: scanName,
                description: scanDescription,
                priority,
                targetType,
                target,
                scanType,
                schedule: {
                    type: schedule,
                    datetime: scheduledTime
                },
                customPorts,
                credentials,
                modules: scanModules.filter(m => m.enabled).map(m => m.id),
                maxConcurrentScans,
                scanTimeout,
                retryAttempts,
                rateLimiting,
                neuralAssist,
                aggressiveMode,
                aiModels,
                advancedOptions,
                saveAsTemplate,
                templateName: saveAsTemplate ? templateName : undefined
            };

            console.log('Advanced Scan Configuration:', scanConfig);

            // Редирект в зависимости от типа расписания
            if (schedule === 'immediate') {
                router.push('/security/vulnerability-scanner/active-scan');
            } else {
                router.push('/security/vulnerability-scanner/scheduled-scans');
            }
        } catch (err) {
            setError('Ошибка запуска сканирования. Попробуйте снова.');
        } finally {
            setLoading(false);
            setProgressValue(0);
        }
    };

    // Сохранение как шаблон
    const handleSaveTemplate = async () => {
        if (!validateForm()) return;
        setLoading(true);
        try {
            await new Promise(resolve => setTimeout(resolve, 1000));
            alert('Шаблон сохранен успешно!');
        } catch (err) {
            setError('Ошибка сохранения шаблона');
        } finally {
            setLoading(false);
        }
    };

    return (
        <TooltipProvider>
            <div className="max-w-6xl mx-auto p-6 space-y-6">
                {/* Заголовок */}
                <Card>
                    <CardHeader>
                        <div className="flex items-center justify-between">
                            <div>
                                <CardTitle className="text-2xl flex items-center gap-2">
                                    <Shield className="w-6 h-6" />
                                    Новое сканирование - Advanced Penetration Testing
                                </CardTitle>
                                <p className="text-muted-foreground mt-1">
                                    Комплексная платформа автоматизированного тестирования на проникновение
                                </p>
                            </div>
                            <div className="flex items-center gap-2">
                                <Badge className="border border-green-300 bg-green-50 text-green-700">
                                    <Brain className="w-4 h-4 mr-1" />
                                    Neural: Активен
                                </Badge>
                                <Badge className="border border-blue-300 bg-blue-50 text-blue-700">
                                    Модулей: {getEnabledModulesCount()}
                                </Badge>
                            </div>
                        </div>

                        {/* Прогресс бар загрузки */}
                        {loading && (
                            <div className="mt-4">
                                <div className="flex items-center justify-between mb-2">
                                    <span className="text-sm text-muted-foreground">
                                        Инициализация сканирования...
                                    </span>
                                    <span className="text-sm font-medium">{progressValue}%</span>
                                </div>
                                <Progress value={progressValue} className="h-2" />
                            </div>
                        )}
                    </CardHeader>
                </Card>

                <form onSubmit={handleSubmit}>
                    <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
                        <TabsList className="grid grid-cols-5 w-full">
                            <TabsTrigger value="basic">Основное</TabsTrigger>
                            <TabsTrigger value="modules">Модули</TabsTrigger>
                            <TabsTrigger value="advanced">Продвинутые</TabsTrigger>
                            <TabsTrigger value="ai">ИИ & ML</TabsTrigger>
                            <TabsTrigger value="review">Обзор</TabsTrigger>
                        </TabsList>

                        {/* Основная информация */}
                        <TabsContent value="basic">
                            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                                <Card>
                                    <CardHeader>
                                        <CardTitle>Основная информация</CardTitle>
                                    </CardHeader>
                                    <CardContent className="space-y-4">
                                        <div>
                                            <Label htmlFor="scanName">Название *</Label>
                                            <Input
                                                id="scanName"
                                                value={scanName}
                                                onChange={(e) => setScanName(e.target.value)}
                                                className={validationErrors.scanName ? 'border-red-500' : ''}
                                                placeholder="Например: Комплексный аудит корпоративной сети"
                                            />
                                            {validationErrors.scanName && (
                                                <p className="text-sm text-red-600 mt-1">{validationErrors.scanName}</p>
                                            )}
                                        </div>

                                        <div>
                                            <Label htmlFor="priority">Приоритет</Label>
                                            <Select value={priority} onValueChange={handlePriorityChange}>
                                                <SelectTrigger>
                                                    <SelectValue />
                                                </SelectTrigger>
                                                <SelectContent>
                                                    <SelectItem value="low">🟢 Низкий</SelectItem>
                                                    <SelectItem value="normal">🟡 Обычный</SelectItem>
                                                    <SelectItem value="high">🟠 Высокий</SelectItem>
                                                    <SelectItem value="urgent">🔴 Срочный</SelectItem>
                                                </SelectContent>
                                            </Select>
                                        </div>

                                        <div>
                                            <Label htmlFor="description">Описание</Label>
                                            <Textarea
                                                id="description"
                                                value={scanDescription}
                                                onChange={(e) => setScanDescription(e.target.value)}
                                                rows={3}
                                                placeholder="Детальное описание целей и задач сканирования..."
                                            />
                                        </div>
                                    </CardContent>
                                </Card>

                                <Card>
                                    <CardHeader>
                                        <CardTitle>Настройка цели</CardTitle>
                                    </CardHeader>
                                    <CardContent className="space-y-4">
                                        <div>
                                            <Label>Тип цели *</Label>
                                            <Select value={targetType} onValueChange={handleTargetTypeChange}>
                                                <SelectTrigger>
                                                    <SelectValue />
                                                </SelectTrigger>
                                                <SelectContent>
                                                    <SelectItem value="single_host">🖥️ Одиночный хост</SelectItem>
                                                    <SelectItem value="ip_range">📊 Диапазон IP</SelectItem>
                                                    <SelectItem value="domain">🌐 Домен</SelectItem>
                                                    <SelectItem value="subnet">🔗 Подсеть</SelectItem>
                                                    <SelectItem value="url">🔗 URL</SelectItem>
                                                    <SelectItem value="network_segment">📡 Сегмент сети</SelectItem>
                                                    <SelectItem value="asset_group">📋 Группа активов</SelectItem>
                                                </SelectContent>
                                            </Select>
                                        </div>

                                        <div>
                                            <Label htmlFor="target">Адрес цели *</Label>
                                            <Input
                                                id="target"
                                                value={target}
                                                onChange={(e) => setTarget(e.target.value)}
                                                className={validationErrors.target ? 'border-red-500' : ''}
                                                placeholder={
                                                    targetType === 'single_host' ? '192.168.1.100' :
                                                        targetType === 'ip_range' ? '192.168.1.1-192.168.1.254' :
                                                            targetType === 'domain' ? 'example.com' :
                                                                targetType === 'subnet' ? '192.168.1.0/24' :
                                                                    targetType === 'url' ? 'https://example.com' :
                                                                        'Укажите цель сканирования'
                                                }
                                            />
                                            {validationErrors.target && (
                                                <p className="text-sm text-red-600 mt-1">{validationErrors.target}</p>
                                            )}
                                        </div>

                                        <div>
                                            <Label>Тип сканирования</Label>
                                            <Select value={scanType} onValueChange={handleScanTypeChange}>
                                                <SelectTrigger>
                                                    <SelectValue />
                                                </SelectTrigger>
                                                <SelectContent>
                                                    <SelectItem value="quick_scan">⚡ Быстрое сканирование (5-15 мин)</SelectItem>
                                                    <SelectItem value="full_scan">🔍 Полное сканирование (30-60 мин)</SelectItem>
                                                    <SelectItem value="stealth_scan">👻 Скрытое сканирование (60+ мин)</SelectItem>
                                                    <SelectItem value="aggressive_scan">💥 Агрессивное сканирование (45+ мин)</SelectItem>
                                                    <SelectItem value="custom_scan">⚙️ Пользовательское сканирование</SelectItem>
                                                </SelectContent>
                                            </Select>
                                        </div>

                                        <div>
                                            <Label>Расписание</Label>
                                            <Select value={schedule} onValueChange={handleScheduleChange}>
                                                <SelectTrigger>
                                                    <SelectValue />
                                                </SelectTrigger>
                                                <SelectContent>
                                                    <SelectItem value="immediate">▶️ Запустить немедленно</SelectItem>
                                                    <SelectItem value="scheduled">📅 Запланировать</SelectItem>
                                                </SelectContent>
                                            </Select>

                                            {schedule === 'scheduled' && (
                                                <div className="mt-2">
                                                    <Label htmlFor="scheduledTime">Время запуска *</Label>
                                                    <Input
                                                        id="scheduledTime"
                                                        type="datetime-local"
                                                        value={scheduledTime}
                                                        onChange={(e) => setScheduledTime(e.target.value)}
                                                        className={validationErrors.scheduledTime ? 'border-red-500' : ''}
                                                    />
                                                    {validationErrors.scheduledTime && (
                                                        <p className="text-sm text-red-600 mt-1">{validationErrors.scheduledTime}</p>
                                                    )}
                                                </div>
                                            )}
                                        </div>

                                        {scanType === 'custom_scan' && (
                                            <div>
                                                <Label htmlFor="customPorts">Пользовательские порты *</Label>
                                                <Input
                                                    id="customPorts"
                                                    value={customPorts}
                                                    onChange={(e) => setCustomPorts(e.target.value)}
                                                    className={validationErrors.customPorts ? 'border-red-500' : ''}
                                                    placeholder="22,80,443,8080-8090"
                                                />
                                                {validationErrors.customPorts && (
                                                    <p className="text-sm text-red-600 mt-1">{validationErrors.customPorts}</p>
                                                )}
                                            </div>
                                        )}
                                    </CardContent>
                                </Card>
                            </div>
                        </TabsContent>

                        {/* Модули сканирования */}
                        <TabsContent value="modules">
                            <Card>
                                <CardHeader>
                                    <div className="flex items-center justify-between">
                                        <CardTitle>Модули сканирования</CardTitle>
                                        <div className="flex items-center gap-4">
                                            <div className="text-sm text-muted-foreground">
                                                Время: <Badge className="border border-blue-300 bg-blue-50 text-blue-700">
                                                    {calculateTotalEstimatedTime()}
                                                </Badge>
                                            </div>
                                            <div className="text-sm text-muted-foreground">
                                                Риск: <Badge className="border border-orange-300 bg-orange-50 text-orange-700">
                                                    {calculateRiskScore().toFixed(0)}%
                                                </Badge>
                                            </div>
                                        </div>
                                    </div>
                                    {validationErrors.modules && (
                                        <Alert>
                                            <AlertTriangle className="h-4 w-4" />
                                            <AlertDescription className="text-red-600">
                                                {validationErrors.modules}
                                            </AlertDescription>
                                        </Alert>
                                    )}
                                </CardHeader>
                                <CardContent>
                                    <Accordion type="multiple" className="space-y-4">
                                        {['basic', 'advanced', 'ai', 'specialized', 'experimental'].map(category => {
                                            const categoryModules = getModulesByCategory(category);
                                            const enabledCount = categoryModules.filter(m => m.enabled).length;
                                            const CategoryIcon = getCategoryIconComponent(category);

                                            return (
                                                <AccordionItem key={category} value={category}>
                                                    <AccordionTrigger className="hover:no-underline">
                                                        <div className="flex items-center justify-between w-full pr-4">
                                                            <div className="flex items-center gap-2">
                                                                <CategoryIcon className="w-5 h-5" />
                                                                <span className="font-semibold capitalize">
                                                                    {category === 'basic' ? 'Базовые' :
                                                                        category === 'advanced' ? 'Продвинутые' :
                                                                            category === 'ai' ? 'ИИ-модули' :
                                                                                category === 'specialized' ? 'Специализированные' :
                                                                                    'Экспериментальные'}
                                                                </span>
                                                            </div>
                                                            <Badge className="border border-gray-300 bg-gray-50 text-gray-700">
                                                                {enabledCount}/{categoryModules.length}
                                                            </Badge>
                                                        </div>
                                                    </AccordionTrigger>
                                                    <AccordionContent>
                                                        <ScrollArea className="h-96">
                                                            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 p-2">
                                                                {categoryModules.map((module) => {
                                                                    const Icon = getIconComponent(module.icon);
                                                                    const CategoryIcon = getCategoryIconComponent(module.category);

                                                                    return (
                                                                        <Tooltip key={module.id}>
                                                                            <TooltipTrigger asChild>
                                                                                <Card
                                                                                    className={`cursor-pointer transition-all hover:shadow-md ${module.enabled ? 'ring-2 ring-blue-500 bg-blue-50' : 'hover:bg-gray-50'
                                                                                        }`}
                                                                                    onClick={() => toggleModule(module.id)}
                                                                                >
                                                                                    <CardContent className="p-4">
                                                                                        <div className="flex items-start justify-between mb-2">
                                                                                            <div className="flex items-center space-x-2">
                                                                                                <Icon className="w-5 h-5 text-gray-600" />
                                                                                                <CategoryIcon className="w-4 h-4 text-gray-400" />
                                                                                            </div>
                                                                                            <div className="flex items-center space-x-1">
                                                                                                {module.enabled && <CheckCircle className="w-4 h-4 text-green-600" />}
                                                                                                <Badge className={getSeverityColor(module.severity)}>
                                                                                                    {module.severity}
                                                                                                </Badge>
                                                                                            </div>
                                                                                        </div>

                                                                                        <h4 className="font-semibold text-sm mb-1">{module.name}</h4>
                                                                                        <p className="text-xs text-gray-600 mb-2 line-clamp-2">{module.description}</p>

                                                                                        <div className="flex items-center justify-between text-xs">
                                                                                            <span className="text-gray-500">⏱️ {module.estimatedTime}</span>
                                                                                            {module.riskLevel && (
                                                                                                <Badge className={getRiskLevelColor(module.riskLevel)}>
                                                                                                    {module.riskLevel}
                                                                                                </Badge>
                                                                                            )}
                                                                                        </div>

                                                                                        {module.requiresCredentials && (
                                                                                            <div className="mt-2">
                                                                                                <Badge className="border border-orange-300 bg-orange-50 text-orange-700">
                                                                                                    🔐 Требуются учетные данные
                                                                                                </Badge>
                                                                                            </div>
                                                                                        )}
                                                                                    </CardContent>
                                                                                </Card>
                                                                            </TooltipTrigger>
                                                                            <TooltipContent>
                                                                                <p className="max-w-xs">{module.description}</p>
                                                                            </TooltipContent>
                                                                        </Tooltip>
                                                                    );
                                                                })}
                                                            </div>
                                                        </ScrollArea>
                                                    </AccordionContent>
                                                </AccordionItem>
                                            );
                                        })}
                                    </Accordion>
                                </CardContent>
                            </Card>
                        </TabsContent>

                        {/* Продвинутые настройки */}
                        <TabsContent value="advanced">
                            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                                <Card>
                                    <CardHeader>
                                        <CardTitle>Параметры выполнения</CardTitle>
                                    </CardHeader>
                                    <CardContent className="space-y-4">
                                        <div>
                                            <Label htmlFor="maxConcurrent">Максимум одновременных сканирований</Label>
                                            <Input
                                                id="maxConcurrent"
                                                type="number"
                                                value={maxConcurrentScans}
                                                onChange={(e) => setMaxConcurrentScans(parseInt(e.target.value))}
                                                min="1"
                                                max="50"
                                            />
                                        </div>

                                        <div>
                                            <Label htmlFor="timeout">Тайм-аут сканирования (минуты)</Label>
                                            <Input
                                                id="timeout"
                                                type="number"
                                                value={scanTimeout}
                                                onChange={(e) => setScanTimeout(parseInt(e.target.value))}
                                                min="5"
                                                max="1440"
                                            />
                                        </div>

                                        <div>
                                            <Label htmlFor="retries">Количество повторных попыток</Label>
                                            <Input
                                                id="retries"
                                                type="number"
                                                value={retryAttempts}
                                                onChange={(e) => setRetryAttempts(parseInt(e.target.value))}
                                                min="0"
                                                max="10"
                                            />
                                        </div>

                                        <div>
                                            <Label htmlFor="rateLimit">Ограничение скорости (пакетов/сек)</Label>
                                            <Input
                                                id="rateLimit"
                                                type="number"
                                                value={rateLimiting}
                                                onChange={(e) => setRateLimiting(parseInt(e.target.value))}
                                                min="1"
                                                max="10000"
                                            />
                                        </div>
                                    </CardContent>
                                </Card>

                                <Card>
                                    <CardHeader>
                                        <CardTitle>
                                            <div className="flex items-center justify-between">
                                                Техники уклонения
                                                <Tooltip>
                                                    <TooltipTrigger>
                                                        <HelpCircle className="w-4 h-4 text-gray-400" />
                                                    </TooltipTrigger>
                                                    <TooltipContent>
                                                        <p>Методы для обхода систем защиты</p>
                                                    </TooltipContent>
                                                </Tooltip>
                                            </div>
                                        </CardTitle>
                                    </CardHeader>
                                    <CardContent>
                                        <Collapsible open={showAdvancedSettings} onOpenChange={setShowAdvancedSettings}>
                                            <CollapsibleTrigger asChild>
                                                <Button variant="ghost" className="w-full justify-between">
                                                    Показать техники уклонения
                                                    {showAdvancedSettings ? <ChevronUp /> : <ChevronDown />}
                                                </Button>
                                            </CollapsibleTrigger>
                                            <CollapsibleContent className="space-y-2 mt-4">
                                                <div className="grid grid-cols-1 gap-2">
                                                    {evasionTechniques.map((technique) => (
                                                        <div key={technique} className="flex items-center space-x-2">
                                                            <Switch
                                                                checked={advancedOptions.evasionTechniques.includes(technique)}
                                                                onCheckedChange={(checked) => {
                                                                    if (checked) {
                                                                        setAdvancedOptions(prev => ({
                                                                            ...prev,
                                                                            evasionTechniques: [...prev.evasionTechniques, technique]
                                                                        }));
                                                                    } else {
                                                                        setAdvancedOptions(prev => ({
                                                                            ...prev,
                                                                            evasionTechniques: prev.evasionTechniques.filter(t => t !== technique)
                                                                        }));
                                                                    }
                                                                }}
                                                            />
                                                            <Label className="text-sm">{technique}</Label>
                                                        </div>
                                                    ))}
                                                </div>
                                            </CollapsibleContent>
                                        </Collapsible>
                                    </CardContent>
                                </Card>

                                <Card>
                                    <CardHeader>
                                        <CardTitle>Учетные данные</CardTitle>
                                    </CardHeader>
                                    <CardContent className="space-y-4">
                                        <div>
                                            <Label htmlFor="username">Имя пользователя</Label>
                                            <Input
                                                id="username"
                                                value={credentials.username}
                                                onChange={(e) => setCredentials(prev => ({ ...prev, username: e.target.value }))}
                                                placeholder="admin"
                                            />
                                        </div>

                                        <div>
                                            <Label htmlFor="password">Пароль</Label>
                                            <Input
                                                id="password"
                                                type="password"
                                                value={credentials.password}
                                                onChange={(e) => setCredentials(prev => ({ ...prev, password: e.target.value }))}
                                                placeholder="••••••••"
                                            />
                                        </div>

                                        <div>
                                            <Label htmlFor="domain">Домен</Label>
                                            <Input
                                                id="domain"
                                                value={credentials.domain}
                                                onChange={(e) => setCredentials(prev => ({ ...prev, domain: e.target.value }))}
                                                placeholder="WORKGROUP"
                                            />
                                        </div>

                                        {validationErrors.credentials && (
                                            <Alert>
                                                <AlertTriangle className="h-4 w-4" />
                                                <AlertDescription className="text-red-600">
                                                    {validationErrors.credentials}
                                                </AlertDescription>
                                            </Alert>
                                        )}
                                    </CardContent>
                                </Card>

                                <Card>
                                    <CardHeader>
                                        <CardTitle>Дополнительные опции</CardTitle>
                                    </CardHeader>
                                    <CardContent className="space-y-4">
                                        <div className="flex items-center justify-between">
                                            <Label>Анализ трафика</Label>
                                            <Switch
                                                checked={advancedOptions.trafficAnalysis}
                                                onCheckedChange={(checked) => setAdvancedOptions(prev => ({ ...prev, trafficAnalysis: checked }))}
                                            />
                                        </div>

                                        <div className="flex items-center justify-between">
                                            <Label>Глубокая инспекция пакетов</Label>
                                            <Switch
                                                checked={advancedOptions.deepPacketInspection}
                                                onCheckedChange={(checked) => setAdvancedOptions(prev => ({ ...prev, deepPacketInspection: checked }))}
                                            />
                                        </div>

                                        <div className="flex items-center justify-between">
                                            <Label>Анализ угроз</Label>
                                            <Switch
                                                checked={advancedOptions.threatIntelligence}
                                                onCheckedChange={(checked) => setAdvancedOptions(prev => ({ ...prev, threatIntelligence: checked }))}
                                            />
                                        </div>

                                        <div className="flex items-center justify-between">
                                            <Label>Пользовательские нагрузки</Label>
                                            <Switch
                                                checked={advancedOptions.customPayloads}
                                                onCheckedChange={(checked) => setAdvancedOptions(prev => ({ ...prev, customPayloads: checked }))}
                                            />
                                        </div>

                                        <div className="flex items-center justify-between">
                                            <Label>Поиск Zero-Day</Label>
                                            <Switch
                                                checked={advancedOptions.zeroDay}
                                                onCheckedChange={(checked) => setAdvancedOptions(prev => ({ ...prev, zeroDay: checked }))}
                                            />
                                        </div>
                                    </CardContent>
                                </Card>
                            </div>
                        </TabsContent>

                        {/* ИИ и ML настройки */}
                        <TabsContent value="ai">
                            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                                <Card>
                                    <CardHeader>
                                        <CardTitle>Модели искусственного интеллекта</CardTitle>
                                    </CardHeader>
                                    <CardContent className="space-y-4">
                                        <div className="flex items-center justify-between">
                                            <div>
                                                <Label>Обнаружение аномалий</Label>
                                                <p className="text-sm text-gray-600">Поиск отклонений в поведении системы</p>
                                            </div>
                                            <Switch
                                                checked={aiModels.anomalyDetection}
                                                onCheckedChange={(checked) => setAiModels(prev => ({ ...prev, anomalyDetection: checked }))}
                                            />
                                        </div>

                                        <Separator />

                                        <div className="flex items-center justify-between">
                                            <div>
                                                <Label>Поведенческий анализ</Label>
                                                <p className="text-sm text-gray-600">Анализ паттернов пользователей</p>
                                            </div>
                                            <Switch
                                                checked={aiModels.behaviorAnalysis}
                                                onCheckedChange={(checked) => setAiModels(prev => ({ ...prev, behaviorAnalysis: checked }))}
                                            />
                                        </div>

                                        <Separator />

                                        <div className="flex items-center justify-between">
                                            <div>
                                                <Label>Распознавание паттернов</Label>
                                                <p className="text-sm text-gray-600">Выявление известных атак</p>
                                            </div>
                                            <Switch
                                                checked={aiModels.patternRecognition}
                                                onCheckedChange={(checked) => setAiModels(prev => ({ ...prev, patternRecognition: checked }))}
                                            />
                                        </div>

                                        <Separator />

                                        <div className="flex items-center justify-between">
                                            <div>
                                                <Label>Предиктивный анализ</Label>
                                                <p className="text-sm text-gray-600">Прогнозирование угроз</p>
                                            </div>
                                            <Switch
                                                checked={aiModels.predictiveAnalysis}
                                                onCheckedChange={(checked) => setAiModels(prev => ({ ...prev, predictiveAnalysis: checked }))}
                                            />
                                        </div>

                                        <Separator />

                                        <div className="flex items-center justify-between">
                                            <div>
                                                <Label>Глубокое обучение</Label>
                                                <p className="text-sm text-gray-600">Нейронные сети для сложных задач</p>
                                            </div>
                                            <Switch
                                                checked={aiModels.deepLearning}
                                                onCheckedChange={(checked) => setAiModels(prev => ({ ...prev, deepLearning: checked }))}
                                            />
                                        </div>
                                    </CardContent>
                                </Card>

                                <Card>
                                    <CardHeader>
                                        <CardTitle>Общие настройки ИИ</CardTitle>
                                    </CardHeader>
                                    <CardContent className="space-y-4">
                                        <div className="flex items-center justify-between">
                                            <div>
                                                <Label>Neural Network Assistance</Label>
                                                <p className="text-sm text-gray-600">ИИ-поддержка для обнаружения уязвимостей</p>
                                            </div>
                                            <Switch
                                                checked={neuralAssist}
                                                onCheckedChange={setNeuralAssist}
                                            />
                                        </div>

                                        <Separator />

                                        <div className="flex items-center justify-between">
                                            <div>
                                                <Label>Агрессивный режим</Label>
                                                <p className="text-sm text-gray-600">Более тщательное сканирование с ИИ</p>
                                            </div>
                                            <Switch
                                                checked={aggressiveMode}
                                                onCheckedChange={setAggressiveMode}
                                            />
                                        </div>

                                        <Separator />

                                        <div className="flex items-center justify-between">
                                            <div>
                                                <Label>Сохранить как шаблон</Label>
                                                <p className="text-sm text-gray-600">Сохранить конфигурацию для повторного использования</p>
                                            </div>
                                            <Switch
                                                checked={saveAsTemplate}
                                                onCheckedChange={setSaveAsTemplate}
                                            />
                                        </div>

                                        {saveAsTemplate && (
                                            <div>
                                                <Label htmlFor="templateName">Название шаблона</Label>
                                                <Input
                                                    id="templateName"
                                                    value={templateName}
                                                    onChange={(e) => setTemplateName(e.target.value)}
                                                    placeholder="Мой шаблон сканирования"
                                                />
                                            </div>
                                        )}
                                    </CardContent>
                                </Card>
                            </div>
                        </TabsContent>

                        {/* Обзор конфигурации */}
                        <TabsContent value="review">
                            <Card>
                                <CardHeader>
                                    <CardTitle>Обзор конфигурации сканирования</CardTitle>
                                </CardHeader>
                                <CardContent className="space-y-6">
                                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                        <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
                                            <h4 className="font-semibold text-blue-900">Основная информация</h4>
                                            <p className="text-sm text-blue-700">Название: {scanName || 'Не указано'}</p>
                                            <p className="text-sm text-blue-700">Цель: {target || 'Не указана'}</p>
                                            <p className="text-sm text-blue-700">Тип: {scanType}</p>
                                            <p className="text-sm text-blue-700">Приоритет: {priority}</p>
                                        </div>

                                        <div className="bg-green-50 p-4 rounded-lg border border-green-200">
                                            <h4 className="font-semibold text-green-900">Модули сканирования</h4>
                                            <p className="text-sm text-green-700">
                                                Выбрано: {scanModules.filter(m => m.enabled).length} из {scanModules.length}
                                            </p>
                                            <p className="text-sm text-green-700">Время: {calculateTotalEstimatedTime()}</p>
                                            <p className="text-sm text-green-700">Риск: {calculateRiskScore().toFixed(0)}%</p>
                                        </div>

                                        <div className="bg-purple-50 p-4 rounded-lg border border-purple-200">
                                            <h4 className="font-semibold text-purple-900">ИИ и настройки</h4>
                                            <p className="text-sm text-purple-700">
                                                Neural Assist: {neuralAssist ? 'Включен' : 'Выключен'}
                                            </p>
                                            <p className="text-sm text-purple-700">
                                                Агрессивный режим: {aggressiveMode ? 'Включен' : 'Выключен'}
                                            </p>
                                            <p className="text-sm text-purple-700">
                                                Техники уклонения: {advancedOptions.evasionTechniques.length}
                                            </p>
                                        </div>
                                    </div>

                                    <Separator />

                                    <div>
                                        <h4 className="font-semibold mb-2">Активные модули:</h4>
                                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2">
                                            {scanModules.filter(m => m.enabled).map(module => (
                                                <Badge key={module.id} className="border border-blue-300 bg-blue-50 text-blue-700 justify-start">
                                                    {module.name}
                                                </Badge>
                                            ))}
                                        </div>

                                        {scanModules.filter(m => m.enabled).length === 0 && (
                                            <p className="text-gray-500 italic">Модули не выбраны</p>
                                        )}
                                    </div>

                                    {error && (
                                        <Alert>
                                            <AlertTriangle className="w-5 h-5 text-red-600" />
                                            <AlertDescription className="text-red-800">
                                                {error}
                                            </AlertDescription>
                                        </Alert>
                                    )}

                                    <div className="flex justify-end space-x-4">
                                        {saveAsTemplate && (
                                            <Button
                                                type="button"
                                                variant="outline"
                                                onClick={handleSaveTemplate}
                                                disabled={loading}
                                            >
                                                <Save className="mr-2 w-4 h-4" />
                                                Сохранить как шаблон
                                            </Button>
                                        )}

                                        <Button type="submit" disabled={loading} size="lg">
                                            {loading ? (
                                                <>
                                                    <Loader2 className="mr-2 w-4 h-4 animate-spin" />
                                                    Запуск...
                                                </>
                                            ) : (
                                                <>
                                                    {schedule === 'immediate' ? (
                                                        <Play className="mr-2 w-4 h-4" />
                                                    ) : (
                                                        <Calendar className="mr-2 w-4 h-4" />
                                                    )}
                                                    {schedule === 'immediate' ? 'Запустить сканирование' : 'Запланировать сканирование'}
                                                </>
                                            )}
                                        </Button>
                                    </div>
                                </CardContent>
                            </Card>
                        </TabsContent>
                    </Tabs>
                </form>
            </div>
        </TooltipProvider>
    );
};

export default NewScanPage;
