// Основные интерфейсы для конфигурации сканирования
export interface ScanModule {
    id: string;
    name: string;
    description: string;
    severity: 'critical' | 'high' | 'medium' | 'low' | 'informational';
    icon: string; // Название иконки из lucide-react
    estimatedTime: string;
    enabled: boolean;
    category: 'basic' | 'advanced' | 'ai' | 'specialized' | 'experimental';
    requiresCredentials?: boolean;
    riskLevel?: 'safe' | 'moderate' | 'aggressive' | 'destructive';
    dependencies?: string[]; // ID других модулей, которые должны быть включены
    conflictsWith?: string[]; // ID модулей, с которыми нельзя использовать одновременно
    minPorts?: number; // Минимальное количество портов для сканирования
    supportedTargets?: ('single_host' | 'ip_range' | 'domain' | 'subnet' | 'url' | 'network_segment' | 'asset_group')[];
}

export interface AdvancedOptions {
    evasionTechniques: string[];
    trafficAnalysis: boolean;
    deepPacketInspection: boolean;
    behavioralAnalysis: boolean;
    threatIntelligence: boolean;
    customPayloads: boolean;
    zeroDay: boolean;
    socialEngineering: boolean;
    stealthMode: boolean;
    antiDetection: boolean;
    customUserAgent: string;
    proxyChain: string[];
    rateLimitBypass: boolean;
}

export interface AIModelsConfig {
    anomalyDetection: boolean;
    behaviorAnalysis: boolean;
    patternRecognition: boolean;
    predictiveAnalysis: boolean;
    deepLearning: boolean;
    neuralNetworkEngine: string;
    machineLearningModels: string[];
    trainingDatasets: string[];
}

export interface ScanCredentials {
    username: string;
    password: string;
    domain: string;
    sshKey?: string;
    apiToken?: string;
    databaseConnectionString?: string;
    customHeaders?: { [key: string]: string };
}

export interface ScanConfiguration {
    id?: string;
    name: string;
    description: string;
    priority: 'low' | 'normal' | 'high' | 'urgent';
    targetType: 'single_host' | 'ip_range' | 'domain' | 'subnet' | 'url' | 'network_segment' | 'asset_group';
    target: string;
    scanType: 'quick_scan' | 'full_scan' | 'stealth_scan' | 'aggressive_scan' | 'custom_scan';
    schedule: {
        type: 'immediate' | 'scheduled';
        datetime?: string;
        timezone?: string;
    };
    customPorts?: string;
    credentials?: ScanCredentials;
    modules: string[]; // ID выбранных модулей

    // Продвинутые настройки
    maxConcurrentScans: number;
    scanTimeout: number;
    retryAttempts: number;
    rateLimiting: number;

    // AI и ML настройки
    neuralAssist: boolean;
    aggressiveMode: boolean;
    aiModels: AIModelsConfig;

    // Дополнительные опции
    advancedOptions: AdvancedOptions;

    // Метаданные
    saveAsTemplate: boolean;
    templateName?: string;
    createdBy?: string;
    createdAt?: string;
    tags?: string[];
}

export interface ScanTemplate {
    id: string;
    name: string;
    description: string;
    category: 'security' | 'compliance' | 'infrastructure' | 'application' | 'custom';
    configuration: Partial<ScanConfiguration>;
    isDefault: boolean;
    popularity?: number;
    lastUsed?: string;
}

// Модули сканирования с профильными настройками для пентеста
export const scanModulesData: ScanModule[] = [
    // Базовые модули
    {
        id: 'port_discovery',
        name: 'Port Discovery & Analysis',
        description: 'Комплексное сканирование портов с анализом сервисов и баннеров',
        severity: 'low',
        icon: 'Target',
        estimatedTime: '2-5 мин',
        enabled: true,
        category: 'basic',
        riskLevel: 'safe',
        supportedTargets: ['single_host', 'ip_range', 'subnet', 'network_segment']
    },
    {
        id: 'service_enumeration',
        name: 'Service Enumeration',
        description: 'Глубокое исследование сервисов с версионным анализом',
        severity: 'medium',
        icon: 'Search',
        estimatedTime: '5-10 мин',
        enabled: true,
        category: 'basic',
        riskLevel: 'safe',
        dependencies: ['port_discovery']
    },
    {
        id: 'os_fingerprinting',
        name: 'Operating System Fingerprinting',
        description: 'Определение операционной системы и её версии',
        severity: 'low',
        icon: 'Monitor',
        estimatedTime: '3-8 мин',
        enabled: false,
        category: 'basic',
        riskLevel: 'safe'
    },
    {
        id: 'vulnerability_discovery',
        name: 'Vulnerability Discovery',
        description: 'Поиск известных уязвимостей в обнаруженных сервисах',
        severity: 'medium',
        icon: 'AlertTriangle',
        estimatedTime: '10-20 мин',
        enabled: false,
        category: 'basic',
        riskLevel: 'moderate',
        dependencies: ['service_enumeration']
    },

    // Продвинутые модули
    {
        id: 'web_application_scan',
        name: 'Web Application Security Testing',
        description: 'OWASP Top 10, бизнес-логика, API тестирование, XSS, SQLi',
        severity: 'high',
        icon: 'Globe',
        estimatedTime: '15-45 мин',
        enabled: false,
        category: 'advanced',
        riskLevel: 'moderate',
        supportedTargets: ['url', 'domain'],
        requiresCredentials: false
    },
    {
        id: 'database_security_audit',
        name: 'Database Security Audit',
        description: 'Аудит БД: права доступа, инъекции, конфигурация, слабые пароли',
        severity: 'high',
        icon: 'Database',
        estimatedTime: '10-25 мин',
        enabled: false,
        category: 'advanced',
        requiresCredentials: true,
        riskLevel: 'moderate'
    },
    {
        id: 'network_penetration',
        name: 'Network Penetration Testing',
        description: 'Комплексное тестирование на проникновение в сетевую инфраструктуру',
        severity: 'high',
        icon: 'Network',
        estimatedTime: '30-90 мин',
        enabled: false,
        category: 'advanced',
        riskLevel: 'aggressive',
        dependencies: ['port_discovery', 'service_enumeration']
    },
    {
        id: 'privilege_escalation_chains',
        name: 'Privilege Escalation Chains',
        description: 'Поиск цепочек повышения привилегий в системе',
        severity: 'critical',
        icon: 'Key',
        estimatedTime: '30-90 мин',
        enabled: false,
        category: 'advanced',
        riskLevel: 'aggressive',
        requiresCredentials: true
    },

    // AI-powered модули
    {
        id: 'neural_threat_detection',
        name: 'Neural Threat Detection',
        description: 'ИИ-анализ угроз с использованием глубокого обучения',
        severity: 'critical',
        icon: 'Brain',
        estimatedTime: '20-60 мин',
        enabled: false,
        category: 'ai',
        riskLevel: 'safe'
    },
    {
        id: 'behavioral_analysis',
        name: 'Behavioral Pattern Analysis',
        description: 'Анализ поведенческих паттернов для выявления аномалий',
        severity: 'high',
        icon: 'Activity',
        estimatedTime: '25-50 мин',
        enabled: false,
        category: 'ai',
        riskLevel: 'safe'
    },
    {
        id: 'ml_vulnerability_prediction',
        name: 'ML Vulnerability Prediction',
        description: 'Предсказание уязвимостей на основе машинного обучения',
        severity: 'high',
        icon: 'Zap',
        estimatedTime: '30-90 мин',
        enabled: false,
        category: 'ai',
        riskLevel: 'safe'
    },
    {
        id: 'ai_payload_generation',
        name: 'AI Payload Generation',
        description: 'Автоматическая генерация эксплойтов с помощью ИИ',
        severity: 'critical',
        icon: 'Cpu',
        estimatedTime: '45-120 мин',
        enabled: false,
        category: 'ai',
        riskLevel: 'aggressive'
    },

    // Специализированные модули
    {
        id: 'timing_attack_analysis',
        name: 'Timing Attack Analysis',
        description: 'Анализ тайминговых атак и побочных каналов',
        severity: 'high',
        icon: 'Clock',
        estimatedTime: '15-30 мин',
        enabled: false,
        category: 'specialized',
        riskLevel: 'moderate'
    },
    {
        id: 'side_channel_analysis',
        name: 'Side-Channel Analysis',
        description: 'Анализ утечек через побочные каналы (энергопотребление, ЭМИ)',
        severity: 'critical',
        icon: 'Radar',
        estimatedTime: '45-120 мин',
        enabled: false,
        category: 'specialized',
        riskLevel: 'aggressive'
    },
    {
        id: 'cryptographic_weakness',
        name: 'Cryptographic Weakness Analysis',
        description: 'Анализ криптографических слабостей и реализаций',
        severity: 'critical',
        icon: 'Lock',
        estimatedTime: '20-60 мин',
        enabled: false,
        category: 'specialized',
        riskLevel: 'moderate'
    },
    {
        id: 'wireless_security_audit',
        name: 'Wireless Security Comprehensive Audit',
        description: 'WPA3, Bluetooth, ZigBee, LoRaWAN анализ',
        severity: 'high',
        icon: 'Wifi',
        estimatedTime: '20-45 мин',
        enabled: false,
        category: 'specialized',
        riskLevel: 'moderate'
    },
    {
        id: 'iot_protocol_analysis',
        name: 'IoT Protocol Security Analysis',
        description: 'MQTT, CoAP, AMQP, промышленные протоколы',
        severity: 'high',
        icon: 'Radio',
        estimatedTime: '25-60 мин',
        enabled: false,
        category: 'specialized',
        riskLevel: 'moderate'
    },
    {
        id: 'mobile_app_security',
        name: 'Mobile Application Security',
        description: 'Android/iOS приложения, реверс-инжиниринг',
        severity: 'high',
        icon: 'Smartphone',
        estimatedTime: '40-120 мин',
        enabled: false,
        category: 'specialized',
        riskLevel: 'moderate'
    },
    {
        id: 'industrial_control_systems',
        name: 'Industrial Control Systems (ICS/SCADA)',
        description: 'Modbus, DNP3, IEC 61850 протоколы',
        severity: 'critical',
        icon: 'Factory',
        estimatedTime: '60-180 мин',
        enabled: false,
        category: 'specialized',
        riskLevel: 'aggressive'
    },
    {
        id: 'blockchain_smart_contracts',
        name: 'Blockchain & Smart Contract Audit',
        description: 'Solidity, виртуальные машины, DeFi протоколы',
        severity: 'high',
        icon: 'Coins',
        estimatedTime: '90-240 мин',
        enabled: false,
        category: 'specialized',
        riskLevel: 'safe'
    },
    {
        id: 'cloud_misconfig_hunter',
        name: 'Cloud Misconfiguration Hunter',
        description: 'AWS, Azure, GCP неправильные конфигурации',
        severity: 'high',
        icon: 'Cloud',
        estimatedTime: '15-60 мин',
        enabled: false,
        category: 'specialized',
        riskLevel: 'safe'
    },

    // Экспериментальные модули
    {
        id: 'advanced_fuzzing',
        name: 'Advanced Fuzzing Framework',
        description: 'Генетические алгоритмы, coverage-guided fuzzing',
        severity: 'high',
        icon: 'Bug',
        estimatedTime: '60-300 мин',
        enabled: false,
        category: 'experimental',
        riskLevel: 'aggressive'
    },
    {
        id: 'zero_day_detection',
        name: 'Zero-Day Detection Engine',
        description: 'Поиск неизвестных уязвимостей с помощью ИИ',
        severity: 'critical',
        icon: 'Eye',
        estimatedTime: '120-480 мин',
        enabled: false,
        category: 'experimental',
        riskLevel: 'aggressive'
    },
    {
        id: 'quantum_cryptanalysis',
        name: 'Quantum Cryptanalysis Simulation',
        description: 'Симуляция квантовых атак на криптографию',
        severity: 'critical',
        icon: 'Microscope',
        estimatedTime: '180-600 мин',
        enabled: false,
        category: 'experimental',
        riskLevel: 'safe'
    },
    {
        id: 'supply_chain_analysis',
        name: 'Supply Chain Security Analysis',
        description: 'Анализ цепочек поставок ПО и зависимостей',
        severity: 'high',
        icon: 'Layers',
        estimatedTime: '45-120 мин',
        enabled: false,
        category: 'experimental',
        riskLevel: 'safe'
    },
    {
        id: 'biometric_bypass',
        name: 'Biometric Security Bypass',
        description: 'Тестирование обхода биометрических систем',
        severity: 'critical',
        icon: 'Fingerprint',
        estimatedTime: '30-90 мин',
        enabled: false,
        category: 'experimental',
        riskLevel: 'destructive'
    },
    {
        id: 'memory_forensics',
        name: 'Memory Forensics Analysis',
        description: 'Анализ оперативной памяти для поиска артефактов',
        severity: 'high',
        icon: 'HardDrive',
        estimatedTime: '60-180 мин',
        enabled: false,
        category: 'experimental',
        riskLevel: 'moderate'
    }
];

// Техники уклонения
export const evasionTechniques = [
    'IP Fragmentation',
    'TCP Segmentation',
    'Timing Delays',
    'Decoy Scanning',
    'Source Port Spoofing',
    'Proxy Chains',
    'Traffic Obfuscation',
    'Protocol Mutation',
    'Steganography',
    'DNS Tunneling',
    'HTTP Header Manipulation',
    'SSL/TLS Evasion'
];

// Предустановленные шаблоны сканирования
export const scanTemplates: ScanTemplate[] = [
    {
        id: 'quick-security-check',
        name: 'Быстрая проверка безопасности',
        description: 'Базовое сканирование для быстрой оценки уровня безопасности',
        category: 'security',
        isDefault: true,
        popularity: 95,
        configuration: {
            priority: 'normal',
            scanType: 'quick_scan',
            modules: ['port_discovery', 'service_enumeration', 'vulnerability_discovery'],
            maxConcurrentScans: 3,
            scanTimeout: 15,
            retryAttempts: 2,
            neuralAssist: true,
            aggressiveMode: false
        }
    },
    {
        id: 'comprehensive-pentest',
        name: 'Комплексный пентест',
        description: 'Полное тестирование на проникновение с использованием всех доступных методов',
        category: 'security',
        isDefault: false,
        popularity: 78,
        configuration: {
            priority: 'high',
            scanType: 'full_scan',
            modules: [
                'port_discovery', 'service_enumeration', 'vulnerability_discovery',
                'web_application_scan', 'network_penetration', 'privilege_escalation_chains',
                'neural_threat_detection', 'behavioral_analysis'
            ],
            maxConcurrentScans: 5,
            scanTimeout: 120,
            retryAttempts: 3,
            neuralAssist: true,
            aggressiveMode: true
        }
    },
    {
        id: 'web-app-audit',
        name: 'Аудит веб-приложения',
        description: 'Специализированное тестирование веб-приложений',
        category: 'application',
        isDefault: false,
        popularity: 87,
        configuration: {
            priority: 'high',
            scanType: 'custom_scan',
            targetType: 'url',
            modules: ['web_application_scan', 'neural_threat_detection'],
            customPorts: '80,443,8080,8443',
            maxConcurrentScans: 2,
            scanTimeout: 60,
            retryAttempts: 2,
            neuralAssist: true,
            aggressiveMode: false
        }
    },
    {
        id: 'compliance-pci-dss',
        name: 'Проверка соответствия PCI DSS',
        description: 'Аудит соответствия требованиям PCI DSS',
        category: 'compliance',
        isDefault: false,
        popularity: 65,
        configuration: {
            priority: 'high',
            scanType: 'full_scan',
            modules: [
                'port_discovery', 'service_enumeration', 'vulnerability_discovery',
                'web_application_scan', 'database_security_audit', 'cryptographic_weakness'
            ],
            maxConcurrentScans: 2,
            scanTimeout: 90,
            retryAttempts: 1,
            neuralAssist: false,
            aggressiveMode: false
        }
    },
    {
        id: 'infrastructure-audit',
        name: 'Аудит инфраструктуры',
        description: 'Комплексная проверка сетевой инфраструктуры',
        category: 'infrastructure',
        isDefault: false,
        popularity: 72,
        configuration: {
            priority: 'normal',
            scanType: 'full_scan',
            targetType: 'subnet',
            modules: [
                'port_discovery', 'service_enumeration', 'os_fingerprinting',
                'vulnerability_discovery', 'network_penetration'
            ],
            maxConcurrentScans: 10,
            scanTimeout: 45,
            retryAttempts: 2,
            neuralAssist: true,
            aggressiveMode: false
        }
    },
    {
        id: 'stealth-reconnaissance',
        name: 'Скрытая разведка',
        description: 'Незаметное сканирование с использованием техник уклонения',
        category: 'security',
        isDefault: false,
        popularity: 58,
        configuration: {
            priority: 'normal',
            scanType: 'stealth_scan',
            modules: ['port_discovery', 'service_enumeration'],
            maxConcurrentScans: 1,
            scanTimeout: 180,
            retryAttempts: 1,
            rateLimiting: 10,
            neuralAssist: false,
            aggressiveMode: false,
            advancedOptions: {
                evasionTechniques: ['Timing Delays', 'Decoy Scanning', 'Source Port Spoofing'],
                trafficAnalysis: false,
                deepPacketInspection: false,
                behavioralAnalysis: false,
                threatIntelligence: false,
                customPayloads: false,
                zeroDay: false,
                socialEngineering: false,
                stealthMode: true,
                antiDetection: true,
                customUserAgent: 'Mozilla/5.0 (compatible; SecurityScanner)',
                proxyChain: [],
                rateLimitBypass: false
            }
        }
    },
    {
        id: 'ai-powered-scan',
        name: 'ИИ-сканирование',
        description: 'Продвинутое сканирование с использованием искусственного интеллекта',
        category: 'security',
        isDefault: false,
        popularity: 82,
        configuration: {
            priority: 'high',
            scanType: 'custom_scan',
            modules: [
                'neural_threat_detection', 'behavioral_analysis', 'ml_vulnerability_prediction',
                'ai_payload_generation', 'port_discovery', 'service_enumeration'
            ],
            maxConcurrentScans: 3,
            scanTimeout: 90,
            retryAttempts: 2,
            neuralAssist: true,
            aggressiveMode: true,
            aiModels: {
                anomalyDetection: true,
                behaviorAnalysis: true,
                patternRecognition: true,
                predictiveAnalysis: true,
                deepLearning: true,
                neuralNetworkEngine: 'TensorFlow',
                machineLearningModels: ['Random Forest', 'Neural Network', 'SVM'],
                trainingDatasets: ['MITRE ATT&CK', 'CVE Database', 'Custom Patterns']
            }
        }
    }
];

// Настройки по умолчанию
export const defaultScanConfiguration: Partial<ScanConfiguration> = {
    priority: 'normal',
    scanType: 'quick_scan',
    maxConcurrentScans: 5,
    scanTimeout: 30,
    retryAttempts: 3,
    rateLimiting: 100,
    neuralAssist: true,
    aggressiveMode: false,
    aiModels: {
        anomalyDetection: true,
        behaviorAnalysis: false,
        patternRecognition: true,
        predictiveAnalysis: false,
        deepLearning: false,
        neuralNetworkEngine: 'TensorFlow',
        machineLearningModels: [],
        trainingDatasets: []
    },
    advancedOptions: {
        evasionTechniques: [],
        trafficAnalysis: false,
        deepPacketInspection: false,
        behavioralAnalysis: false,
        threatIntelligence: true,
        customPayloads: false,
        zeroDay: false,
        socialEngineering: false,
        stealthMode: false,
        antiDetection: false,
        customUserAgent: '',
        proxyChain: [],
        rateLimitBypass: false
    },
    saveAsTemplate: false,
    tags: []
};

// Валидационные правила
export const validationRules = {
    scanName: {
        required: true,
        minLength: 3,
        maxLength: 100,
        pattern: /^[a-zA-Zа-яА-Я0-9\s\-_]+$/
    },
    target: {
        required: true,
        // Изменяем тип на Record<string, RegExp> и добавляем все возможные ключи
        patterns: {
            single_host: /^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$|^[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9]*\.?$/,
            ip_range: /^(?:[0-9]{1,3}\.){3}[0-9]{1,3}\-(?:[0-9]{1,3}\.){3}[0-9]{1,3}$|^(?:[0-9]{1,3}\.){3}[0-9]{1,3}\/[0-9]{1,2}$/,
            domain: /^[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9]*\.?$/,
            subnet: /^(?:[0-9]{1,3}\.){3}[0-9]{1,3}\/[0-9]{1,2}$/,
            url: /^https?:\/\/[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9]*\.?/,
            network_segment: /^([0-9]{1,3}\.){3}[0-9]{1,3}\/[0-9]{1,2}$|^[a-zA-Z0-9\-\.]+$/,
            asset_group: /^[a-zA-Z0-9\s\-_]+$/
        } as Record<string, RegExp>
    },
    customPorts: {
        required: false,
        pattern: /^[0-9,\-\s]+$/,
        maxLength: 1000
    },
    maxConcurrentScans: {
        min: 1,
        max: 50
    },
    scanTimeout: {
        min: 5,
        max: 1440 // 24 часа
    },
    retryAttempts: {
        min: 0,
        max: 10
    },
    rateLimiting: {
        min: 1,
        max: 10000
    }
};

// Вспомогательные функции
export const getModulesByCategory = (category: string, modules: ScanModule[] = scanModulesData): ScanModule[] => {
    return modules.filter(module => module.category === category);
};

export const getEnabledModules = (modules: ScanModule[]): ScanModule[] => {
    return modules.filter(module => module.enabled);
};

export const calculateTotalEstimatedTime = (modules: ScanModule[]): string => {
    const enabledModules = getEnabledModules(modules);
    if (enabledModules.length === 0) return '0 мин';

    const totalMinutes = enabledModules.reduce((total, module) => {
        const timeRange = module.estimatedTime.split('-');
        const maxTime = parseInt(timeRange[timeRange.length - 1]);
        return total + maxTime;
    }, 0);

    if (totalMinutes >= 60) {
        const hours = Math.floor(totalMinutes / 60);
        const minutes = totalMinutes % 60;
        return `${hours}ч ${minutes}мин`;
    }
    return `${totalMinutes} мин`;
};

export const calculateRiskScore = (modules: ScanModule[]): number => {
    const enabledModules = getEnabledModules(modules);
    if (enabledModules.length === 0) return 0;

    const riskWeights = {
        'safe': 1,
        'moderate': 2,
        'aggressive': 3,
        'destructive': 4
    };

    const totalRisk = enabledModules.reduce((sum, module) => {
        return sum + (riskWeights[module.riskLevel || 'safe'] || 1);
    }, 0);

    return Math.min(100, (totalRisk / enabledModules.length) * 25);
};

export const validateScanConfiguration = (config: Partial<ScanConfiguration>): { valid: boolean; errors: { [key: string]: string } } => {
    const errors: { [key: string]: string } = {};

    // Валидация названия
    if (!config.name?.trim()) {
        errors.scanName = 'Введите название сканирования';
    } else if (config.name.length < validationRules.scanName.minLength) {
        errors.scanName = `Название должно содержать минимум ${validationRules.scanName.minLength} символа`;
    } else if (config.name.length > validationRules.scanName.maxLength) {
        errors.scanName = `Название не должно превышать ${validationRules.scanName.maxLength} символов`;
    } else if (!validationRules.scanName.pattern.test(config.name)) {
        errors.scanName = 'Название содержит недопустимые символы';
    }

    // Валидация цели
    if (!config.target?.trim()) {
        errors.target = 'Введите целевой адрес или диапазон';
    } else if (config.targetType && validationRules.target.patterns[config.targetType]) {
        if (!validationRules.target.patterns[config.targetType].test(config.target)) {
            errors.target = `Неверный формат для типа цели "${config.targetType}"`;
        }
    }

    // Валидация запланированного времени
    if (config.schedule?.type === 'scheduled' && !config.schedule.datetime) {
        errors.scheduledTime = 'Выберите время для запланированного сканирования';
    }

    // Валидация пользовательских портов
    if (config.scanType === 'custom_scan' && !config.customPorts?.trim()) {
        errors.customPorts = 'Введите пользовательские порты для сканирования';
    } else if (config.customPorts && !validationRules.customPorts.pattern.test(config.customPorts)) {
        errors.customPorts = 'Неверный формат портов. Используйте запятые и дефисы: 80,443,8080-8090';
    }

    // Валидация модулей
    if (!config.modules || config.modules.length === 0) {
        errors.modules = 'Выберите хотя бы один модуль сканирования';
    }

    // Валидация числовых параметров
    if (config.maxConcurrentScans !== undefined) {
        if (config.maxConcurrentScans < validationRules.maxConcurrentScans.min || config.maxConcurrentScans > validationRules.maxConcurrentScans.max) {
            errors.maxConcurrentScans = `Значение должно быть от ${validationRules.maxConcurrentScans.min} до ${validationRules.maxConcurrentScans.max}`;
        }
    }

    if (config.scanTimeout !== undefined) {
        if (config.scanTimeout < validationRules.scanTimeout.min || config.scanTimeout > validationRules.scanTimeout.max) {
            errors.scanTimeout = `Значение должно быть от ${validationRules.scanTimeout.min} до ${validationRules.scanTimeout.max} минут`;
        }
    }

    return {
        valid: Object.keys(errors).length === 0,
        errors
    };
};

export const checkModuleDependencies = (selectedModules: string[], allModules: ScanModule[] = scanModulesData): { valid: boolean; missingDependencies: string[] } => {
    const missingDependencies: string[] = [];

    selectedModules.forEach(moduleId => {
        const module = allModules.find(m => m.id === moduleId);
        if (module?.dependencies) {
            module.dependencies.forEach(depId => {
                if (!selectedModules.includes(depId)) {
                    const depModule = allModules.find(m => m.id === depId);
                    if (depModule && !missingDependencies.includes(depModule.name)) {
                        missingDependencies.push(depModule.name);
                    }
                }
            });
        }
    });

    return {
        valid: missingDependencies.length === 0,
        missingDependencies
    };
};

export const checkModuleConflicts = (selectedModules: string[], allModules: ScanModule[] = scanModulesData): { valid: boolean; conflicts: string[] } => {
    const conflicts: string[] = [];

    selectedModules.forEach(moduleId => {
        const module = allModules.find(m => m.id === moduleId);
        if (module?.conflictsWith) {
            module.conflictsWith.forEach(conflictId => {
                if (selectedModules.includes(conflictId)) {
                    const conflictModule = allModules.find(m => m.id === conflictId);
                    if (conflictModule && !conflicts.includes(`${module.name} ↔ ${conflictModule.name}`)) {
                        conflicts.push(`${module.name} ↔ ${conflictModule.name}`);
                    }
                }
            });
        }
    });

    return {
        valid: conflicts.length === 0,
        conflicts
    };
};

// Экспорт статистики
export const moduleStatistics = {
    total: scanModulesData.length,
    byCategory: {
        basic: getModulesByCategory('basic').length,
        advanced: getModulesByCategory('advanced').length,
        ai: getModulesByCategory('ai').length,
        specialized: getModulesByCategory('specialized').length,
        experimental: getModulesByCategory('experimental').length
    },
    requireCredentials: scanModulesData.filter(m => m.requiresCredentials).length,
    byRiskLevel: {
        safe: scanModulesData.filter(m => m.riskLevel === 'safe').length,
        moderate: scanModulesData.filter(m => m.riskLevel === 'moderate').length,
        aggressive: scanModulesData.filter(m => m.riskLevel === 'aggressive').length,
        destructive: scanModulesData.filter(m => m.riskLevel === 'destructive').length
    }
};
