"use client";

import React, { useState, useMemo } from 'react';
import { useTranslations } from 'next-intl';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Calendar } from '@/components/ui/calendar';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import {
    Eye,
    Download,
    Trash2,
    Search,
    Filter,
    RefreshCw,
    Calendar as CalendarIcon,
    AlertTriangle,
    Shield,
    CheckCircle,
    XCircle,
    Clock,
    Target,
    FileDown
} from 'lucide-react';
import { format } from 'date-fns';
import { ru } from 'date-fns/locale';
import { scanHistoryData, type ScanHistoryItem } from './data';

const ScanHistoryPage = () => {
    const t = useTranslations('VulnerabilityScanner');
    const tCommon = useTranslations('Common');

    // Состояния для фильтрации и поиска
    const [searchTerm, setSearchTerm] = useState('');
    const [statusFilter, setStatusFilter] = useState('all');
    const [typeFilter, setTypeFilter] = useState('all');
    const [dateRange, setDateRange] = useState<{ from?: Date; to?: Date }>({});
    const [selectedScans, setSelectedScans] = useState<string[]>([]);
    const [sortField, setSortField] = useState<'name' | 'startTime' | 'totalVulnerabilities'>('startTime');
    const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');

    // Фильтрация и сортировка данных
    const filteredAndSortedScans = useMemo(() => {
        let filtered = scanHistoryData.filter(scan => {
            const matchesSearch = scan.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                scan.target.toLowerCase().includes(searchTerm.toLowerCase()) ||
                scan.user.toLowerCase().includes(searchTerm.toLowerCase());

            const matchesStatus = statusFilter === 'all' || scan.status === statusFilter;
            const matchesType = typeFilter === 'all' || scan.scanType === typeFilter;

            const scanDate = new Date(scan.startTime);
            const matchesDateRange = (!dateRange.from || scanDate >= dateRange.from) &&
                (!dateRange.to || scanDate <= dateRange.to);

            return matchesSearch && matchesStatus && matchesType && matchesDateRange;
        });

        // Сортировка
        filtered.sort((a, b) => {
            let aValue: any, bValue: any;

            switch (sortField) {
                case 'name':
                    aValue = a.name;
                    bValue = b.name;
                    break;
                case 'startTime':
                    aValue = new Date(a.startTime);
                    bValue = new Date(b.startTime);
                    break;
                case 'totalVulnerabilities':
                    aValue = a.totalVulnerabilities;
                    bValue = b.totalVulnerabilities;
                    break;
                default:
                    return 0;
            }

            if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;
            if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;
            return 0;
        });

        return filtered;
    }, [searchTerm, statusFilter, typeFilter, dateRange, sortField, sortDirection]);

    // Функции для работы с данными
    const getStatusIcon = (status: string) => {
        switch (status) {
            case 'completed':
                return <CheckCircle className="w-4 h-4 text-green-600" />;
            case 'failed':
                return <XCircle className="w-4 h-4 text-red-600" />;
            case 'cancelled':
                return <Clock className="w-4 h-4 text-yellow-600" />;
            case 'error':
                return <AlertTriangle className="w-4 h-4 text-red-600" />;
            default:
                return <Clock className="w-4 h-4 text-gray-600" />;
        }
    };

    const getStatusBadgeColor = (status: string) => {
        switch (status) {
            case 'completed':
                return 'bg-green-600 text-white';
            case 'failed':
                return 'bg-red-600 text-white';
            case 'cancelled':
                return 'bg-yellow-500 text-black';
            case 'error':
                return 'bg-red-600 text-white';
            default:
                return 'bg-gray-500 text-white';
        }
    };

    const getSeverityBadgeColor = (severity: string) => {
        switch (severity) {
            case 'critical':
                return 'bg-red-700 text-white';
            case 'high':
                return 'bg-orange-600 text-white';
            case 'medium':
                return 'bg-yellow-500 text-black';
            case 'low':
                return 'bg-green-600 text-white';
            default:
                return 'bg-gray-500 text-white';
        }
    };

    const handleDeleteScan = (scanId: string) => {
        console.log('Deleting scan:', scanId);
    };

    const handleBulkDelete = () => {
        console.log('Bulk deleting scans:', selectedScans);
        setSelectedScans([]);
    };

    const handleExportResults = (scanId: string) => {
        console.log('Exporting scan results:', scanId);
    };

    const toggleScanSelection = (scanId: string) => {
        setSelectedScans(prev =>
            prev.includes(scanId)
                ? prev.filter(id => id !== scanId)
                : [...prev, scanId]
        );
    };

    const toggleSelectAll = () => {
        setSelectedScans(prev =>
            prev.length === filteredAndSortedScans.length
                ? []
                : filteredAndSortedScans.map(scan => scan.id)
        );
    };

    // Статистика
    const statistics = useMemo(() => {
        const total = filteredAndSortedScans.length;
        const completed = filteredAndSortedScans.filter(s => s.status === 'completed').length;
        const failed = filteredAndSortedScans.filter(s => s.status === 'failed').length;
        const totalVulns = filteredAndSortedScans.reduce((sum, scan) => sum + scan.totalVulnerabilities, 0);
        const criticalVulns = filteredAndSortedScans.reduce((sum, scan) => sum + scan.vulnerabilities.critical, 0);

        return { total, completed, failed, totalVulns, criticalVulns };
    }, [filteredAndSortedScans]);

    return (
        <div className="max-w-7xl mx-auto p-6 space-y-6">
            {/* Заголовок и статистика */}
            <div className="flex items-center justify-between">
                <div>
                    <h1 className="text-3xl font-bold tracking-tight">{t('scan_history')}</h1>
                    <p className="text-muted-foreground mt-2">
                        Полная история проведенных сканирований безопасности
                    </p>
                </div>
                <div className="flex items-center gap-2">
                    <Button variant="outline" size="sm">
                        <RefreshCw className="w-4 h-4 mr-2" />
                        {tCommon('refresh')}
                    </Button>
                    {selectedScans.length > 0 && (
                        <Button
                            variant="outline"
                            size="sm"
                            onClick={handleBulkDelete}
                            className="text-red-600 border-red-300 hover:bg-red-50"
                        >
                            <Trash2 className="w-4 h-4 mr-2" />
                            Удалить ({selectedScans.length})
                        </Button>
                    )}
                </div>
            </div>

            {/* Статистические карточки */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
                <Card>
                    <CardContent className="p-4">
                        <div className="flex items-center justify-between">
                            <div>
                                <p className="text-sm text-muted-foreground">Всего сканирований</p>
                                <p className="text-2xl font-bold">{statistics.total}</p>
                            </div>
                            <Target className="w-8 h-8 text-muted-foreground" />
                        </div>
                    </CardContent>
                </Card>

                <Card>
                    <CardContent className="p-4">
                        <div className="flex items-center justify-between">
                            <div>
                                <p className="text-sm text-muted-foreground">Завершено</p>
                                <p className="text-2xl font-bold text-green-600">{statistics.completed}</p>
                            </div>
                            <CheckCircle className="w-8 h-8 text-green-600" />
                        </div>
                    </CardContent>
                </Card>

                <Card>
                    <CardContent className="p-4">
                        <div className="flex items-center justify-between">
                            <div>
                                <p className="text-sm text-muted-foreground">Неудачно</p>
                                <p className="text-2xl font-bold text-red-600">{statistics.failed}</p>
                            </div>
                            <XCircle className="w-8 h-8 text-red-600" />
                        </div>
                    </CardContent>
                </Card>

                <Card>
                    <CardContent className="p-4">
                        <div className="flex items-center justify-between">
                            <div>
                                <p className="text-sm text-muted-foreground">Всего уязвимостей</p>
                                <p className="text-2xl font-bold">{statistics.totalVulns}</p>
                            </div>
                            <Shield className="w-8 h-8 text-muted-foreground" />
                        </div>
                    </CardContent>
                </Card>

                <Card>
                    <CardContent className="p-4">
                        <div className="flex items-center justify-between">
                            <div>
                                <p className="text-sm text-muted-foreground">Критических</p>
                                <p className="text-2xl font-bold text-red-700">{statistics.criticalVulns}</p>
                            </div>
                            <AlertTriangle className="w-8 h-8 text-red-700" />
                        </div>
                    </CardContent>
                </Card>
            </div>

            {/* Фильтры и поиск */}
            <Card>
                <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                        <Filter className="w-5 h-5" />
                        Фильтры и поиск
                    </CardTitle>
                </CardHeader>
                <CardContent>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                        <div className="space-y-2">
                            <label className="text-sm font-medium">{tCommon('search')}</label>
                            <div className="relative">
                                <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                                <Input
                                    placeholder="Поиск по названию, цели, пользователю..."
                                    value={searchTerm}
                                    onChange={(e) => setSearchTerm(e.target.value)}
                                    className="pl-10"
                                />
                            </div>
                        </div>

                        <div className="space-y-2">
                            <label className="text-sm font-medium">{tCommon('status')}</label>
                            <Select value={statusFilter} onValueChange={setStatusFilter}>
                                <SelectTrigger>
                                    <SelectValue />
                                </SelectTrigger>
                                <SelectContent>
                                    <SelectItem value="all">Все статусы</SelectItem>
                                    <SelectItem value="completed">{t('scan_status.completed')}</SelectItem>
                                    <SelectItem value="failed">{t('scan_status.failed')}</SelectItem>
                                    <SelectItem value="cancelled">{t('scan_status.cancelled')}</SelectItem>
                                    <SelectItem value="error">{t('scan_status.error')}</SelectItem>
                                </SelectContent>
                            </Select>
                        </div>

                        <div className="space-y-2">
                            <label className="text-sm font-medium">Тип сканирования</label>
                            <Select value={typeFilter} onValueChange={setTypeFilter}>
                                <SelectTrigger>
                                    <SelectValue />
                                </SelectTrigger>
                                <SelectContent>
                                    <SelectItem value="all">Все типы</SelectItem>
                                    <SelectItem value="quick_scan">{t('scan_modes.quick_scan')}</SelectItem>
                                    <SelectItem value="full_scan">{t('scan_modes.full_scan')}</SelectItem>
                                    <SelectItem value="stealth_scan">{t('scan_modes.stealth_scan')}</SelectItem>
                                    <SelectItem value="web_application_scan">{t('scan_types.web_application_scan')}</SelectItem>
                                    <SelectItem value="database_scan">{t('scan_types.database_scan')}</SelectItem>
                                </SelectContent>
                            </Select>
                        </div>

                        <div className="space-y-2">
                            <label className="text-sm font-medium">Период</label>
                            <Popover>
                                <PopoverTrigger asChild>
                                    <Button variant="outline" className="w-full justify-start text-left">
                                        <CalendarIcon className="mr-2 h-4 w-4" />
                                        {dateRange.from ? (
                                            dateRange.to ? (
                                                `${format(dateRange.from, 'dd.MM.yy', { locale: ru })} - ${format(dateRange.to, 'dd.MM.yy', { locale: ru })}`
                                            ) : (
                                                format(dateRange.from, 'dd.MM.yy', { locale: ru })
                                            )
                                        ) : (
                                            'Выберите период'
                                        )}
                                    </Button>
                                </PopoverTrigger>
                                <PopoverContent className="w-auto p-0" align="start">
                                    <Calendar
                                        initialFocus
                                        mode="range"
                                        defaultMonth={dateRange.from}
                                        selected={dateRange.from && dateRange.to ? { from: dateRange.from, to: dateRange.to } : undefined}
                                        onSelect={(range) => {
                                            if (range) {
                                                setDateRange({ from: range.from, to: range.to });
                                            } else {
                                                setDateRange({});
                                            }
                                        }}
                                        numberOfMonths={2}
                                    />
                                </PopoverContent>
                            </Popover>
                        </div>
                    </div>

                    <div className="flex items-center justify-between mt-4">
                        <p className="text-sm text-muted-foreground">
                            Найдено сканирований: {filteredAndSortedScans.length} из {scanHistoryData.length}
                        </p>
                        <div className="flex items-center gap-2">
                            <Button
                                variant="outline"
                                size="sm"
                                onClick={() => {
                                    setSearchTerm('');
                                    setStatusFilter('all');
                                    setTypeFilter('all');
                                    setDateRange({});
                                }}
                            >
                                Сбросить фильтры
                            </Button>
                        </div>
                    </div>
                </CardContent>
            </Card>

            {/* Таблица истории сканирований */}
            <Card>
                <CardHeader>
                    <CardTitle className="flex items-center justify-between">
                        <span>История сканирований</span>
                        <div className="flex items-center gap-2">
                            <Select value={`${sortField}-${sortDirection}`} onValueChange={(value) => {
                                const [field, direction] = value.split('-');
                                setSortField(field as any);
                                setSortDirection(direction as any);
                            }}>
                                <SelectTrigger className="w-48">
                                    <SelectValue />
                                </SelectTrigger>
                                <SelectContent>
                                    <SelectItem value="startTime-desc">Дата (новые первые)</SelectItem>
                                    <SelectItem value="startTime-asc">Дата (старые первые)</SelectItem>
                                    <SelectItem value="name-asc">Название (А-Я)</SelectItem>
                                    <SelectItem value="name-desc">Название (Я-А)</SelectItem>
                                    <SelectItem value="totalVulnerabilities-desc">Уязвимости (больше)</SelectItem>
                                    <SelectItem value="totalVulnerabilities-asc">Уязвимости (меньше)</SelectItem>
                                </SelectContent>
                            </Select>
                        </div>
                    </CardTitle>
                </CardHeader>
                <CardContent>
                    <ScrollArea className="h-[600px]">
                        <Table>
                            <TableHeader>
                                <TableRow>
                                    <TableHead className="w-12">
                                        <input
                                            type="checkbox"
                                            checked={selectedScans.length === filteredAndSortedScans.length && filteredAndSortedScans.length > 0}
                                            onChange={toggleSelectAll}
                                            className="rounded"
                                        />
                                    </TableHead>
                                    <TableHead>Сканирование</TableHead>
                                    <TableHead>Цель</TableHead>
                                    <TableHead>Статус</TableHead>
                                    <TableHead>Длительность</TableHead>
                                    <TableHead className="text-center">Критич.</TableHead>
                                    <TableHead className="text-center">Высок.</TableHead>
                                    <TableHead className="text-center">Средн.</TableHead>
                                    <TableHead className="text-center">Низк.</TableHead>
                                    <TableHead className="text-center">Всего</TableHead>
                                    <TableHead>Размер отчета</TableHead>
                                    <TableHead>Пользователь</TableHead>
                                    <TableHead className="text-right">Действия</TableHead>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                {filteredAndSortedScans.map((scan) => (
                                    <TableRow key={scan.id} className="hover:bg-muted/50">
                                        <TableCell>
                                            <input
                                                type="checkbox"
                                                checked={selectedScans.includes(scan.id)}
                                                onChange={() => toggleScanSelection(scan.id)}
                                                className="rounded"
                                            />
                                        </TableCell>
                                        <TableCell>
                                            <div className="space-y-1">
                                                <p className="font-medium">{scan.name}</p>
                                                <div className="flex items-center gap-2">
                                                    <Badge className={`text-xs ${getSeverityBadgeColor('medium')}`}>
                                                        {t(`scan_types.${scan.scanType}`)}
                                                    </Badge>
                                                    <span className="text-xs text-muted-foreground">
                                                        {format(new Date(scan.startTime), 'dd.MM.yy HH:mm', { locale: ru })}
                                                    </span>
                                                </div>
                                            </div>
                                        </TableCell>
                                        <TableCell>
                                            <div className="space-y-1">
                                                <p className="font-mono text-sm">{scan.target}</p>
                                                <Badge className={`text-xs ${getSeverityBadgeColor('low')}`}>
                                                    {t(`target_types.${scan.targetType}`)}
                                                </Badge>
                                            </div>
                                        </TableCell>
                                        <TableCell>
                                            <div className="flex items-center gap-2">
                                                {getStatusIcon(scan.status)}
                                                <Badge className={`text-xs ${getStatusBadgeColor(scan.status)}`}>
                                                    {t(`scan_status.${scan.status}`)}
                                                </Badge>
                                            </div>
                                        </TableCell>
                                        <TableCell>
                                            <span className="text-sm">{scan.duration}</span>
                                        </TableCell>
                                        <TableCell className="text-center">
                                            {scan.vulnerabilities.critical > 0 ? (
                                                <Badge className={getSeverityBadgeColor('critical')}>
                                                    {scan.vulnerabilities.critical}
                                                </Badge>
                                            ) : (
                                                <span className="text-muted-foreground">0</span>
                                            )}
                                        </TableCell>
                                        <TableCell className="text-center">
                                            {scan.vulnerabilities.high > 0 ? (
                                                <Badge className={getSeverityBadgeColor('high')}>
                                                    {scan.vulnerabilities.high}
                                                </Badge>
                                            ) : (
                                                <span className="text-muted-foreground">0</span>
                                            )}
                                        </TableCell>
                                        <TableCell className="text-center">
                                            {scan.vulnerabilities.medium > 0 ? (
                                                <Badge className={getSeverityBadgeColor('medium')}>
                                                    {scan.vulnerabilities.medium}
                                                </Badge>
                                            ) : (
                                                <span className="text-muted-foreground">0</span>
                                            )}
                                        </TableCell>
                                        <TableCell className="text-center">
                                            {scan.vulnerabilities.low > 0 ? (
                                                <Badge className={getSeverityBadgeColor('low')}>
                                                    {scan.vulnerabilities.low}
                                                </Badge>
                                            ) : (
                                                <span className="text-muted-foreground">0</span>
                                            )}
                                        </TableCell>
                                        <TableCell className="text-center">
                                            <Badge className={`font-semibold ${getSeverityBadgeColor('medium')}`}>
                                                {scan.totalVulnerabilities}
                                            </Badge>
                                        </TableCell>
                                        <TableCell>
                                            <span className="text-sm text-muted-foreground">{scan.reportSize}</span>
                                        </TableCell>
                                        <TableCell>
                                            <span className="text-sm">{scan.user}</span>
                                        </TableCell>
                                        <TableCell>
                                            <div className="flex items-center justify-end gap-1">
                                                <Button
                                                    variant="ghost"
                                                    size="sm"
                                                    onClick={() => window.open(scan.reportUrl, '_blank')}
                                                    title="Просмотреть отчет"
                                                >
                                                    <Eye className="w-4 h-4" />
                                                </Button>
                                                <Button
                                                    variant="ghost"
                                                    size="sm"
                                                    onClick={() => handleExportResults(scan.id)}
                                                    title="Скачать отчет"
                                                >
                                                    <FileDown className="w-4 h-4" />
                                                </Button>
                                                <Dialog>
                                                    <DialogTrigger asChild>
                                                        <Button variant="ghost" size="sm" title="Удалить сканирование">
                                                            <Trash2 className="w-4 h-4 text-red-600" />
                                                        </Button>
                                                    </DialogTrigger>
                                                    <DialogContent>
                                                        <DialogHeader>
                                                            <DialogTitle>Подтвердите удаление</DialogTitle>
                                                        </DialogHeader>
                                                        <div className="space-y-4">
                                                            <p>Вы действительно хотите удалить сканирование "{scan.name}"?</p>
                                                            <p className="text-sm text-muted-foreground">
                                                                Это действие нельзя отменить. Отчет и все связанные данные будут удалены навсегда.
                                                            </p>
                                                            <div className="flex justify-end gap-2">
                                                                <Button variant="outline">Отмена</Button>
                                                                <Button
                                                                    variant="outline"
                                                                    onClick={() => handleDeleteScan(scan.id)}
                                                                    className="text-red-600 border-red-300 hover:bg-red-50"
                                                                >
                                                                    Удалить
                                                                </Button>
                                                            </div>
                                                        </div>
                                                    </DialogContent>
                                                </Dialog>
                                            </div>
                                        </TableCell>
                                    </TableRow>
                                ))}
                            </TableBody>
                        </Table>
                    </ScrollArea>

                    {filteredAndSortedScans.length === 0 && (
                        <div className="text-center py-12">
                            <Target className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
                            <h3 className="text-lg font-semibold mb-2">Сканирования не найдены</h3>
                            <p className="text-muted-foreground">
                                Попробуйте изменить фильтры или создать новое сканирование
                            </p>
                        </div>
                    )}
                </CardContent>
            </Card>
        </div>
    );
};

export default ScanHistoryPage;
