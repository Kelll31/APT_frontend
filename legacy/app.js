/**
 * IP Roast Enterprise 4.0 - Fixed Main Application
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —è–¥—Ä–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö –æ—à–∏–±–æ–∫
 * –í–µ—Ä—Å–∏—è: Enterprise 4.0 (Fixed)
 */

// –ò–º–ø–æ—Ä—Ç—ã
import {
    APP_INFO,
    THEMES,
    NOTIFICATION_TYPES,
    DEFAULT_UI_SETTINGS,
    ANIMATION_DURATION,
    STORAGE_KEYS,
    UI_STATES,
    SUCCESS_MESSAGES,
    ERROR_MESSAGES,
    WEBSOCKET_EVENTS,
    CONNECTION_STATUS,
    Z_INDEX
} from '../shared/utils/constants.js';

import {
    EventEmitter,
    logger,
    Storage,
    formatDate,
    timeAgo,
    debounce,
    generateUUID,
    addClass,
    removeClass,
    toggleClass,
    delay,
    AppError,
    createError,
    handleError
} from '../shared/utils/helpers.js';

import { IPRoastAPI } from '../shared/utils/api.js';

// –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import { NavigationComponent } from '../shared/components/navigation.js';
import { Modal, ConfirmModal } from '../shared/components/modals.js';
import { Button, Spinner } from '../shared/components/common.js';
import { SidebarComponent } from './shared/components/sidebar.js';

// –ò–º–ø–æ—Ä—Ç mocks –¥–∞–Ω–Ω—ã—Ö
import { DashboardDataLoader } from './mocks/dashboard-data-loader.js';

// –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –º–æ–¥—É–ª–µ–π
let DashboardController = null;

/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å Enterprise –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è IP Roast
 */
class IPRoastEnterpriseApp extends EventEmitter {
    constructor() {
        super();

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        this.version = APP_INFO.VERSION;
        this.buildDate = APP_INFO.BUILD_DATE;
        this.edition = 'Enterprise';

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.state = {
            isInitialized: false,
            currentTab: 'dashboard',
            isLoading: true,
            connectionStatus: CONNECTION_STATUS.DISCONNECTED,

            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user: {
                name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                role: 'Security Analyst',
                permissions: ['admin', 'scan', 'report', 'attack', 'settings'],
                avatar: null
            },

            // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            lastActivity: new Date(),

            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notifications: [],
            unreadCount: 0,

            // –ú–æ–¥—É–ª–∏
            loadedModules: new Set(['dashboard']),
            moduleErrors: new Map()
        };

        // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –º–æ–¥—É–ª–µ–π
        this.modules = new Map();

        // –¢–∞–π–º–µ—Ä—ã –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        this.intervals = new Map();
        this.timeouts = new Map();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.settings = {
            ...DEFAULT_UI_SETTINGS,
            ...Storage.get(STORAGE_KEYS.SETTINGS, {})
        };

        // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã UI
        this.components = {
            navigation: null,
            modals: new Map(),
            notifications: null,
            sidebar: null
        };

        // WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        this.websocket = null;
        this.websocketReconnectAttempts = 0;

        // API –∫–ª–∏–µ–Ω—Ç
        this.api = IPRoastAPI;

        // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        this.hotkeys = new Map([
            ['ctrl+shift+r', this.refreshCurrentModule.bind(this)],
            ['ctrl+/', this.showHelpDialog.bind(this)],
            ['escape', this.closeModals.bind(this)],
            ['ctrl+alt+n', this.showNotificationCenter.bind(this)],
            ['f5', this.refreshCurrentModule.bind(this)]
        ]);

        // –ü—Ä–∏–≤—è–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ bind
        this.handleResize = debounce(this.handleResize.bind(this), 250);
        this.handleKeydown = this.handleKeydown.bind(this);
        this.handleError = this.handleError.bind(this);
        this.handleCriticalError = this.handleCriticalError.bind(this);

        logger.info(`üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IP Roast ${this.edition} ${this.version}`);
        this.init();
    }

    /**
     * –ì–ª–∞–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    async init() {
        try {
            this.updateLoadingProgress(5, '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —è–¥—Ä–∞...');
            await this.initializeCore();

            this.updateLoadingProgress(15, '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');
            await this.setupUI();

            this.updateLoadingProgress(25, '–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π...');
            await this.initializeModules();

            this.updateLoadingProgress(60, '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
            await this.applyUserSettings();

            this.updateLoadingProgress(80, '–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...');
            await this.startServices();

            this.updateLoadingProgress(95, '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏...');
            await this.finalizeBoot();

            this.updateLoadingProgress(100, '–ì–æ—Ç–æ–≤–æ!');

            // –°–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
            setTimeout(() => {
                this.hideLoadingScreen();
                this.state.isInitialized = true;
                this.showNotification(SUCCESS_MESSAGES.APP_INITIALIZED, NOTIFICATION_TYPES.SUCCESS);
                this.emit('initialized');
                logger.info('‚úÖ IP Roast Enterprise –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }, 800);

        } catch (error) {
            logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.handleCriticalError(error);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
     */
    async initializeCore() {
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            this.initializeNotificationSystem();

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
            this.setupErrorHandlers();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å–æ–±—ã—Ç–∏–π
            this.setupEventSystem();

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
            this.setupHotkeys();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
            this.initializeWebSocket();

            logger.info('üîß –Ø–¥—Ä–æ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        } catch (error) {
            throw createError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —è–¥—Ä–∞: ' + error.message, 500, 'CORE_INIT_ERROR');
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    async setupUI() {
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è sidebar 
            this.setupSidebar();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            this.setupNavigation();

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ header —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            this.setupHeader();

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∏—Å–∫–∞
            this.setupSearch();

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
            this.setupModals();

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ drag and drop
            this.setupDragAndDrop();

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
            this.setupContextMenu();

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            this.setupNotificationUI();

            logger.info('üé® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        } catch (error) {
            throw createError('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UI: ' + error.message, 500, 'UI_SETUP_ERROR');
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ sidebar –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    setupSidebar() {
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è sidebar –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            this.components.sidebar = new SidebarComponent({
                container: '.sidebar',
                persistState: true,
                autoCollapse: true,
                mobileBreakpoint: 1024
            });

            // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–æ–±—ã—Ç–∏—è–º sidebar
            this.components.sidebar.on('navigate', (data) => {
                // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤ sidebar
                this.switchTab(data.tab);
                logger.info(`–ù–∞–≤–∏–≥–∞—Ü–∏—è —á–µ—Ä–µ–∑ sidebar –∫: ${data.tab}`);
            });

            this.components.sidebar.on('collapsed', () => {
                logger.debug('Sidebar —Å–≤–µ—Ä–Ω—É—Ç');
                this.emit('sidebarCollapsed');
            });

            this.components.sidebar.on('expanded', () => {
                logger.debug('Sidebar —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç');
                this.emit('sidebarExpanded');
            });

            this.components.sidebar.on('error', (error) => {
                logger.error('–û—à–∏–±–∫–∞ sidebar:', error);
                this.handleError(new Error(`Sidebar error: ${error.message}`));
            });

            logger.debug('‚úÖ Sidebar –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ sidebar:', error);
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ sidebar
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
     */
    async initializeModules() {
        try {
            logger.info('üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Dashboard...');

            // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Dashboard
            try {
                // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç Dashboard –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
                const dashboardController = new DashboardController({
                    container: '#dashboard-container .tab-content-inner',
                    autoRefresh: this.settings.autoRefresh,
                    refreshInterval: this.settings.refreshInterval,
                    enableWebSocket: this.settings.enableWebSocket
                });

                this.modules.set('dashboard', dashboardController);
                this.state.loadedModules.add('dashboard');

                logger.info('üì• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
                this.dashboardDataLoader = new DashboardDataLoader();

                if (DashboardCtrl) {
                    const dashboardController = new DashboardCtrl({
                        container: '#dashboard-container .tab-content-inner',
                        autoRefresh: this.settings.autoRefresh,
                        refreshInterval: this.settings.refreshInterval,
                        enableWebSocket: this.settings.enableWebSocket
                    });
                    this.modules.set('dashboard', dashboardController);
                }
            } catch (error) {
                logger.warn('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Dashboard –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞:', error.message);
            }

            this.state.loadedModules.add('dashboard');

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
            await this.prepareModuleStubs();

            logger.info('üì¶ –ú–æ–¥—É–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
        } catch (error) {
            throw createError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π: ' + error.message, 500, 'MODULE_INIT_ERROR');
        }
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≥–ª—É—à–µ–∫ –º–æ–¥—É–ª–µ–π
     */
    async prepareModuleStubs() {
        const modules = ['scanner', 'attack-constructor', 'network-topology', 'reports', 'settings'];
        modules.forEach(id => {
            const container = document.querySelector(`#${id}-container .tab-content-inner`);
            if (container) {
                container.innerHTML = `
                    <div class="module-placeholder">
                        <div class="placeholder-content">
                            <i class="fas fa-${this.getModuleIcon(id)} placeholder-icon"></i>
                            <h3>${this.getModuleTitle(id)}</h3>
                            <p>–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è</p>
                            <button class="btn btn--primary module-load-btn" data-module="${id}">
                                <i class="fas fa-play"></i>
                                –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å
                            </button>
                        </div>
                    </div>
                `;

                const button = container.querySelector('button');
                if (button) {
                    button.addEventListener('click', () => {
                        this.loadStaticModule(id);
                    });
                }
            }
        });
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–¥—É–ª—è –∏–∑ pages/
     */
    async loadStaticModule(moduleId, buttonElement = null) {
        logger.info(`üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–¥—É–ª—è: ${moduleId}`);

        const container = document.querySelector(`#${moduleId}-container .tab-content-inner`);
        if (!container) {
            logger.error(`–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–æ–¥—É–ª—è ${moduleId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return;
        }

        try {
            // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            if (buttonElement) {
                buttonElement.disabled = true;
                buttonElement.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –ó–∞–≥—Ä—É–∑–∫–∞...';
            }

            container.innerHTML = `
                <div class="module-loading">
                    <div class="loading-spinner"></div>
                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è ${this.getModuleTitle(moduleId)}...</p>
                </div>
            `;

            // –ó–∞–≥—Ä—É–∂–∞–µ–º HTML –∏–∑ –ø–∞–ø–∫–∏ pages/
            const response = await fetch(`/pages/${moduleId}.html`);

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const html = await response.text();

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
            await delay(300);

            // –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            container.innerHTML = html;

            // –û—Ç–º–µ—á–∞–µ–º –º–æ–¥—É–ª—å –∫–∞–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π
            this.state.loadedModules.add(moduleId);

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–æ–¥—É–ª—è
            this.initializeModuleFunctionality(moduleId);

            // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            this.showNotification(
                `–ú–æ–¥—É–ª—å "${this.getModuleTitle(moduleId)}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω`,
                NOTIFICATION_TYPES.SUCCESS
            );

            logger.info(`‚úÖ –ú–æ–¥—É–ª—å ${moduleId} –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ pages/${moduleId}.html`);

        } catch (error) {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è ${moduleId}:`, error);

            // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
            container.innerHTML = `
                <div class="module-error">
                    <i class="fas fa-exclamation-triangle"></i>
                    <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è</h3>
                    <p>${error.message}</p>
                    <button class="btn btn--primary retry-btn" onclick="window.ipRoastApp.loadStaticModule('${moduleId}')">
                        <i class="fas fa-redo"></i>
                        –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                    </button>
                </div>
            `;

            // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            this.showNotification(
                `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è: ${error.message}`,
                NOTIFICATION_TYPES.ERROR
            );

        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            if (buttonElement) {
                buttonElement.disabled = false;
                buttonElement.innerHTML = '<i class="fas fa-play"></i> –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å';
            }
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è
     */
    initializeModuleFunctionality(moduleId) {
        // –î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è
        switch (moduleId) {
            case 'scanner':
                this.initializeScannerModule();
                break;
            case 'attack-constructor':
                this.initializeAttackConstructorModule();
                break;
            case 'network-topology':
                this.initializeTopologyModule();
                break;
            case 'reports':
                this.initializeReportsModule();
                break;
            case 'settings':
                this.initializeSettingsModule();
                break;
        }
    }

    /**
     * –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π
     */
    initializeScannerModule() {
        console.log('Scanner module functionality initialized');
    }

    initializeAttackConstructorModule() {
        console.log('Attack Constructor module functionality initialized');
    }

    initializeTopologyModule() {
        console.log('Topology module functionality initialized');
    }

    initializeReportsModule() {
        console.log('Reports module functionality initialized');
    }

    initializeSettingsModule() {
        console.log('Settings module functionality initialized');
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –º–æ–¥—É–ª—è
     */
    getModuleIcon(moduleId) {
        const icons = {
            'dashboard': 'tachometer-alt',
            'scanner': 'search',
            'attack-constructor': 'hammer',
            'network-topology': 'project-diagram',
            'reports': 'chart-bar',
            'settings': 'cog'
        };
        return icons[moduleId] || 'cube';
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    getModuleTitle(moduleId) {
        const titles = {
            'dashboard': '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
            'scanner': '–ú–æ–¥—É–ª—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
            'attack-constructor': '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∞—Ç–∞–∫',
            'network-topology': '–¢–æ–ø–æ–ª–æ–≥–∏—è —Å–µ—Ç–∏',
            'reports': '–û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
            'settings': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã'
        };
        return titles[moduleId] || moduleId;
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    async applyUserSettings() {
        try {
            // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–º—É
            this.applyTheme(this.settings.theme || 'auto');

            // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —è–∑—ã–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            this.applyLocale(this.settings.locale || 'ru');

            // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if (this.settings.notifications) {
                this.applyNotificationSettings(this.settings.notifications);
            }

            // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if (this.settings.autoRefresh) {
                this.applyAutoRefreshSettings(this.settings.autoRefresh);
            }

            logger.info('‚öôÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
        } catch (error) {
            logger.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
     */
    async startServices() {
        try {
            // –ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            this.startMonitoringService();

            // –ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            this.startAutoSaveService();

            // –ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            this.startUpdateService();

            // –ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            this.startAnalyticsService();

            logger.info('üîÑ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã');
        } catch (error) {
            logger.warn('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤:', error);
        }
    }

    /**
     * –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
     */
    async finalizeBoot() {
        try {
            // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            this.restoreApplicationState();

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ sidebar
            if (this.components.sidebar) {
                logger.info(`üîß Sidebar –≥–æ—Ç–æ–≤: ${this.components.sidebar.isReady()}`);
                logger.info(`üîß Sidebar —Å–æ—Å—Ç–æ—è–Ω–∏–µ:`, this.components.sidebar.getState());
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            this.checkForUpdates();

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            this.emit('ready');

            logger.info('üèÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        } catch (error) {
            logger.warn('–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    setupNavigation() {
        try {
            this.components.navigation = new NavigationComponent({
                container: '.navigation',
                onTabChange: (tabId) => this.switchTab(tabId)
            });
            logger.debug('Navigation –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            logger.warn('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', error);
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ header —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    setupHeader() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–µ–Ω—é
        const userMenu = document.querySelector('.user-menu');
        if (userMenu) {
            userMenu.addEventListener('click', () => this.toggleUserMenu());
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const notificationBtn = document.querySelector('.notification-btn');
        if (notificationBtn) {
            notificationBtn.addEventListener('click', () => this.toggleNotificationCenter());
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        const settingsBtn = document.querySelector('.settings-btn');
        if (settingsBtn) {
            settingsBtn.addEventListener('click', () => this.openSettingsModal());
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∏—Å–∫–∞
     */
    setupSearch() {
        const searchInput = document.querySelector('.search-input');
        if (searchInput) {
            searchInput.addEventListener('input', debounce((e) => {
                this.handleGlobalSearch(e.target.value);
            }, 300));

            searchInput.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') {
                    this.executeSearch(e.target.value);
                }
            });
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
     */
    setupModals() {
        this.components.modals.set('confirm', new ConfirmModal());
        this.components.modals.set('info', new Modal());
        this.components.modals.set('settings', new Modal({
            size: 'large',
            title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã'
        }));
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ drag and drop
     */
    setupDragAndDrop() {
        document.addEventListener('dragover', (e) => {
            e.preventDefault();
        });

        document.addEventListener('drop', (e) => {
            e.preventDefault();
            this.handleFileDrop(e);
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
     */
    setupContextMenu() {
        document.addEventListener('contextmenu', (e) => {
            const contextTarget = e.target.closest('[data-context-menu]');
            if (contextTarget) {
                e.preventDefault();
                this.showContextMenu(e, contextTarget);
            }
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    setupNotificationUI() {
        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!document.querySelector('.notification-container')) {
            const container = document.createElement('div');
            container.className = 'notification-container';
            container.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: ${Z_INDEX.NOTIFICATION};
                pointer-events: none;
            `;
            document.body.appendChild(container);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    initializeNotificationSystem() {
        this.state.notifications = [];
        this.state.unreadCount = 0;

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        this.intervals.set('notificationCleanup', setInterval(() => {
            this.cleanupOldNotifications();
        }, 60000)); // –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    showNotification(message, type = NOTIFICATION_TYPES.INFO, options = {}) {
        const notification = {
            id: generateUUID(),
            message,
            type,
            timestamp: new Date(),
            duration: options.duration || 5000,
            persistent: options.persistent || false,
            actions: options.actions || []
        };

        this.state.notifications.push(notification);
        this.state.unreadCount++;

        this.displayNotification(notification);
        this.updateNotificationBadge();

        // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ)
        if (!notification.persistent) {
            setTimeout(() => {
                this.removeNotification(notification.id);
            }, notification.duration);
        }

        this.emit('notificationAdded', notification);
        return notification;
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    displayNotification(notification) {
        const container = document.querySelector('.notification-container');
        if (!container) return;

        const element = document.createElement('div');
        element.className = `notification notification--${notification.type}`;
        element.setAttribute('data-notification-id', notification.id);

        element.innerHTML = `
            <div class="notification__content">
                <div class="notification__message">${notification.message}</div>
                <button class="notification__close" onclick="window.ipRoastApp.removeNotification('${notification.id}')">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
        element.style.transform = 'translateX(100%)';
        element.style.opacity = '0';
        container.appendChild(element);

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        requestAnimationFrame(() => {
            element.style.transition = 'all 0.3s ease';
            element.style.transform = 'translateX(0)';
            element.style.opacity = '1';
            element.style.pointerEvents = 'auto';
        });
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    removeNotification(id) {
        const element = document.querySelector(`[data-notification-id="${id}"]`);
        if (element) {
            element.style.transform = 'translateX(100%)';
            element.style.opacity = '0';
            setTimeout(() => {
                element.remove();
            }, 300);
        }

        this.state.notifications = this.state.notifications.filter(n => n.id !== id);
        this.updateNotificationBadge();
        this.emit('notificationRemoved', id);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–π–¥–∂–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    updateNotificationBadge() {
        const badge = document.querySelector('.notification-badge');
        if (badge) {
            const count = this.state.unreadCount;
            badge.textContent = count > 99 ? '99+' : count;
            badge.style.display = count > 0 ? 'flex' : 'none';
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    cleanupOldNotifications() {
        const now = new Date();
        const maxAge = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞

        this.state.notifications = this.state.notifications.filter(notification => {
            return now - notification.timestamp < maxAge;
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
     */
    setupErrorHandlers() {
        window.addEventListener('error', (event) => {
            logger.error('–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', event.error);
            this.handleError(event.error);
        });

        window.addEventListener('unhandledrejection', (event) => {
            logger.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ Promise:', event.reason);
            this.handleError(event.reason);
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Å–æ–±—ã—Ç–∏–π
     */
    setupEventSystem() {
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        this.on('error', this.handleError);
        this.on('moduleError', this.handleModuleError.bind(this));
        this.on('connectionLost', this.handleConnectionLost.bind(this));
        this.on('connectionRestored', this.handleConnectionRestored.bind(this));
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
     */
    setupHotkeys() {
        document.addEventListener('keydown', (e) => {
            if (this.isModalOpen() || this.isInputFocused()) {
                return; // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –≤ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–Ω–∞—Ö –∏–ª–∏ –ø–æ–ª—è—Ö –≤–≤–æ–¥–∞
            }

            const key = this.getHotkeyString(e);
            const handler = this.hotkeys.get(key);

            if (handler && typeof handler === 'function') {
                e.preventDefault();
                handler();
            }
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≥–æ—Ä—è—á–µ–π –∫–ª–∞–≤–∏—à–∏
     */
    getHotkeyString(event) {
        const keys = [];

        if (event.ctrlKey) keys.push('ctrl');
        if (event.shiftKey) keys.push('shift');
        if (event.altKey) keys.push('alt');

        keys.push(event.key.toLowerCase());

        return keys.join('+');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
     */
    isModalOpen() {
        return document.querySelector('.modal--active') !== null;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ–∫—É—Å–∞ –Ω–∞ –ø–æ–ª—è—Ö –≤–≤–æ–¥–∞
     */
    isInputFocused() {
        const activeElement = document.activeElement;
        return activeElement && (
            activeElement.tagName === 'INPUT' ||
            activeElement.tagName === 'TEXTAREA' ||
            activeElement.contentEditable === 'true'
        );
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket
     */
    initializeWebSocket() {
        if (!this.settings.enableWebSocket) {
            logger.info('WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
            return;
        }

        try {
            // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket
            if (typeof WebSocket !== 'undefined' && this.api && this.api.getWebSocketUrl) {
                const wsUrl = this.api.getWebSocketUrl();
                this.websocket = new WebSocket(wsUrl);

                this.websocket.onopen = () => {
                    logger.info('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
                    this.state.connectionStatus = CONNECTION_STATUS.CONNECTED;
                    this.websocketReconnectAttempts = 0;
                    this.emit('connectionRestored');
                };

                this.websocket.onmessage = (event) => {
                    this.handleWebSocketMessage(event);
                };

                this.websocket.onclose = () => {
                    logger.warn('‚ö†Ô∏è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
                    this.state.connectionStatus = CONNECTION_STATUS.DISCONNECTED;
                    this.scheduleWebSocketReconnect();
                    this.emit('connectionLost');
                };

                this.websocket.onerror = (error) => {
                    logger.error('‚ùå –û—à–∏–±–∫–∞ WebSocket:', error);
                    this.handleWebSocketError(error);
                };
            } else {
                logger.warn('WebSocket –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            }

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket:', error);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π WebSocket
     */
    handleWebSocketMessage(event) {
        try {
            const data = JSON.parse(event.data);

            switch (data.type) {
                case WEBSOCKET_EVENTS.SCAN_UPDATE:
                    this.handleScanUpdate(data.payload);
                    break;
                case WEBSOCKET_EVENTS.SYSTEM_ALERT:
                    this.handleSystemAlert(data.payload);
                    break;
                case WEBSOCKET_EVENTS.MODULE_UPDATE:
                    this.handleModuleUpdate(data.payload);
                    break;
                default:
                    logger.debug('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', data.type);
            }
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    }

    /**
     * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket
     */
    scheduleWebSocketReconnect() {
        if (this.websocketReconnectAttempts >= 5) {
            logger.error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket');
            return;
        }

        const delay = Math.min(1000 * Math.pow(2, this.websocketReconnectAttempts), 30000);
        this.websocketReconnectAttempts++;

        setTimeout(() => {
            logger.info(`–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket #${this.websocketReconnectAttempts}`);
            this.initializeWebSocket();
        }, delay);
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
     */
    switchTab(tabId) {
        if (!tabId) {
            logger.warn('–ù–µ —É–∫–∞–∑–∞–Ω ID –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è');
            return;
        }

        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const previousTab = this.state.currentTab;
            this.state.currentTab = tabId;

            // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
            const allTabs = document.querySelectorAll('.tab-container');
            allTabs.forEach(tab => {
                tab.classList.remove('active');
            });

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É
            const targetTab = document.querySelector(`#${tabId}-container`);
            if (targetTab) {
                targetTab.classList.add('active');
                this.loadModuleIfNeeded(tabId);
                logger.info(`–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –≤–∫–ª–∞–¥–∫—É: ${tabId}`);
            }
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏:', error);
            this.handleError(error);
        }
    }

    /**
     * –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
     */
    async loadModuleIfNeeded(moduleId) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —É–∂–µ –º–æ–¥—É–ª—å
            if (this.state.loadedModules.has(moduleId)) {
                logger.debug(`–ú–æ–¥—É–ª—å ${moduleId} —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω`);
                return;
            }

            // –î–ª—è dashboard –º–æ–¥—É–ª—å —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if (moduleId === 'dashboard') {
                return;
            }

            logger.info(`–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è: ${moduleId}`);

            // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π
            this.state.loadedModules.add(moduleId);

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –º–æ–¥—É–ª—è
            const container = document.querySelector(`#${moduleId}-container .tab-content-inner`);
            if (container && !container.hasChildNodes()) {
                await this.initializeModuleStub(moduleId);
            }

        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è ${moduleId}:`, error);
            this.state.moduleErrors.set(moduleId, error);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–ª—É—à–∫–∏ –º–æ–¥—É–ª—è
     */
    async initializeModuleStub(moduleId) {
        const container = document.querySelector(`#${moduleId}-container .tab-content-inner`);
        if (!container) return;

        const moduleTitle = this.getModuleTitle(moduleId);
        container.innerHTML = `
        <div class="module-placeholder">
            <div class="module-placeholder-icon">
                <i class="fas fa-cube"></i>
            </div>
            <h3>–ú–æ–¥—É–ª—å "${moduleTitle}"</h3>
            <p>–ú–æ–¥—É–ª—å –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é</p>
            <button class="btn btn--primary" onclick="console.log('–ú–æ–¥—É–ª—å ${moduleId} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω')">
                –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
            </button>
        </div>
    `;
    }


    /**
     * –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ sidebar
     */
    toggleSidebar() {
        if (this.components.sidebar && this.components.sidebar.isReady()) {
            this.components.sidebar.toggle();
        }
    }

    /**
     * –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ sidebar
     */
    collapseSidebar() {
        if (this.components.sidebar && this.components.sidebar.isReady()) {
            this.components.sidebar.collapse();
        }
    }

    /**
     * –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ sidebar
     */
    expandSidebar() {
        if (this.components.sidebar && this.components.sidebar.isReady()) {
            this.components.sidebar.expand();
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–π–¥–∂–µ–π –≤ sidebar
     */
    updateSidebarBadge(tabId, count) {
        if (this.components.sidebar && this.components.sidebar.isReady()) {
            this.components.sidebar.updateBadge(tabId, count);
        }
    }


    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    updateLoadingProgress(progress, message) {
        const progressBar = document.querySelector('.loading-progress');
        const progressText = document.querySelector('.loading-text');

        if (progressBar) {
            progressBar.style.width = `${progress}%`;
        }

        if (progressText) {
            progressText.textContent = message;
        }

        logger.debug(`–ó–∞–≥—Ä—É–∑–∫–∞: ${progress}% - ${message}`);
    }

    /**
     * –°–∫—Ä—ã—Ç–∏–µ —ç–∫—Ä–∞–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    hideLoadingScreen() {
        const loadingScreen = document.querySelector('.loading-screen');
        if (loadingScreen) {
            addClass(loadingScreen, 'loading-screen--hidden');
            setTimeout(() => {
                loadingScreen.style.display = 'none';
            }, 500);
        }
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
     */
    applyTheme(theme) {
        document.documentElement.setAttribute('data-theme', theme);

        if (theme === 'auto') {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º—ã –ø–æ —Å–∏—Å—Ç–µ–º–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
            const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
            theme = prefersDark ? 'dark' : 'light';
        }

        Storage.set(STORAGE_KEYS.THEME, theme);
        logger.debug(`–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Ç–µ–º–∞: ${theme}`);
        this.emit('themeChanged', { theme });
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏
     */
    applyLocale(locale) {
        document.documentElement.setAttribute('lang', locale);
        Storage.set(STORAGE_KEYS.LOCALE, locale);
        logger.debug(`–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å: ${locale}`);
        this.emit('localeChanged', { locale });
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    applyNotificationSettings(settings) {
        // –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        logger.debug('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏–º–µ–Ω–µ–Ω—ã:', settings);
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    applyAutoRefreshSettings(enabled) {
        if (enabled) {
            // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            this.intervals.set('autoRefresh', setInterval(() => {
                this.refreshCurrentModule();
            }, this.settings.refreshInterval || 30000));
        } else {
            // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const interval = this.intervals.get('autoRefresh');
            if (interval) {
                clearInterval(interval);
                this.intervals.delete('autoRefresh');
            }
        }
        logger.debug(`–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${enabled ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}`);
    }

    /**
     * –ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    startMonitoringService() {
        this.intervals.set('monitoring', setInterval(() => {
            this.performSystemCheck();
        }, 30000)); // –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    }

    /**
     * –ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     */
    startAutoSaveService() {
        this.intervals.set('autosave', setInterval(() => {
            this.saveApplicationState();
        }, 60000)); // –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    }

    /**
     * –ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
     */
    startUpdateService() {
        this.intervals.set('updates', setInterval(() => {
            this.checkForUpdates();
        }, 3600000)); // –∫–∞–∂–¥—ã–π —á–∞—Å
    }

    /**
     * –ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
     */
    startAnalyticsService() {
        this.intervals.set('analytics', setInterval(() => {
            this.collectAnalytics();
        }, 300000)); // –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
     */
    async performSystemCheck() {
        try {
            if (this.api && this.api.system && this.api.system.getSystemStatus) {
                const status = await this.api.system.getSystemStatus();
                this.updateSystemStatus(status);
            }
        } catch (error) {
            logger.warn('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
     */
    updateSystemStatus(status) {
        // –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
        this.emit('systemStatusUpdated', status);
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    saveApplicationState() {
        try {
            const state = {
                currentTab: this.state.currentTab,
                loadedModules: Array.from(this.state.loadedModules),
                timestamp: new Date().toISOString(),
                version: this.version
            };

            Storage.set(STORAGE_KEYS.APP_STATE, state);
            logger.debug('–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
        } catch (error) {
            logger.warn('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
        }
    }

    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    restoreApplicationState() {
        try {
            const savedState = Storage.get(STORAGE_KEYS.APP_STATE);
            if (savedState && savedState.version === this.version) {
                this.state.currentTab = savedState.currentTab || 'dashboard';
                logger.debug('–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            }
        } catch (error) {
            logger.warn('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
     */
    async checkForUpdates() {
        try {
            if (this.api && this.api.system && this.api.system.checkForUpdates) {
                const updateInfo = await this.api.system.checkForUpdates();
                if (updateInfo && updateInfo.hasUpdate) {
                    this.showUpdateNotification(updateInfo);
                }
            }
        } catch (error) {
            logger.debug('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
     */
    showUpdateNotification(updateInfo) {
        this.showNotification(
            `–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${updateInfo.version}`,
            NOTIFICATION_TYPES.INFO,
            { persistent: true }
        );
    }

    /**
     * –°–±–æ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
     */
    collectAnalytics() {
        try {
            const analytics = {
                timestamp: new Date().toISOString(),
                currentTab: this.state.currentTab,
                loadedModules: Array.from(this.state.loadedModules),
                userAgent: navigator.userAgent,
                version: this.version
            };

            // –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
            if (this.api && this.api.analytics && this.api.analytics.sendAnalytics) {
                this.api.analytics.sendAnalytics(analytics).catch(error => {
                    logger.debug('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
                });
            }
        } catch (error) {
            logger.debug('–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥—É–ª—è
     */
    refreshCurrentModule() {
        const moduleController = this.modules.get(this.state.currentTab);
        if (moduleController && typeof moduleController.refresh === 'function') {
            moduleController.refresh();
        }

        logger.info(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è: ${this.state.currentTab}`);
        this.emit('moduleRefreshed', { module: this.state.currentTab });
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –ø–æ–º–æ—â–∏
     */
    showHelpDialog() {
        const modal = this.components.modals.get('info');
        if (modal) {
            modal.show({
                title: '–°–ø—Ä–∞–≤–∫–∞',
                content: this.getHelpContent(),
                size: 'large'
            });
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ø—Ä–∞–≤–∫–∏
     */
    getHelpContent() {
        return `
            <div class="help-content">
                <h3>–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏</h3>
                <ul>
                    <li><kbd>Ctrl+Shift+R</kbd> - –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –º–æ–¥—É–ª—å</li>
                    <li><kbd>Ctrl+/</kbd> - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É</li>
                    <li><kbd>Esc</kbd> - –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞</li>
                    <li><kbd>F5</kbd> - –û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª—å</li>
                </ul>
                
                <h3>–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</h3>
                <p>IP Roast Enterprise ${this.version}</p>
                <p>–î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏: ${formatDate(this.buildDate)}</p>
            </div>
        `;
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
     */
    closeModals() {
        this.components.modals.forEach(modal => {
            if (modal.isOpen && modal.isOpen()) {
                modal.close();
            }
        });
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—Ç—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    showNotificationCenter() {
        // –õ–æ–≥–∏–∫–∞ –ø–æ–∫–∞–∑–∞ —Ü–µ–Ω—Ç—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        logger.debug('–ü–æ–∫–∞–∑ —Ü–µ–Ω—Ç—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    toggleNotificationCenter() {
        // –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ü–µ–Ω—Ç—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        logger.debug('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–µ–Ω—é
     */
    toggleUserMenu() {
        const userMenu = document.querySelector('.user-menu-dropdown');
        if (userMenu) {
            toggleClass(userMenu, 'active');
        }
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    openSettingsModal() {
        const modal = this.components.modals.get('settings');
        if (modal) {
            modal.show();
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
     */
    handleGlobalSearch(query) {
        if (query.length > 2) {
            logger.debug(`–ü–æ–∏—Å–∫: ${query}`);
            this.emit('search', { query });
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
     */
    executeSearch(query) {
        logger.info(`–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞: ${query}`);
        // –õ–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ drop —Ñ–∞–π–ª–æ–≤
     */
    handleFileDrop(event) {
        const files = Array.from(event.dataTransfer.files);
        logger.debug('–§–∞–π–ª—ã –ø–µ—Ä–µ—Ç–∞—â–µ–Ω—ã:', files.map(f => f.name));
        // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
     */
    showContextMenu(event, target) {
        logger.debug('–ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è:', target);
        // –õ–æ–≥–∏–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
     */
    handleResize() {
        logger.debug('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞');
        this.emit('resize', {
            width: window.innerWidth,
            height: window.innerHeight
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
     */
    handleKeydown(event) {
        // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∞–≤–∏—à
        if (event.key === 'F12') {
            logger.debug('F12 –Ω–∞–∂–∞—Ç–∞');
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –º–æ–¥—É–ª–µ–π
     */
    handleModuleError(error) {
        logger.error('–û—à–∏–±–∫–∞ –º–æ–¥—É–ª—è:', error);
        this.showNotification(
            `–û—à–∏–±–∫–∞ –º–æ–¥—É–ª—è: ${error.module || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`,
            NOTIFICATION_TYPES.ERROR
        );
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–µ—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    handleConnectionLost() {
        logger.warn('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ');
        this.showNotification(
            '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ',
            NOTIFICATION_TYPES.WARNING,
            { persistent: true }
        );
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    handleConnectionRestored() {
        logger.info('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        this.showNotification(
            '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
            NOTIFICATION_TYPES.SUCCESS
        );
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    handleScanUpdate(payload) {
        logger.debug('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', payload);
        this.emit('scanUpdate', payload);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
     */
    handleSystemAlert(payload) {
        logger.warn('–°–∏—Å—Ç–µ–º–Ω–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ:', payload);
        this.showNotification(
            payload.message || '–°–∏—Å—Ç–µ–º–Ω–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ',
            NOTIFICATION_TYPES.WARNING
        );
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è
     */
    handleModuleUpdate(payload) {
        logger.debug('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è:', payload);
        this.emit('moduleUpdate', payload);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ WebSocket
     */
    handleWebSocketError(error) {
        logger.error('–û—à–∏–±–∫–∞ WebSocket:', error);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
     */
    handleCriticalError(error) {
        logger.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);

        // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏
        this.showCriticalErrorScreen(error);

        // –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
        this.sendErrorReport(error);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏
     */
    showCriticalErrorScreen(error) {
        document.body.innerHTML = `
            <div class="critical-error-screen" style="
                display: flex;
                align-items: center;
                justify-content: center;
                min-height: 100vh;
                padding: 2rem;
                background: #f8f9fa;
                font-family: system-ui, sans-serif;
            ">
                <div class="critical-error-content" style="
                    text-align: center;
                    max-width: 600px;
                    background: white;
                    padding: 3rem;
                    border-radius: 8px;
                    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                ">
                    <div class="error-icon" style="font-size: 4rem; color: #dc3545; margin-bottom: 1rem;">
                        ‚ö†Ô∏è
                    </div>
                    <h1 style="color: #343a40; margin-bottom: 1rem;">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</h1>
                    <p class="error-message" style="color: #6c757d; margin-bottom: 1rem;">${error.message}</p>
                    <p class="error-details" style="color: #6c757d; margin-bottom: 2rem;">
                        –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.
                    </p>
                    <div class="error-actions">
                        <button class="btn btn--primary" onclick="location.reload()" style="
                            background: #007bff;
                            color: white;
                            border: none;
                            padding: 0.75rem 1.5rem;
                            border-radius: 4px;
                            cursor: pointer;
                            margin-right: 1rem;
                        ">
                            üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                        </button>
                        <button class="btn btn--secondary" onclick="console.log('–û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ:', '${error.message}')" style="
                            background: #6c757d;
                            color: white;
                            border: none;
                            padding: 0.75rem 1.5rem;
                            border-radius: 4px;
                            cursor: pointer;
                        ">
                            üêõ –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
                        </button>
                    </div>
                </div>
            </div>
        `;
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ
     */
    async sendErrorReport(error) {
        try {
            // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞
            const errorReport = {
                error: error.message,
                stack: error.stack,
                timestamp: new Date().toISOString(),
                version: this.version,
                userAgent: navigator.userAgent,
                currentTab: this.state.currentTab,
                loadedModules: Array.from(this.state.loadedModules)
            };

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –∏ –º–µ—Ç–æ–¥–∞
            if (this.api &&
                this.api.system &&
                typeof this.api.system.sendErrorReport === 'function') {

                await this.api.system.sendErrorReport(errorReport);
                logger.info('‚úÖ –û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
            } else {
                // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
                logger.warn('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ');
                Storage.set('errorReport_' + Date.now(), errorReport);
            }

        } catch (reportError) {
            logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ:', reportError.message);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ –∫–∞–∫ fallback
            try {
                const errorReport = {
                    originalError: error.message,
                    reportError: reportError.message,
                    timestamp: new Date().toISOString()
                };
                Storage.set('failedErrorReport_' + Date.now(), errorReport);
            } catch (storageError) {
                console.error('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ:', storageError);
            }
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
     */
    handleError(error) {
        logger.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
        this.showNotification(
            `–û—à–∏–±–∫–∞: ${error.message}`,
            NOTIFICATION_TYPES.ERROR,
            { duration: 10000 }
        );
    }

    /**
 * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
    destroy() {
        logger.info('üóëÔ∏è –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');

        // –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        this.intervals.forEach((interval, key) => {
            clearInterval(interval);
            logger.debug(`–ò–Ω—Ç–µ—Ä–≤–∞–ª ${key} –æ—á–∏—â–µ–Ω`);
        });

        // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
        this.timeouts.forEach((timeout, key) => {
            clearTimeout(timeout);
            logger.debug(`–¢–∞–π–º–∞—É—Ç ${key} –æ—á–∏—â–µ–Ω`);
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket
        if (this.websocket) {
            this.websocket.close();
            logger.debug('WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
        }

        // –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π
        this.modules.forEach((module, id) => {
            if (typeof module.destroy === 'function') {
                module.destroy();
                logger.debug(`–ú–æ–¥—É–ª—å ${id} —É–Ω–∏—á—Ç–æ–∂–µ–Ω`);
            }
        });

        // –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ UI (–≤–∫–ª—é—á–∞—è sidebar)
        if (this.components.sidebar && typeof this.components.sidebar.destroy === 'function') {
            this.components.sidebar.destroy();
            logger.debug('Sidebar –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
        }

        Object.values(this.components).forEach(component => {
            if (component && typeof component.destroy === 'function') {
                component.destroy();
            }
        });

        // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
        this.removeAllListeners();

        logger.info('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–æ');
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.ipRoastApp = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    try {
        window.ipRoastApp = new IPRoastEnterpriseApp();

        // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤ development —Ä–µ–∂–∏–º–µ
        if (localStorage.getItem('debug') === 'true') {
            window.app = window.ipRoastApp;
            window.logger = logger;
        }

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);

        // –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–∑–æ–≤—É—é –æ—à–∏–±–∫—É –µ—Å–ª–∏ –≤—Å–µ —Å–ª–æ–º–∞–Ω–æ
        document.body.innerHTML = `
            <div style="
                display: flex;
                align-items: center;
                justify-content: center;
                min-height: 100vh;
                font-family: system-ui, sans-serif;
                background: #f8f9fa;
            ">
                <div style="text-align: center; padding: 2rem;">
                    <h1 style="color: #dc3545;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</h1>
                    <p style="color: #6c757d;">${error.message}</p>
                    <button onclick="location.reload()" style="
                        background: #007bff;
                        color: white;
                        border: none;
                        padding: 0.75rem 1.5rem;
                        border-radius: 4px;
                        cursor: pointer;
                    ">–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å</button>
                </div>
            </div>
        `;
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
export default IPRoastEnterpriseApp;
