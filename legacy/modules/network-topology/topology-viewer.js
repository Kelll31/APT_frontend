/**
 * topology-viewer.js - –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–∞ —Ç–æ–ø–æ–ª–æ–≥–∏–∏ —Å–µ—Ç–∏ IP_Roast
 * –≠–Ω—Ç–µ—Ä–ø—Ä–∞–π–∑-–≤–µ—Ä—Å–∏—è –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 * –í–µ—Ä—Å–∏—è: Enterprise 1.0
 * 
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç–æ–ø–æ–ª–æ–≥–∏–∏:
 * - NetworkTopologyController (–∫–∞—Ä—Ç–∞ —Å–µ—Ç–∏)
 * - NetworkGraphController (–≥—Ä–∞—Ñ —Å–µ—Ç–∏) 
 * - DeviceDetailsController (–¥–µ—Ç–∞–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤)
 */

import { IPRoastAPI } from '../../shared/utils/api.js';
import {
    $, $$, addClass, removeClass, toggleClass,
    formatDate, timeAgo, debounce, generateUUID,
    Storage
} from '../../shared/utils/helpers.js';
import {
    DEVICE_STATUS, THEMES, ANIMATION_DURATION,
    NOTIFICATION_TYPES, DEFAULT_UI_SETTINGS
} from '../../shared/utils/constants.js';

// –ò–º–ø–æ—Ä—Ç –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
import { NetworkTopologyController } from './network-map.js';
import { NetworkGraphController } from './network-graph.js';
import { DeviceDetailsController } from './device-details.js';

export class TopologyViewerController {
    constructor(options = {}) {
        this.options = {
            container: '#topology-viewer-container',
            autoRefresh: true,
            refreshInterval: 30000,
            defaultView: 'map',
            showSidebar: true,
            showProperties: true,
            enableSearch: true,
            enableFilters: true,
            ...options
        };

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.state = {
            isInitialized: false,
            currentView: this.options.defaultView, // 'map' | 'graph'
            selectedDevice: null,
            selectedSegment: null,
            searchQuery: '',
            filters: {
                deviceTypes: [],
                status: [],
                segments: []
            },
            sidebarCollapsed: false,
            propertiesVisible: false,
            isLoading: false
        };

        // –î–∞–Ω–Ω—ã–µ
        this.data = {
            devices: new Map(),
            segments: new Map(),
            connections: new Map(),
            tree: {
                devices: [],
                segments: []
            }
        };

        // –î–æ—á–µ—Ä–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
        this.controllers = {
            map: null,
            graph: null,
            details: null
        };

        // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
        this.elements = {};

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.eventHandlers = new Map();
        this.refreshTimer = null;

        console.log('üó∫Ô∏è Topology Viewer Controller –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
     */
    async init() {
        try {
            this.container = $(this.options.container);
            if (!this.container) {
                throw new Error(`–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${this.options.container} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }

            // –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
            this.showLoading(true, '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–∞ —Ç–æ–ø–æ–ª–æ–≥–∏–∏...');

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
            await this.initializeUI();

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π
            this.setupEventHandlers();

            // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            await this.loadData();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
            await this.initializeControllers();

            // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            if (this.options.autoRefresh) {
                this.startAutoRefresh();
            }

            this.state.isInitialized = true;
            this.showLoading(false);

            this.emit('initialized');
            console.log('‚úÖ Topology Viewer —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Topology Viewer:', error);
            this.showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–∞ —Ç–æ–ø–æ–ª–æ–≥–∏–∏');
            this.showLoading(false);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    async initializeUI() {
        this.container.innerHTML = `
            <div class="topology-viewer">
                <!-- Sidebar -->
                <div class="topology-sidebar" id="topology-sidebar">
                    <div class="sidebar-header">
                        <h3 class="sidebar-title">–¢–æ–ø–æ–ª–æ–≥–∏—è —Å–µ—Ç–∏</h3>
                        <button class="sidebar-toggle-btn" id="sidebar-toggle">
                            <i class="fas fa-chevron-left"></i>
                        </button>
                    </div>
                    
                    <div class="sidebar-content">
                        <!-- –ü–æ–∏—Å–∫ -->
                        <div class="topology-search-section">
                            <div class="topology-search-container">
                                <input type="text" 
                                       class="topology-search-input" 
                                       id="topology-search"
                                       placeholder="–ü–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤...">
                                <i class="topology-search-icon fas fa-search"></i>
                                <button class="topology-search-clear" id="search-clear" style="display: none;">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>

                        <!-- –î–µ—Ä–µ–≤–æ —Ç–æ–ø–æ–ª–æ–≥–∏–∏ -->
                        <div class="topology-tree" id="topology-tree">
                            <!-- –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                        </div>
                    </div>
                </div>

                <!-- –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å -->
                <div class="topology-main">
                    <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
                    <div class="topology-header">
                        <div class="topology-breadcrumb" id="topology-breadcrumb">
                            <span class="breadcrumb-item active">–¢–æ–ø–æ–ª–æ–≥–∏—è</span>
                        </div>
                        
                        <div class="topology-actions">
                            <!-- –ü–æ–∏—Å–∫ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ -->
                            <div class="topology-search">
                                <input type="text" 
                                       class="topology-search-input" 
                                       id="header-search"
                                       placeholder="–ü–æ–∏—Å–∫...">
                                <i class="topology-search-icon fas fa-search"></i>
                            </div>
                            
                            <!-- –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–æ–≤ -->
                            <button class="topology-filter-btn" id="view-toggle">
                                <i class="fas fa-sitemap"></i>
                                <span>–ì—Ä–∞—Ñ</span>
                            </button>
                            
                            <!-- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ -->
                            <button class="topology-filter-btn" id="refresh-btn">
                                <i class="fas fa-sync-alt"></i>
                                <span>–û–±–Ω–æ–≤–∏—Ç—å</span>
                            </button>
                        </div>
                    </div>

                    <!-- Canvas -->
                    <div class="topology-canvas" id="topology-canvas">
                        <!-- –ó–¥–µ—Å—å –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è map –∏–ª–∏ graph -->
                        <div class="topology-loading" id="topology-loading" style="display: none;">
                            <div class="topology-loading-spinner"></div>
                            <div class="topology-loading-text">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ø–æ–ª–æ–≥–∏–∏...</div>
                        </div>
                        
                        <div class="topology-empty" id="topology-empty" style="display: none;">
                            <i class="topology-empty-icon fas fa-network-wired"></i>
                            <h3 class="topology-empty-title">–¢–æ–ø–æ–ª–æ–≥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h3>
                            <p class="topology-empty-description">
                                –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ—Ç–µ–≤–æ–π —Ç–æ–ø–æ–ª–æ–≥–∏–∏
                            </p>
                        </div>
                    </div>

                    <!-- –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è -->
                    <div class="topology-controls" id="topology-controls">
                        <button class="topology-control-btn" id="zoom-in" title="–£–≤–µ–ª–∏—á–∏—Ç—å">
                            <i class="fas fa-plus"></i>
                        </button>
                        <button class="topology-control-btn" id="zoom-out" title="–£–º–µ–Ω—å—à–∏—Ç—å">
                            <i class="fas fa-minus"></i>
                        </button>
                        <div class="topology-zoom-level" id="zoom-level">100%</div>
                        <button class="topology-control-btn" id="fit-screen" title="–í–ø–∏—Å–∞—Ç—å –≤ —ç–∫—Ä–∞–Ω">
                            <i class="fas fa-expand-arrows-alt"></i>
                        </button>
                        <button class="topology-control-btn" id="center-view" title="–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å">
                            <i class="fas fa-crosshairs"></i>
                        </button>
                    </div>
                </div>

                <!-- –ü–∞–Ω–µ–ª—å —Å–≤–æ–π—Å—Ç–≤ -->
                <div class="topology-properties hidden" id="topology-properties">
                    <div class="properties-header">
                        <h4 class="properties-title">–°–≤–æ–π—Å—Ç–≤–∞</h4>
                        <button class="properties-close-btn" id="properties-close">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div class="properties-content" id="properties-content">
                        <!-- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                    </div>
                </div>
            </div>
        `;

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã
        this.elements = {
            sidebar: $('#topology-sidebar'),
            sidebarToggle: $('#sidebar-toggle'),
            searchInput: $('#topology-search'),
            searchClear: $('#search-clear'),
            headerSearch: $('#header-search'),
            tree: $('#topology-tree'),
            breadcrumb: $('#topology-breadcrumb'),
            viewToggle: $('#view-toggle'),
            refreshBtn: $('#refresh-btn'),
            canvas: $('#topology-canvas'),
            loading: $('#topology-loading'),
            empty: $('#topology-empty'),
            controls: $('#topology-controls'),
            properties: $('#topology-properties'),
            propertiesContent: $('#properties-content'),
            propertiesClose: $('#properties-close'),
            zoomLevel: $('#zoom-level')
        };
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventHandlers() {
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ sidebar
        this.elements.sidebarToggle?.addEventListener('click', () => {
            this.toggleSidebar();
        });

        // –ü–æ–∏—Å–∫
        const searchHandler = debounce((query) => {
            this.handleSearch(query);
        }, 300);

        this.elements.searchInput?.addEventListener('input', (e) => {
            const query = e.target.value;
            searchHandler(query);
            this.toggleSearchClear(query);
        });

        this.elements.headerSearch?.addEventListener('input', (e) => {
            const query = e.target.value;
            searchHandler(query);
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å sidebar –ø–æ–∏—Å–∫–æ–º
            if (this.elements.searchInput) {
                this.elements.searchInput.value = query;
            }
        });

        // –û—á–∏—Å—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
        this.elements.searchClear?.addEventListener('click', () => {
            this.clearSearch();
        });

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–æ–≤
        this.elements.viewToggle?.addEventListener('click', () => {
            this.toggleView();
        });

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        this.elements.refreshBtn?.addEventListener('click', () => {
            this.refresh();
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ —Å–≤–æ–π—Å—Ç–≤
        this.elements.propertiesClose?.addEventListener('click', () => {
            this.hideProperties();
        });

        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        $('#zoom-in')?.addEventListener('click', () => this.zoomIn());
        $('#zoom-out')?.addEventListener('click', () => this.zoomOut());
        $('#fit-screen')?.addEventListener('click', () => this.fitToScreen());
        $('#center-view')?.addEventListener('click', () => this.centerView());

        // –ö–ª–∏–∫–∏ –ø–æ –¥–µ—Ä–µ–≤—É
        this.elements.tree?.addEventListener('click', (e) => {
            this.handleTreeClick(e);
        });

        // –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ/—Å–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–π –¥–µ—Ä–µ–≤–∞
        this.elements.tree?.addEventListener('click', (e) => {
            const header = e.target.closest('.tree-section-header');
            if (header) {
                const section = header.closest('.tree-section');
                toggleClass(section, 'collapsed');
            }
        });

        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', debounce(() => {
            this.handleResize();
        }, 250));

        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
        document.addEventListener('keydown', (e) => {
            this.handleKeyboard(e);
        });
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
     */
    async loadData() {
        try {
            this.showLoading(true, '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ø–æ–ª–æ–≥–∏–∏...');

            // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            const [topologyData, devicesData] = await Promise.all([
                IPRoastAPI.analytics.getNetworkTopology(),
                IPRoastAPI.devices.getDevices()
            ]);

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            this.processDevicesData(devicesData.devices || devicesData);

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ø–æ–ª–æ–≥–∏–∏
            this.processTopologyData(topologyData);

            // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞
            this.buildTree();

            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Ç–æ–ø–æ–ª–æ–≥–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
                devices: this.data.devices.size,
                segments: this.data.segments.size,
                connections: this.data.connections.size
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ø–æ–ª–æ–≥–∏–∏:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ø–æ–ª–æ–≥–∏–∏');
            throw error;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
     */
    processDevicesData(devices) {
        this.data.devices.clear();

        if (!Array.isArray(devices)) return;

        devices.forEach(device => {
            // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            const normalizedDevice = {
                id: device.id,
                name: device.name || device.hostname || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
                type: device.type || 'unknown',
                ip: device.ip || device.ipAddress || '',
                status: device.status || 'unknown',
                lastSeen: device.lastSeen || device.last_seen,
                interfaces: device.interfaces || [],
                specs: device.specs || [],
                security: device.security || {},
                x: device.x || Math.random() * 800,
                y: device.y || Math.random() * 600,
                ...device
            };

            this.data.devices.set(device.id, normalizedDevice);
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ø–æ–ª–æ–≥–∏–∏
     */
    processTopologyData(topology) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        if (topology.segments) {
            this.data.segments.clear();
            topology.segments.forEach(segment => {
                this.data.segments.set(segment.id, segment);
            });
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        if (topology.connections) {
            this.data.connections.clear();
            topology.connections.forEach(connection => {
                this.data.connections.set(connection.id, connection);
            });
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ —Ç–æ–ø–æ–ª–æ–≥–∏–∏
        if (topology.devices) {
            topology.devices.forEach(device => {
                const existing = this.data.devices.get(device.id);
                if (existing) {
                    existing.x = device.x || existing.x;
                    existing.y = device.y || existing.y;
                }
            });
        }
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    buildTree() {
        const treeData = this.prepareTreeData();
        this.renderTree(treeData);
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ—Ä–µ–≤–∞
     */
    prepareTreeData() {
        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ —Ç–∏–ø–∞–º
        const devicesByType = new Map();
        this.data.devices.forEach(device => {
            if (!devicesByType.has(device.type)) {
                devicesByType.set(device.type, []);
            }
            devicesByType.get(device.type).push(device);
        });

        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º
        const segmentsByType = new Map();
        this.data.segments.forEach(segment => {
            if (!segmentsByType.has(segment.type)) {
                segmentsByType.set(segment.type, []);
            }
            segmentsByType.get(segment.type).push(segment);
        });

        return {
            devices: devicesByType,
            segments: segmentsByType
        };
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥–µ—Ä–µ–≤–∞
     */
    renderTree(treeData) {
        if (!this.elements.tree) return;

        let html = '';

        // –°–µ–∫—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        if (treeData.devices.size > 0) {
            html += this.renderTreeSection('devices', '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', treeData.devices);
        }

        // –°–µ–∫—Ü–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        if (treeData.segments.size > 0) {
            html += this.renderTreeSection('segments', '–°–µ–≥–º–µ–Ω—Ç—ã —Å–µ—Ç–∏', treeData.segments);
        }

        this.elements.tree.innerHTML = html;
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–∏ –¥–µ—Ä–µ–≤–∞
     */
    renderTreeSection(sectionType, title, itemsMap) {
        const totalItems = Array.from(itemsMap.values()).reduce((sum, items) => sum + items.length, 0);

        let html = `
            <div class="tree-section" data-type="${sectionType}">
                <div class="tree-section-header">
                    <h4 class="tree-section-title">${title}</h4>
                    <span class="tree-section-count">${totalItems}</span>
                    <i class="tree-section-toggle fas fa-chevron-down"></i>
                </div>
                <div class="tree-items">
        `;

        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä—É–ø–ø
        itemsMap.forEach((items, type) => {
            if (items.length === 0) return;

            html += `
                <div class="tree-item-group" data-group="${type}">
                    <div class="tree-item-group-header">
                        <span class="tree-item-group-title">${this.getTypeDisplayName(type)}</span>
                        <span class="tree-item-group-count">${items.length}</span>
                    </div>
                    <div class="tree-item-group-items">
            `;

            // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            items.forEach(item => {
                html += this.renderTreeItem(item, sectionType);
            });

            html += `
                    </div>
                </div>
            `;
        });

        html += `
                </div>
            </div>
        `;

        return html;
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–µ—Ä–µ–≤–∞
     */
    renderTreeItem(item, sectionType) {
        const statusClass = item.status || 'unknown';
        const iconClass = this.getItemIcon(item.type, sectionType);

        return `
            <div class="tree-item ${item.type}" 
                 data-id="${item.id}" 
                 data-type="${sectionType}"
                 data-item-type="${item.type}">
                <div class="tree-item-icon">
                    <i class="${iconClass}"></i>
                </div>
                <div class="tree-item-info">
                    <div class="tree-item-name">${item.name}</div>
                    <div class="tree-item-details">${item.ip || item.description || ''}</div>
                </div>
                <div class="tree-item-status ${statusClass}"></div>
            </div>
        `;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞
     */
    getTypeDisplayName(type) {
        const typeNames = {
            router: '–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä—ã',
            switch: '–ö–æ–º–º—É—Ç–∞—Ç–æ—Ä—ã',
            firewall: '–ú–µ–∂—Å–µ—Ç–µ–≤—ã–µ —ç–∫—Ä–∞–Ω—ã',
            server: '–°–µ—Ä–≤–µ—Ä—ã',
            endpoint: '–†–∞–±–æ—á–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏',
            vlan: 'VLAN',
            subnet: '–ü–æ–¥—Å–µ—Ç–∏',
            dmz: 'DMZ',
            unknown: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ'
        };
        return typeNames[type] || type.charAt(0).toUpperCase() + type.slice(1);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    getItemIcon(type, sectionType) {
        const icons = {
            devices: {
                router: 'fas fa-route',
                switch: 'fas fa-network-wired',
                firewall: 'fas fa-shield-alt',
                server: 'fas fa-server',
                endpoint: 'fas fa-desktop',
                unknown: 'fas fa-question-circle'
            },
            segments: {
                vlan: 'fas fa-sitemap',
                subnet: 'fas fa-layer-group',
                dmz: 'fas fa-shield-alt',
                unknown: 'fas fa-circle'
            }
        };

        return icons[sectionType]?.[type] || 'fas fa-circle';
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
     */
    async initializeControllers() {
        try {
            // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–∞
            if (this.state.currentView === 'map') {
                await this.loadMapView();
            } else {
                await this.loadGraphView();
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤:', error);
            this.showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∏–¥–æ–≤ —Ç–æ–ø–æ–ª–æ–≥–∏–∏');
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–∞ –∫–∞—Ä—Ç—ã
     */
    async loadMapView() {
        try {
            // –û—á–∏—Å—Ç–∫–∞ canvas
            this.elements.canvas.innerHTML = `
                <div class="network-map-viewport">
                    <div class="map-canvas" id="map-canvas"></div>
                </div>
            `;

            // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –∫–∞—Ä—Ç—ã
            this.controllers.map = new NetworkTopologyController({
                container: '.topology-canvas'
            });

            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∫–∞—Ä—Ç—ã
            this.setupMapEvents();

            console.log('‚úÖ –í–∏–¥ –∫–∞—Ä—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–∞ –∫–∞—Ä—Ç—ã:', error);
            throw error;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–∞ –≥—Ä–∞—Ñ–∞
     */
    async loadGraphView() {
        try {
            // –û—á–∏—Å—Ç–∫–∞ canvas
            this.elements.canvas.innerHTML = '';

            // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –≥—Ä–∞—Ñ–∞
            this.controllers.graph = new NetworkGraphController({
                container: '.topology-canvas'
            });

            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –≥—Ä–∞—Ñ–∞
            this.setupGraphEvents();

            console.log('‚úÖ –í–∏–¥ –≥—Ä–∞—Ñ–∞ –∑–∞–≥—Ä—É–∂–µ–Ω');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–∞ –≥—Ä–∞—Ñ–∞:', error);
            throw error;
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫–∞—Ä—Ç—ã
     */
    setupMapEvents() {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–∞—Ä—Ç—ã
        // TODO: –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–∞—Ä—Ç—ã
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π –≥—Ä–∞—Ñ–∞
     */
    setupGraphEvents() {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≥—Ä–∞—Ñ–∞
        // TODO: –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –≥—Ä–∞—Ñ–∞
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –¥–µ—Ä–µ–≤—É
     */
    handleTreeClick(e) {
        const treeItem = e.target.closest('.tree-item');
        if (!treeItem) return;

        const itemId = treeItem.dataset.id;
        const itemType = treeItem.dataset.type;
        const deviceType = treeItem.dataset.itemType;

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
        this.selectTreeItem(treeItem);

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫
        this.updateBreadcrumb(itemType, treeItem.querySelector('.tree-item-name').textContent);

        // –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π
        this.showItemDetails(itemId, itemType, deviceType);

        // –§–æ–∫—É—Å –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –≤–∏–¥–µ
        this.focusOnItem(itemId, itemType);
    }

    /**
     * –í—ã–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –¥–µ—Ä–µ–≤–µ
     */
    selectTreeItem(item) {
        // –°–Ω—è—Ç–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤—ã–±–æ—Ä–∞
        $$('.tree-item.selected').forEach(el => {
            removeClass(el, 'selected');
        });

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞
        addClass(item, 'selected');
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫
     */
    updateBreadcrumb(itemType, itemName) {
        if (!this.elements.breadcrumb) return;

        const typeNames = {
            devices: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞',
            segments: '–°–µ–≥–º–µ–Ω—Ç—ã'
        };

        this.elements.breadcrumb.innerHTML = `
            <span class="breadcrumb-item">–¢–æ–ø–æ–ª–æ–≥–∏—è</span>
            <span class="breadcrumb-separator">/</span>
            <span class="breadcrumb-item">${typeNames[itemType] || itemType}</span>
            <span class="breadcrumb-separator">/</span>
            <span class="breadcrumb-item active">${itemName}</span>
        `;
    }

    /**
     * –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    async showItemDetails(itemId, itemType, deviceType) {
        try {
            if (itemType === 'devices') {
                await this.showDeviceDetails(itemId);
            } else if (itemType === 'segments') {
                await this.showSegmentDetails(itemId);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π —ç–ª–µ–º–µ–Ω—Ç–∞:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π —ç–ª–µ–º–µ–Ω—Ç–∞');
        }
    }

    /**
     * –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
     */
    async showDeviceDetails(deviceId) {
        try {
            // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
            if (this.controllers.details) {
                this.controllers.details = null;
            }

            // –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å–≤–æ–π—Å—Ç–≤
            this.elements.propertiesContent.innerHTML = '';

            // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
            this.controllers.details = new DeviceDetailsController({
                container: '.topology-properties .properties-content',
                deviceId: deviceId
            });

            // –ü–æ–∫–∞–∑ –ø–∞–Ω–µ–ª–∏ —Å–≤–æ–π—Å—Ç–≤
            this.showProperties();

            console.log('‚úÖ –î–µ—Ç–∞–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', deviceId);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
            this.elements.propertiesContent.innerHTML = `
                <div class="properties-error">
                    <i class="fas fa-exclamation-triangle"></i>
                    <p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</p>
                </div>
            `;
            this.showProperties();
        }
    }

    /**
     * –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π —Å–µ–≥–º–µ–Ω—Ç–∞
     */
    async showSegmentDetails(segmentId) {
        const segment = this.data.segments.get(segmentId);
        if (!segment) return;

        this.elements.propertiesContent.innerHTML = `
            <div class="properties-section">
                <h5 class="properties-section-title">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–≥–º–µ–Ω—Ç–µ</h5>
                <div class="properties-list">
                    <div class="properties-item">
                        <span class="properties-label">–ù–∞–∑–≤–∞–Ω–∏–µ:</span>
                        <span class="properties-value">${segment.name || segment.label}</span>
                    </div>
                    <div class="properties-item">
                        <span class="properties-label">–¢–∏–ø:</span>
                        <span class="properties-value">${segment.type}</span>
                    </div>
                    <div class="properties-item">
                        <span class="properties-label">–û–ø–∏—Å–∞–Ω–∏–µ:</span>
                        <span class="properties-value">${segment.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
                    </div>
                </div>
            </div>
        `;

        this.showProperties();
    }

    /**
     * –ü–æ–∫–∞–∑ –ø–∞–Ω–µ–ª–∏ —Å–≤–æ–π—Å—Ç–≤
     */
    showProperties() {
        removeClass(this.elements.properties, 'hidden');
        this.state.propertiesVisible = true;
    }

    /**
     * –°–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ —Å–≤–æ–π—Å—Ç–≤
     */
    hideProperties() {
        addClass(this.elements.properties, 'hidden');
        this.state.propertiesVisible = false;

        // –°–Ω—è—Ç–∏–µ –≤—ã–±–æ—Ä–∞ –≤ –¥–µ—Ä–µ–≤–µ
        $$('.tree-item.selected').forEach(el => {
            removeClass(el, 'selected');
        });

        // –°–±—Ä–æ—Å —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫
        this.elements.breadcrumb.innerHTML = '<span class="breadcrumb-item active">–¢–æ–ø–æ–ª–æ–≥–∏—è</span>';
    }

    /**
     * –§–æ–∫—É—Å –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –≤–∏–¥–µ
     */
    focusOnItem(itemId, itemType) {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ–æ–∫—É—Å –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–µ –≤ –∫–∞—Ä—Ç–µ/–≥—Ä–∞—Ñ–µ
        console.log('–§–æ–∫—É—Å –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–µ:', itemId, itemType);
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ sidebar
     */
    toggleSidebar() {
        toggleClass(this.elements.sidebar, 'collapsed');
        this.state.sidebarCollapsed = !this.state.sidebarCollapsed;

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏
        const icon = this.elements.sidebarToggle.querySelector('i');
        if (this.state.sidebarCollapsed) {
            icon.className = 'fas fa-chevron-right';
        } else {
            icon.className = 'fas fa-chevron-left';
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        Storage.set('topologyViewerSidebarCollapsed', this.state.sidebarCollapsed);
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–æ–≤
     */
    async toggleView() {
        try {
            this.showLoading(true, '–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∞...');

            // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            this.state.currentView = this.state.currentView === 'map' ? 'graph' : 'map';

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
            const icon = this.elements.viewToggle.querySelector('i');
            const text = this.elements.viewToggle.querySelector('span');

            if (this.state.currentView === 'map') {
                icon.className = 'fas fa-sitemap';
                text.textContent = '–ì—Ä–∞—Ñ';
                await this.loadMapView();
            } else {
                icon.className = 'fas fa-map';
                text.textContent = '–ö–∞—Ä—Ç–∞';
                await this.loadGraphView();
            }

            this.showLoading(false);
            console.log('‚úÖ –í–∏–¥ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞:', this.state.currentView);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∞:', error);
            this.showError('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∞');
            this.showLoading(false);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
     */
    handleSearch(query) {
        this.state.searchQuery = query.toLowerCase();
        this.filterTree();
    }

    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞
     */
    filterTree() {
        const query = this.state.searchQuery;

        $$('.tree-item').forEach(item => {
            const name = item.querySelector('.tree-item-name')?.textContent.toLowerCase() || '';
            const details = item.querySelector('.tree-item-details')?.textContent.toLowerCase() || '';

            const matches = name.includes(query) || details.includes(query);
            item.style.display = matches ? '' : 'none';
        });

        // –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –≥—Ä—É–ø–ø –∏ —Å–µ–∫—Ü–∏–π
        $$('.tree-item-group').forEach(group => {
            const visibleItems = group.querySelectorAll('.tree-item:not([style*="display: none"])');
            group.style.display = visibleItems.length > 0 ? '' : 'none';
        });

        $$('.tree-section').forEach(section => {
            const visibleGroups = section.querySelectorAll('.tree-item-group:not([style*="display: none"])');
            section.style.display = visibleGroups.length > 0 ? '' : 'none';
        });
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–∏—Å–∫–∞
     */
    toggleSearchClear(query) {
        if (this.elements.searchClear) {
            this.elements.searchClear.style.display = query ? 'flex' : 'none';
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
     */
    clearSearch() {
        this.elements.searchInput.value = '';
        this.elements.headerSearch.value = '';
        this.state.searchQuery = '';
        this.toggleSearchClear('');
        this.filterTree();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
     */
    async refresh() {
        try {
            // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const icon = this.elements.refreshBtn.querySelector('i');
            addClass(icon, 'fa-spin');

            await this.loadData();

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–∏–¥–∞
            if (this.state.currentView === 'map') {
                await this.loadMapView();
            } else {
                await this.loadGraphView();
            }

            removeClass(icon, 'fa-spin');
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Ç–æ–ø–æ–ª–æ–≥–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
            this.showError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');

            const icon = this.elements.refreshBtn.querySelector('i');
            removeClass(icon, 'fa-spin');
        }
    }

    /**
     * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    zoomIn() {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∞
        console.log('Zoom In');
    }

    zoomOut() {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–º–µ–Ω—å—à–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∞
        console.log('Zoom Out');
    }

    fitToScreen() {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–ø–∏—Å—ã–≤–∞–Ω–∏–µ –≤ —ç–∫—Ä–∞–Ω
        console.log('Fit to Screen');
    }

    centerView() {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
        console.log('Center View');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
     */
    handleResize() {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        console.log('Handle Resize');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
     */
    handleKeyboard(e) {
        // Ctrl+F - —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–∏—Å–∫
        if (e.ctrlKey && e.key === 'f') {
            e.preventDefault();
            this.elements.searchInput?.focus();
        }

        // Escape - –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–µ–π
        if (e.key === 'Escape') {
            if (this.state.propertiesVisible) {
                this.hideProperties();
            }
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    startAutoRefresh() {
        if (this.refreshTimer) {
            clearInterval(this.refreshTimer);
        }

        this.refreshTimer = setInterval(() => {
            if (this.state.isInitialized && !this.state.isLoading) {
                this.refresh();
            }
        }, this.options.refreshInterval);

        console.log(`üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ (${this.options.refreshInterval}ms)`);
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    stopAutoRefresh() {
        if (this.refreshTimer) {
            clearInterval(this.refreshTimer);
            this.refreshTimer = null;
            console.log('‚èπÔ∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        }
    }

    /**
     * –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    showLoading(show, message = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
        this.state.isLoading = show;

        if (show) {
            this.elements.loading.style.display = 'flex';
            this.elements.empty.style.display = 'none';
            if (message && this.elements.loading.querySelector('.topology-loading-text')) {
                this.elements.loading.querySelector('.topology-loading-text').textContent = message;
            }
        } else {
            this.elements.loading.style.display = 'none';
        }
    }

    /**
     * –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
     */
    showError(message) {
        console.error('Topology Viewer Error:', message);

        // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (window.IPRoastApp && window.IPRoastApp.showNotification) {
            window.IPRoastApp.showNotification(message, NOTIFICATION_TYPES.ERROR);
        }
    }

    /**
     * –≠–º–∏—Å—Å–∏—è —Å–æ–±—ã—Ç–∏–π
     */
    emit(eventName, data = {}) {
        const event = new CustomEvent(`topologyViewer:${eventName}`, {
            detail: { ...data, controller: this }
        });
        document.dispatchEvent(event);
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
     */
    destroy() {
        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        this.stopAutoRefresh();

        // –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
        Object.values(this.controllers).forEach(controller => {
            if (controller && typeof controller.destroy === 'function') {
                controller.destroy();
            }
        });

        // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.state.isInitialized = false;
        this.data.devices.clear();
        this.data.segments.clear();
        this.data.connections.clear();

        console.log('üóëÔ∏è Topology Viewer —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

// –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    const container = document.querySelector('#topology-viewer-container');
    if (container) {
        window.topologyViewer = new TopologyViewerController({
            container: '#topology-viewer-container'
        });
    }
});
