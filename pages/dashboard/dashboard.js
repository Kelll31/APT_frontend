/**
 * pages/dashboard/dashboard.js - IP Roast Enterprise Dashboard JavaScript
 * –í–µ—Ä—Å–∏—è: 4.0
 * –û–ø–∏—Å–∞–Ω–∏–µ: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */

class IPRoastDashboard {
    constructor() {
        this.config = {
            updateInterval: 30000, // 30 —Å–µ–∫—É–Ω–¥
            chartAnimationDuration: 750,
            maxActivityItems: 50,
            autoRefresh: true,
            theme: 'light'
        };

        this.state = {
            isLoading: false,
            lastUpdate: null,
            selectedPeriod: '24h',
            charts: {},
            realTimeData: {},
            connectionStatus: 'connected'
        };

        this.eventListeners = new Map();
        this.updateTimer = null;
        this.chartInstances = new Map();

        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     */
    async init() {
        try {
            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IP Roast Dashboard...');

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            await this.loadDependencies();

            // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã DOM
            this.findElements();

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.setupEventListeners();

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await this.loadInitialData();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
            this.initializeCharts();

            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            this.startAutoRefresh();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∞–ª-—Ç–∞–π–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            this.initializeRealTime();

            console.log('‚úÖ Dashboard —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Dashboard:', error);
            this.showErrorNotification('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
     */
    async loadDependencies() {
        // Chart.js —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        if (typeof Chart === 'undefined') {
            console.warn('‚ö†Ô∏è Chart.js –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º...');
            await this.loadScript('https://cdn.jsdelivr.net/npm/chart.js');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        if (typeof moment !== 'undefined') {
            Chart.register(moment);
        }

        console.log('üì¶ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    }

    /**
     * –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM
     */
    findElements() {
        this.elements = {
            // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            dashboard: document.querySelector('.dashboard'),
            header: document.querySelector('.dashboard-header'),
            controls: document.querySelector('.dashboard-controls'),

            // –ö–æ–Ω—Ç—Ä–æ–ª—ã
            autoRefreshToggle: document.querySelector('.toggle-switch'),
            periodSelector: document.querySelector('.period-dropdown'),
            refreshButton: document.querySelector('.refresh-button'),

            // –ú–µ—Ç—Ä–∏–∫–∏
            metricsGrid: document.querySelector('.metrics-grid'),
            metricCards: document.querySelectorAll('.metric-card'),

            // –ì—Ä–∞—Ñ–∏–∫–∏
            networkChart: document.querySelector('#network-activity-chart'),
            vulnerabilityChart: document.querySelector('#vulnerability-chart'),
            topologyChart: document.querySelector('#topology-chart'),

            // –¢–∞–±–ª–∏—Ü—ã
            scansTable: document.querySelector('#recent-scans-table'),
            devicesTable: document.querySelector('#active-devices-table'),

            // –õ–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            activityFeed: document.querySelector('.activity-feed'),

            // –°—Ç–∞—Ç—É—Å —ç–ª–µ–º–µ–Ω—Ç—ã
            systemStatus: document.querySelector('.system-status'),
            statusIndicator: document.querySelector('.status-indicator'),
            lastUpdate: document.querySelector('.last-update-time')
        };

        console.log('üîç DOM —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if (this.elements.autoRefreshToggle) {
            this.elements.autoRefreshToggle.addEventListener('click', () => {
                this.toggleAutoRefresh();
            });
        }

        // –°–µ–ª–µ–∫—Ç–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
        if (this.elements.periodSelector) {
            this.elements.periodSelector.addEventListener('change', (e) => {
                this.changePeriod(e.target.value);
            });
        }

        // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if (this.elements.refreshButton) {
            this.elements.refreshButton.addEventListener('click', () => {
                this.manualRefresh();
            });
        }

        // –ö–∞—Ä—Ç–æ—á–∫–∏ –º–µ—Ç—Ä–∏–∫
        this.elements.metricCards.forEach(card => {
            card.addEventListener('click', (e) => {
                const metric = card.dataset.metric;
                this.showMetricDetails(metric);
            });
        });

        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        window.addEventListener('resize', this.debounce(() => {
            this.handleResize();
        }, 250));

        document.addEventListener('visibilitychange', () => {
            this.handleVisibilityChange();
        });

        // –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        document.addEventListener('dashboard-theme-changed', (e) => {
            this.handleThemeChange(e.detail.theme);
        });

        console.log('‚ö° –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async loadInitialData() {
        this.showLoading(true);

        try {
            // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—É–¥—É—Ç API –≤—ã–∑–æ–≤—ã)
            const [metricsData, chartsData, tableData, activityData] = await Promise.all([
                this.fetchMetricsData(),
                this.fetchChartsData(),
                this.fetchTableData(),
                this.fetchActivityData()
            ]);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.updateMetrics(metricsData);
            this.updateChartData(chartsData);
            this.updateTables(tableData);
            this.updateActivityFeed(activityData);

            this.state.lastUpdate = new Date();
            this.updateLastUpdateTime();

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            this.showErrorNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
        } finally {
            this.showLoading(false);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ (–∑–∞–≥–ª—É—à–∫–∞)
     */
    async fetchMetricsData() {
        // –ò–º–∏—Ç–∞—Ü–∏—è API –≤—ã–∑–æ–≤–∞
        await this.delay(500);

        return {
            security: {
                score: Math.floor(Math.random() * 15) + 85,
                trend: Math.floor(Math.random() * 10) - 5,
                status: '–°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—â–µ–Ω–∞'
            },
            network: {
                devices: Math.floor(Math.random() * 50) + 200,
                trend: Math.floor(Math.random() * 20) - 10,
                status: '–≤ —Å–µ—Ç–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ'
            },
            vulnerabilities: {
                critical: Math.floor(Math.random() * 20) + 5,
                trend: Math.floor(Math.random() * 10) - 5,
                status: '—Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è'
            },
            scans: {
                completed: Math.floor(Math.random() * 30) + 70,
                trend: Math.floor(Math.random() * 20) + 5,
                status: '–∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è'
            }
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)
     */
    async fetchChartsData() {
        await this.delay(300);

        const hours = Array.from({ length: 24 }, (_, i) => {
            const hour = new Date();
            hour.setHours(hour.getHours() - (23 - i));
            return hour.toISOString();
        });

        return {
            networkActivity: {
                labels: hours,
                datasets: [
                    {
                        label: '–í—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫',
                        data: hours.map(() => Math.floor(Math.random() * 1000) + 500),
                        borderColor: '#3B82F6',
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        tension: 0.4
                    },
                    {
                        label: '–ò—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫',
                        data: hours.map(() => Math.floor(Math.random() * 800) + 300),
                        borderColor: '#10B981',
                        backgroundColor: 'rgba(16, 185, 129, 0.1)',
                        tension: 0.4
                    },
                    {
                        label: '–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
                        data: hours.map(() => Math.floor(Math.random() * 50) + 10),
                        borderColor: '#EF4444',
                        backgroundColor: 'rgba(239, 68, 68, 0.1)',
                        tension: 0.4
                    }
                ]
            },
            vulnerabilities: {
                labels: ['–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ', '–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç', '–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç', '–ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç'],
                datasets: [{
                    data: [12, 45, 128, 234],
                    backgroundColor: ['#EF4444', '#F59E0B', '#06B6D4', '#10B981'],
                    borderWidth: 0
                }]
            }
        };
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
     */
    initializeCharts() {
        // –ì—Ä–∞—Ñ–∏–∫ —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if (this.elements.networkChart) {
            this.initNetworkActivityChart();
        }

        // –ì—Ä–∞—Ñ–∏–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        if (this.elements.vulnerabilityChart) {
            this.initVulnerabilityChart();
        }

        // –ì—Ä–∞—Ñ–∏–∫ —Ç–æ–ø–æ–ª–æ–≥–∏–∏ —Å–µ—Ç–∏
        if (this.elements.topologyChart) {
            this.initTopologyChart();
        }

        console.log('üìä –ì—Ä–∞—Ñ–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    initNetworkActivityChart() {
        const ctx = this.elements.networkChart.getContext('2d');

        const config = {
            type: 'line',
            data: {
                labels: [],
                datasets: []
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                interaction: {
                    mode: 'index',
                    intersect: false
                },
                plugins: {
                    legend: {
                        position: 'top',
                        labels: {
                            usePointStyle: true,
                            padding: 20
                        }
                    },
                    tooltip: {
                        backgroundColor: 'rgba(0, 0, 0, 0.8)',
                        titleColor: '#fff',
                        bodyColor: '#fff',
                        borderColor: '#3B82F6',
                        borderWidth: 1,
                        cornerRadius: 8,
                        displayColors: true
                    }
                },
                scales: {
                    x: {
                        type: 'time',
                        time: {
                            unit: 'hour',
                            displayFormats: {
                                hour: 'HH:mm'
                            }
                        },
                        title: {
                            display: true,
                            text: '–í—Ä–µ–º—è'
                        },
                        grid: {
                            color: 'rgba(0, 0, 0, 0.1)'
                        }
                    },
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: '–¢—Ä–∞—Ñ–∏–∫ (Mbps)'
                        },
                        grid: {
                            color: 'rgba(0, 0, 0, 0.1)'
                        }
                    }
                },
                elements: {
                    point: {
                        radius: 4,
                        hoverRadius: 6
                    },
                    line: {
                        borderWidth: 2
                    }
                },
                animation: {
                    duration: this.config.chartAnimationDuration,
                    easing: 'easeInOutQuart'
                }
            }
        };

        this.chartInstances.set('networkActivity', new Chart(ctx, config));
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
     */
    initVulnerabilityChart() {
        const ctx = this.elements.vulnerabilityChart.getContext('2d');

        const config = {
            type: 'doughnut',
            data: {
                labels: [],
                datasets: []
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'right',
                        labels: {
                            padding: 20,
                            usePointStyle: true
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function (context) {
                                const label = context.label || '';
                                const value = context.parsed;
                                const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                const percentage = ((value / total) * 100).toFixed(1);
                                return `${label}: ${value} (${percentage}%)`;
                            }
                        }
                    }
                },
                cutout: '60%',
                animation: {
                    animateRotate: true,
                    duration: this.config.chartAnimationDuration
                }
            }
        };

        this.chartInstances.set('vulnerability', new Chart(ctx, config));
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
     */
    updateChartData(chartsData) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        const networkChart = this.chartInstances.get('networkActivity');
        if (networkChart && chartsData.networkActivity) {
            networkChart.data = chartsData.networkActivity;
            networkChart.update('none');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        const vulnChart = this.chartInstances.get('vulnerability');
        if (vulnChart && chartsData.vulnerabilities) {
            vulnChart.data = chartsData.vulnerabilities;
            vulnChart.update('none');
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
     */
    updateMetrics(metricsData) {
        this.elements.metricCards.forEach(card => {
            const metricType = card.dataset.metric;
            const metric = metricsData[metricType];

            if (metric) {
                const valueElement = card.querySelector('.metric-value');
                const trendElement = card.querySelector('.metric-trend');
                const descElement = card.querySelector('.metric-description');

                if (valueElement) {
                    this.animateValue(valueElement, parseInt(valueElement.textContent), metric.score || metric.devices || metric.critical || metric.completed);
                }

                if (trendElement) {
                    this.updateTrend(trendElement, metric.trend);
                }

                if (descElement) {
                    descElement.textContent = metric.status;
                }
            }
        });
    }

    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
     */
    animateValue(element, start, end) {
        const duration = 1000;
        const startTime = performance.now();

        const animate = (currentTime) => {
            const elapsed = currentTime - startTime;
            const progress = Math.min(elapsed / duration, 1);

            const current = Math.round(start + (end - start) * this.easeOutQuart(progress));
            element.textContent = current.toLocaleString();

            if (progress < 1) {
                requestAnimationFrame(animate);
            }
        };

        requestAnimationFrame(animate);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Ç—Ä–µ–Ω–¥–∞
     */
    updateTrend(element, value) {
        const icon = element.querySelector('.trend-icon');
        const text = element.querySelector('.trend-text');

        element.className = 'metric-trend';

        if (value > 0) {
            element.classList.add('trend-positive');
            if (icon) icon.textContent = '‚Üó';
            if (text) text.textContent = `+${value}% –∑–∞ –Ω–µ–¥–µ–ª—é`;
        } else if (value < 0) {
            element.classList.add('trend-negative');
            if (icon) icon.textContent = '‚Üò';
            if (text) text.textContent = `${value}% –∑–∞ –Ω–µ–¥–µ–ª—é`;
        } else {
            element.classList.add('trend-neutral');
            if (icon) icon.textContent = '‚Üí';
            if (text) text.textContent = '–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π';
        }
    }

    /**
     * –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
     */
    startAutoRefresh() {
        if (this.config.autoRefresh) {
            this.updateTimer = setInterval(() => {
                this.refreshData();
            }, this.config.updateInterval);

            console.log(`üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ (${this.config.updateInterval}ms)`);
        }
    }

    stopAutoRefresh() {
        if (this.updateTimer) {
            clearInterval(this.updateTimer);
            this.updateTimer = null;
            console.log('‚èπÔ∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        }
    }

    toggleAutoRefresh() {
        this.config.autoRefresh = !this.config.autoRefresh;
        const toggle = this.elements.autoRefreshToggle;

        if (toggle) {
            toggle.classList.toggle('active', this.config.autoRefresh);
        }

        if (this.config.autoRefresh) {
            this.startAutoRefresh();
        } else {
            this.stopAutoRefresh();
        }

        this.showNotification(
            this.config.autoRefresh ? '–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ' : '–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ',
            'info'
        );
    }

    /**
     * –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
     */
    async manualRefresh() {
        const button = this.elements.refreshButton;
        if (button) {
            button.classList.add('loading');
            button.disabled = true;
        }

        try {
            await this.refreshData();
            this.showNotification('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
        } finally {
            if (button) {
                button.classList.remove('loading');
                button.disabled = false;
            }
        }
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
     */
    async refreshData() {
        if (this.state.isLoading) {
            console.log('‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ');
            return;
        }

        try {
            this.state.isLoading = true;

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            const [metricsData, chartsData] = await Promise.all([
                this.fetchMetricsData(),
                this.fetchChartsData()
            ]);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.updateMetrics(metricsData);
            this.updateChartData(chartsData);

            this.state.lastUpdate = new Date();
            this.updateLastUpdateTime();

        } catch (error) {
            throw error;
        } finally {
            this.state.isLoading = false;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    updateLastUpdateTime() {
        if (this.elements.lastUpdate && this.state.lastUpdate) {
            const timeString = this.state.lastUpdate.toLocaleTimeString('ru-RU');
            this.elements.lastUpdate.textContent = timeString;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    handleVisibilityChange() {
        if (document.hidden) {
            // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫—Ä—ã—Ç–∞ - –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            this.stopAutoRefresh();
        } else {
            // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–∏–¥–∏–º–∞ - –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            if (this.config.autoRefresh) {
                this.startAutoRefresh();
                this.refreshData();
            }
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
     */
    handleResize() {
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
        this.chartInstances.forEach(chart => {
            chart.resize();
        });
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    showNotification(message, type = 'info') {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if (window.notify) {
            window.notify[type](message);
        } else {
            // Fallback - –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            console.log(`üì¢ ${type.toUpperCase()}: ${message}`);
        }
    }

    showErrorNotification(message) {
        this.showNotification(message, 'error');
    }

    /**
     * –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    showLoading(show) {
        if (this.elements.dashboard) {
            this.elements.dashboard.classList.toggle('loading', show);
        }
    }

    /**
     * –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
     */
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    easeOutQuart(t) {
        return 1 - (--t) * t * t * t;
    }

    async loadScript(src) {
        return new Promise((resolve, reject) => {
            const script = document.createElement('script');
            script.src = src;
            script.onload = resolve;
            script.onerror = reject;
            document.head.appendChild(script);
        });
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
     */
    destroy() {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
        this.stopAutoRefresh();

        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        this.chartInstances.forEach(chart => {
            chart.destroy();
        });
        this.chartInstances.clear();

        // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.eventListeners.clear();

        console.log('üóëÔ∏è Dashboard —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä dashboard —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ dashboard
    if (document.querySelector('.dashboard')) {
        window.ipRoastDashboard = new IPRoastDashboard();

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (window.ipRoastApp) {
            window.ipRoastApp.dashboard = window.ipRoastDashboard;
        }
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å
window.IPRoastDashboard = IPRoastDashboard;

console.log('‚úÖ Dashboard –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω');
