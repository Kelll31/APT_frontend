/**
 * PageLoader.js - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è IP Roast Enterprise 4.0
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π HTML —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
 * 
 * –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
 * - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ ID —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å sidebar –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
 * - –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
 * - –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—É—Ç–µ–π
 */
class PageLoader {
    constructor() {
        this.currentPage = null;
        this.pageCache = new Map();
        this.loadingQueue = new Set();
        this.elements = {
            container: null,
            content: null,
            loading: null
        };
        this.config = {
            pagesPath: '../pages',  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±—Ä–∞–Ω '../'
            cachePages: true,
            loadTimeout: 10000,
            enableTransitions: true
        };
        this.eventListeners = new Map();
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
     */
    init() {
        this.findElements();
        this.setupEventListeners();
        console.log('üìÑ PageLoader –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)');
    }

    /**
     * –ü–æ–∏—Å–∫ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–û
     */
    findElements() {
        // –ò—â–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        this.elements.container = document.querySelector('.page-container') ||
            document.getElementById('page-container') ||
            document.querySelector('.main-content .page-container');

        // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        if (!this.elements.container) {
            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            const mainContent = document.querySelector('.main-content');
            if (mainContent) {
                this.elements.container = document.createElement('div');
                this.elements.container.className = 'page-container';
                this.elements.container.id = 'page-container';
                mainContent.appendChild(this.elements.container);
                console.log('üìÑ –°–æ–∑–¥–∞–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π page-container');
            }
        }

        // –ò—â–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        this.elements.content = document.querySelector('.page-content') ||
            document.getElementById('page-content');

        // –°–æ–∑–¥–∞–µ–º page-content –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!this.elements.content && this.elements.container) {
            this.elements.content = document.createElement('div');
            this.elements.content.className = 'page-content';
            this.elements.content.id = 'page-content';
            this.elements.container.appendChild(this.elements.content);
            console.log('üìÑ –°–æ–∑–¥–∞–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π page-content');
        }

        // –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º loading —ç–ª–µ–º–µ–Ω—Ç
        this.elements.loading = document.querySelector('.page-loading') ||
            document.getElementById('page-loading');

        if (!this.elements.loading && this.elements.container) {
            this.elements.loading = document.createElement('div');
            this.elements.loading.className = 'page-loading';
            this.elements.loading.id = 'page-loading';
            this.elements.loading.innerHTML = `
                <div class="loading-spinner"></div>
                <div class="loading-text">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...</div>
            `;
            this.elements.container.appendChild(this.elements.loading);
            console.log('üìÑ –°–æ–∑–¥–∞–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π page-loading');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã
        const elementsFound = {
            container: !!this.elements.container,
            content: !!this.elements.content,
            loading: !!this.elements.loading
        };

        console.log('üîç PageLoader —ç–ª–µ–º–µ–Ω—Ç—ã:', elementsFound);

        if (!this.elements.container || !this.elements.content) {
            console.error('‚ùå PageLoader: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            throw new Error('PageLoader: –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π - –ò–°–ü–†–ê–í–õ–ï–ù–û
     */
    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
        window.addEventListener('popstate', (e) => {
            if (e.state && e.state.page) {
                this.loadPage(e.state.page, false);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —Å—Å—ã–ª–∫–∞–º - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        document.addEventListener('click', (e) => {
            const link = e.target.closest('a[href^="#"], a[data-page]');
            if (link) {
                e.preventDefault();
                let pageId;

                // –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
                if (link.dataset.page) {
                    pageId = link.dataset.page;
                } else if (link.getAttribute('href').startsWith('#')) {
                    pageId = link.getAttribute('href').substr(1);
                }

                if (pageId && this.isValidPageId(pageId)) {
                    console.log(`üîó –ö–ª–∏–∫ –ø–æ —Å—Å—ã–ª–∫–µ, –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${pageId}`);
                    this.loadPage(pageId);
                }
            }
        });

        // –°–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è —Å–æ–±—ã—Ç–∏–π –æ—Ç SidebarManager - –ù–û–í–û–ï
        if (window.sidebarManager) {
            window.sidebarManager.on('navigate', (pageId) => {
                console.log(`üîó –ù–∞–≤–∏–≥–∞—Ü–∏—è –æ—Ç sidebar: ${pageId}`);
                this.loadPage(pageId);
            });
        }

        // –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ - –ù–û–í–û–ï
        document.addEventListener('navigate', (e) => {
            if (e.detail && e.detail.page) {
                console.log(`üîó –ù–∞–≤–∏–≥–∞—Ü–∏—è –æ—Ç —Å–æ–±—ã—Ç–∏—è: ${e.detail.page}`);
                this.loadPage(e.detail.page);
            }
        });

        console.log('‚ö° PageLoader –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –£–õ–£–ß–®–ï–ù–ù–´–ô
     */
    async loadPage(pageId, updateHistory = true) {
        if (!pageId || !this.isValidPageId(pageId)) {
            console.error(`‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${pageId}`);
            this.showErrorPage(new Error(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${pageId}`), pageId);
            return;
        }

        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (this.currentPage === pageId && !this.loadingQueue.has(pageId)) {
            console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageId} —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞`);
            return;
        }

        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (this.loadingQueue.has(pageId)) {
            console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageId} —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è`);
            return;
        }

        console.log(`üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${pageId}`);
        this.loadingQueue.add(pageId);

        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            this.showLoading();

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            let pageData;
            if (this.config.cachePages && this.pageCache.has(pageId)) {
                pageData = this.pageCache.get(pageId);
                console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –∫—ç—à–∞: ${pageId}`);
            } else {
                pageData = await this.fetchPage(pageId);
                if (this.config.cachePages) {
                    this.pageCache.set(pageId, pageData);
                }
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            await this.setPageContent(pageData);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –±—Ä–∞—É–∑–µ—Ä–∞
            if (updateHistory) {
                this.updateBrowserHistory(pageId, pageData.title);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            this.currentPage = pageId;

            // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            this.hideLoading();

            // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            this.emit('pageLoaded', {
                id: pageId,
                title: pageData.title,
                data: pageData
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ header –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if (window.headerManager) {
                window.headerManager.updatePageTitle(pageData.title);
            }

            console.log(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${pageId}`);

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageId}:`, error);
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—à–∏–±–∫–∏
            this.showErrorPage(error, pageId);
            // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—à–∏–±–∫–∏
            this.emit('pageError', { id: pageId, error: error });
        } finally {
            this.loadingQueue.delete(pageId);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ HTML —Ñ–∞–π–ª–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async fetchPage(pageId) {
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—É—Ç–µ–π
        const possiblePaths = [
            `${this.config.pagesPath}/${pageId}/${pageId}.html`,
            `${this.config.pagesPath}/${pageId}/index.html`,
            `./pages/${pageId}/index.html`,
            `./pages/${pageId}.html`,
            `pages/${pageId}/index.html`,
            `pages/${pageId}.html`
        ];

        let lastError;
        for (const pageUrl of possiblePaths) {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => {
                controller.abort();
            }, this.config.loadTimeout);

            try {
                console.log(`üåê –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${pageUrl}`);
                const response = await fetch(pageUrl, {
                    signal: controller.signal,
                    method: 'GET',
                    headers: {
                        'Accept': 'text/html',
                        'Cache-Control': 'no-cache'
                    }
                });

                clearTimeout(timeoutId);

                if (response.ok) {
                    const html = await response.text();
                    console.log(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${pageUrl}`);

                    // –ü–∞—Ä—Å–∏–º HTML –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º metadata
                    const pageData = this.parsePageHTML(html, pageId);

                    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã (CSS, JS)
                    await this.loadPageResources(pageId);

                    return pageData;
                }
            } catch (error) {
                clearTimeout(timeoutId);
                lastError = error;
                console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ${pageUrl}:`, error.message);
            }
        }

        // –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –ø—É—Ç—å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        console.warn(`‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É`);
        return this.createFallbackPage(pageId);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –ù–û–í–û–ï
     */
    createFallbackPage(pageId) {
        const pageTitle = this.getPageTitle(pageId);
        return {
            id: pageId,
            title: pageTitle,
            description: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageTitle}`,
            content: `
                <div class="page-placeholder">
                    <h2>${pageTitle}</h2>
                    <p>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã "${pageTitle}" –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ.</p>
                    <p>ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã: <code>${pageId}</code></p>
                    <div class="placeholder-actions">
                        <button onclick="window.location.reload()" class="btn btn--primary">
                            –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                        </button>
                        <button onclick="window.pageLoader?.loadPage('dashboard')" class="btn btn--secondary">
                            –ù–∞ –≥–ª–∞–≤–Ω—É—é
                        </button>
                    </div>
                </div>
                <style>
                    .page-placeholder {
                        text-align: center;
                        padding: 60px 20px;
                        max-width: 600px;
                        margin: 0 auto;
                    }
                    .page-placeholder h2 {
                        color: var(--color-text);
                        margin-bottom: 16px;
                    }
                    .page-placeholder p {
                        color: var(--color-text-secondary);
                        margin-bottom: 12px;
                    }
                    .placeholder-actions {
                        margin-top: 32px;
                    }
                    .placeholder-actions .btn {
                        margin: 0 8px;
                    }
                </style>
            `,
            timestamp: Date.now()
        };
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
     */
    parsePageHTML(html, pageId) {
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        const mainContent = doc.querySelector('main') || doc.body;
        const content = mainContent ? mainContent.innerHTML : html;

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        const titleElement = doc.querySelector('title');
        const title = titleElement ? titleElement.textContent : this.getPageTitle(pageId);

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        const descriptionMeta = doc.querySelector('meta[name="description"]');
        const description = descriptionMeta ? descriptionMeta.getAttribute('content') : '';

        return {
            id: pageId,
            title: title,
            description: description,
            content: content,
            timestamp: Date.now()
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ ID - –ù–û–í–û–ï
     */
    getPageTitle(pageId) {
        const titles = {
            'dashboard': '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
            'scanner': '–ú–æ–¥—É–ª—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
            'attack-constructor': '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∞—Ç–∞–∫',
            'network-topology': '–¢–æ–ø–æ–ª–æ–≥–∏—è —Å–µ—Ç–∏',
            'reports': '–û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
            'settings': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã',
            'monitoring': '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥',
            'analytics': '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
            'security': '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
            'logs': '–ñ—É—Ä–Ω–∞–ª—ã —Å–æ–±—ã—Ç–∏–π'
        };
        return titles[pageId] || `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageId}`;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –£–õ–£–ß–®–ï–ù–ù–ê–Ø
     */
    isValidPageId(pageId) {
        if (!pageId || typeof pageId !== 'string') {
            return false;
        }

        // –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –¥–ª–∏–Ω–∞
        const validPattern = /^[a-zA-Z0-9_-]+$/;
        const maxLength = 50;

        return validPattern.test(pageId) && pageId.length <= maxLength;
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
     */
    async loadPageResources(pageId) {
        const promises = [];

        // –ó–∞–≥—Ä—É–∂–∞–µ–º CSS —Ñ–∞–π–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const cssUrl = `${this.config.pagesPath}/${pageId}/${pageId}.css`;
        promises.push(this.loadCSS(cssUrl, pageId));

        // –ó–∞–≥—Ä—É–∂–∞–µ–º JS —Ñ–∞–π–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const jsUrl = `${this.config.pagesPath}/${pageId}/${pageId}.js`;
        promises.push(this.loadJS(jsUrl, pageId));

        try {
            await Promise.allSettled(promises);
            console.log(`üì¶ –†–µ—Å—É—Ä—Å—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageId} –∑–∞–≥—Ä—É–∂–µ–Ω—ã`);
        } catch (error) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageId}:`, error);
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –≤ —Ä–µ—Å—É—Ä—Å–∞—Ö
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ CSS —Ñ–∞–π–ª–∞ - –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
     */
    async loadCSS(url, pageId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç CSS
        const existingLink = document.querySelector(`link[data-page="${pageId}"]`);
        if (existingLink) {
            return Promise.resolve();
        }

        return new Promise((resolve, reject) => {
            const link = document.createElement('link');
            link.rel = 'stylesheet';
            link.href = url;
            link.dataset.page = pageId;
            link.onload = () => {
                console.log(`‚úÖ CSS –∑–∞–≥—Ä—É–∂–µ–Ω: ${url}`);
                resolve();
            };
            link.onerror = () => {
                console.warn(`‚ö†Ô∏è CSS –Ω–µ –Ω–∞–π–¥–µ–Ω: ${url}`);
                resolve(); // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ CSS
            };
            document.head.appendChild(link);
        });
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ JS —Ñ–∞–π–ª–∞ - –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
     */
    async loadJS(url, pageId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç
        const existingScript = document.querySelector(`script[data-page="${pageId}"]`);
        if (existingScript) {
            return Promise.resolve();
        }

        return new Promise((resolve, reject) => {
            const script = document.createElement('script');
            script.src = url;
            script.dataset.page = pageId;
            script.defer = true;
            script.onload = () => {
                console.log(`‚úÖ JS –∑–∞–≥—Ä—É–∂–µ–Ω: ${url}`);
                resolve();
            };
            script.onerror = () => {
                console.warn(`‚ö†Ô∏è JS –Ω–µ –Ω–∞–π–¥–µ–Ω: ${url}`);
                resolve(); // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ JS
            };
            document.head.appendChild(script);
        });
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –£–õ–£–ß–®–ï–ù–ù–ê–Ø
     */
    async setPageContent(pageData) {
        if (!this.elements.content) {
            throw new Error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –ê–Ω–∏–º–∞—Ü–∏—è –≤—ã—Ö–æ–¥–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã –ø–µ—Ä–µ—Ö–æ–¥—ã)
        if (this.config.enableTransitions && this.currentPage) {
            this.elements.content.classList.add('page-transition-exit');
            await this.delay(150);
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        this.elements.content.innerHTML = pageData.content;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç—ã –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        await this.initializePageScripts(pageData.id);

        // –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ö–æ–¥–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã –ø–µ—Ä–µ—Ö–æ–¥—ã)
        if (this.config.enableTransitions) {
            this.elements.content.classList.remove('page-transition-exit');
            this.elements.content.classList.add('page-transition-enter');
            await this.delay(50);
            this.elements.content.classList.add('page-transition-enter-active');
            this.elements.content.classList.remove('page-transition-enter');
            await this.delay(300);
            this.elements.content.classList.remove('page-transition-enter-active');
        }

        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤ –Ω–∞—á–∞–ª–æ
        if (this.elements.content.scrollTo) {
            this.elements.content.scrollTo(0, 0);
        } else {
            this.elements.content.scrollTop = 0;
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ - –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
     */
    async initializePageScripts(pageId) {
        // –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const initFunctionName = `init${pageId.charAt(0).toUpperCase() + pageId.slice(1).replace(/-(.)/g, (_, letter) => letter.toUpperCase())}`;

        if (typeof window[initFunctionName] === 'function') {
            try {
                await window[initFunctionName]();
                console.log(`‚úÖ –°–∫—Ä–∏–ø—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageId} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã`);
            } catch (error) {
                console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageId}:`, error);
            }
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        this.initializePageComponents();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ - –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
     */
    initializePageComponents() {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        const interactiveElements = this.elements.content.querySelectorAll('[data-component]');
        interactiveElements.forEach(element => {
            const componentType = element.dataset.component;
            console.log(`üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${componentType}`);
        });
    }

    /**
     * –ü–æ–∫–∞–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - –£–õ–£–ß–®–ï–ù–ù–´–ô
     */
    showLoading() {
        if (this.elements.loading) {
            this.elements.loading.classList.add('active');
            this.elements.loading.style.display = 'flex';
        }
    }

    /**
     * –°–∫—Ä—ã—Ç–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - –£–õ–£–ß–®–ï–ù–ù–´–ô
     */
    hideLoading() {
        if (this.elements.loading) {
            this.elements.loading.classList.remove('active');
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
            setTimeout(() => {
                if (this.elements.loading && !this.elements.loading.classList.contains('active')) {
                    this.elements.loading.style.display = 'none';
                }
            }, 300);
        }
    }

    /**
     * –ü–æ–∫–∞–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—à–∏–±–∫–∏ - –£–õ–£–ß–®–ï–ù–ù–ê–Ø
     */
    showErrorPage(error, pageId) {
        const errorHTML = `
            <div class="page-error">
                <div class="error-icon">‚ö†Ô∏è</div>
                <h2 class="error-title">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã</h2>
                <p class="error-message">${error.message}</p>
                <div class="error-details">
                    <p><strong>–°—Ç—Ä–∞–Ω–∏—Ü–∞:</strong> ${pageId}</p>
                    <p><strong>–í—Ä–µ–º—è:</strong> ${new Date().toLocaleString()}</p>
                </div>
                <div class="error-actions">
                    <button onclick="window.location.reload()" class="error-btn">
                        –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    </button>
                    <button onclick="window.pageLoader?.loadPage('dashboard')" class="error-btn secondary">
                        –ù–∞ –≥–ª–∞–≤–Ω—É—é
                    </button>
                    <button onclick="window.pageLoader?.loadPage('${pageId}')" class="error-btn secondary">
                        –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
                    </button>
                </div>
            </div>
        `;

        if (this.elements.content) {
            this.elements.content.innerHTML = errorHTML;
        }

        this.hideLoading();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞ - –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
     */
    updateBrowserHistory(pageId, title) {
        if (window.history && window.history.pushState) {
            window.history.pushState(
                { page: pageId },
                title,
                `#${pageId}`
            );
            document.title = `${title} - IP Roast Enterprise`;
        }
    }

    /**
     * –£—Ç–∏–ª–∏—Ç–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ - –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
     */
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π - –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
     */
    on(event, callback) {
        if (!this.eventListeners.has(event)) {
            this.eventListeners.set(event, []);
        }
        this.eventListeners.get(event).push(callback);
    }

    off(event, callback) {
        if (this.eventListeners.has(event)) {
            const listeners = this.eventListeners.get(event);
            const index = listeners.indexOf(callback);
            if (index > -1) {
                listeners.splice(index, 1);
            }
        }
    }

    emit(event, data) {
        if (this.eventListeners.has(event)) {
            this.eventListeners.get(event).forEach(callback => {
                try {
                    callback(data);
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è ${event}:`, error);
                }
            });
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≥—Ä—É–∑—á–∏–∫–µ - –ù–û–í–û–ï
     */
    getInfo() {
        return {
            currentPage: this.currentPage,
            cacheSize: this.pageCache.size,
            loadingQueue: Array.from(this.loadingQueue),
            elementsFound: {
                container: !!this.elements.container,
                content: !!this.elements.content,
                loading: !!this.elements.loading
            }
        };
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –ù–û–í–û–ï
     */
    async reloadCurrentPage() {
        if (this.currentPage) {
            // –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            this.pageCache.delete(this.currentPage);
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
            await this.loadPage(this.currentPage, false);
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ - –ù–û–í–û–ï
     */
    clearCache() {
        this.pageCache.clear();
        console.log('üóëÔ∏è –ö—ç—à —Å—Ç—Ä–∞–Ω–∏—Ü –æ—á–∏—â–µ–Ω');
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
window.PageLoader = PageLoader;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã
document.addEventListener('DOMContentLoaded', () => {
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–æ–≥–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
    setTimeout(() => {
        if (!window.pageLoader) {
            try {
                window.pageLoader = new PageLoader();
                console.log('‚úÖ PageLoader –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            } catch (error) {
                console.warn('‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PageLoader –Ω–µ —É–¥–∞–ª–∞—Å—å:', error);
            }
        }
    }, 100);
});

console.log('üìÑ PageLoader (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è) –∑–∞–≥—Ä—É–∂–µ–Ω');