(function () {
    'use strict';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω PageLoader
    if (typeof window.PageLoader !== 'undefined') {
        console.log('‚ö†Ô∏è PageLoader —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é');
        return;
    }

    class PageLoader {
        constructor() {
            this.currentPage = null;
            this.pageCache = new Map();
            this.loadingQueue = new Set();
            this.elements = {
                container: null,
                content: null,
                loading: null
            };
            this.config = {
                pagesPath: '../pages', // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±—Ä–∞–Ω '../'
                cachePages: true,
                loadTimeout: 10000,
                enableTransitions: true
            };
            this.eventListeners = new Map();
            this.init();
        }

        /**
         * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
         */
        init() {
            this.findElements();
            this.setupEventListeners();
            console.log('üìÑ PageLoader –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)');
        }

        /**
         * –ü–æ–∏—Å–∫ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–û
         */
        findElements() {
            // –ò—â–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            this.elements.container = document.querySelector('.page-container') ||
                document.getElementById('page-container') ||
                document.querySelector('.main-content .page-container');

            // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            if (!this.elements.container) {
                // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                const mainContent = document.querySelector('.main-content');
                if (mainContent) {
                    this.elements.container = document.createElement('div');
                    this.elements.container.className = 'page-container';
                    this.elements.container.id = 'page-container';
                    mainContent.appendChild(this.elements.container);
                    console.log('üìÑ –°–æ–∑–¥–∞–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π page-container');
                }
            }

            // –ò—â–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            this.elements.content = document.querySelector('.page-content') ||
                document.getElementById('page-content');

            // –°–æ–∑–¥–∞–µ–º page-content –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if (!this.elements.content && this.elements.container) {
                this.elements.content = document.createElement('div');
                this.elements.content.className = 'page-content';
                this.elements.content.id = 'page-content';
                this.elements.container.appendChild(this.elements.content);
                console.log('üìÑ –°–æ–∑–¥–∞–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π page-content');
            }

            // –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º loading —ç–ª–µ–º–µ–Ω—Ç
            this.elements.loading = document.querySelector('.page-loading') ||
                document.getElementById('page-loading');

            if (!this.elements.loading && this.elements.container) {
                this.elements.loading = document.createElement('div');
                this.elements.loading.className = 'page-loading';
                this.elements.loading.id = 'page-loading';
                this.elements.loading.innerHTML = `
                    <div class="loading-spinner"></div>
                    <div class="loading-text">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...</div>
                `;
                this.elements.container.appendChild(this.elements.loading);
                console.log('üìÑ –°–æ–∑–¥–∞–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π page-loading');
            }

            console.log('üîç PageLoader —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã:', {
                container: !!this.elements.container,
                content: !!this.elements.content,
                loading: !!this.elements.loading
            });
        }

        /**
         * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
         */
        setupEventListeners() {
            // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –æ—Ç sidebar
            document.addEventListener('sidebar-navigate', (e) => {
                const pageId = e.detail.page;
                console.log(`üìÑ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: ${pageId}`);
                this.loadPage(pageId);
            });

            // –ì–ª–æ–±–∞–ª—å–Ω—ã–π callback –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            window.onSidebarNavigate = (pageId) => {
                console.log(`üìÑ –ì–ª–æ–±–∞–ª—å–Ω—ã–π callback –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: ${pageId}`);
                this.loadPage(pageId);
            };

            console.log('‚ö° PageLoader —Å–æ–±—ã—Ç–∏–π–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
        }

        /**
         * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
         */
        async loadPage(pageId) {
            if (!pageId) {
                console.warn('‚ö†Ô∏è PageLoader: –Ω–µ —É–∫–∞–∑–∞–Ω ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            if (this.loadingQueue.has(pageId)) {
                console.log(`‚è≥ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageId} —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è`);
                return;
            }

            console.log(`üìÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${pageId}`);

            try {
                this.loadingQueue.add(pageId);
                this.showLoading();

                // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏
                this.emit('pageLoadStart', { pageId });

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                const pageContent = await this.fetchPageContent(pageId);

                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                await this.updatePageContent(pageContent, pageId);

                this.currentPage = pageId;
                this.hideLoading();

                console.log(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageId} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞`);

                // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
                this.emit('pageLoaded', { pageId, content: pageContent });

            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageId}:`, error);
                this.showError(pageId, error);
                this.emit('pageError', { pageId, error });
            } finally {
                this.loadingQueue.delete(pageId);
            }
        }

        /**
         * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
         */
        async fetchPageContent(pageId) {
            const pagePath = `${this.config.pagesPath}/${pageId}/${pageId}.html`;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if (this.config.cachePages && this.pageCache.has(pageId)) {
                console.log(`üì¶ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageId} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –∫—ç—à–∞`);
                return this.pageCache.get(pageId);
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), this.config.loadTimeout);

            try {
                const response = await fetch(pagePath, {
                    signal: controller.signal,
                    headers: {
                        'Accept': 'text/html',
                        'Cache-Control': 'no-cache'
                    }
                });

                clearTimeout(timeoutId);

                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }

                const content = await response.text();

                // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if (this.config.cachePages) {
                    this.pageCache.set(pageId, content);
                }

                console.log(`üåê –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageId} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞`);
                return content;

            } catch (error) {
                clearTimeout(timeoutId);

                if (error.name === 'AbortError') {
                    throw new Error(`–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageId} –∏—Å—Ç–µ–∫–ª–æ`);
                }

                throw error;
            }
        }

        /**
         * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
         */
        async updatePageContent(content, pageId) {
            if (!this.elements.content) {
                throw new Error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã
            if (this.config.enableTransitions) {
                this.elements.content.style.opacity = '0';

                setTimeout(() => {
                    this.elements.content.innerHTML = content;
                    this.elements.content.style.opacity = '1';

                    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    this.initializePageScripts(pageId);
                }, 150);
            } else {
                this.elements.content.innerHTML = content;
                this.initializePageScripts(pageId);
            }
        }

        /**
         * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
         */
        initializePageScripts(pageId) {
            if (!this.elements.content) return;

            // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
            const scripts = this.elements.content.querySelectorAll('script');
            scripts.forEach(script => {
                if (script.textContent.trim()) {
                    try {
                        new Function(script.textContent)();
                    } catch (error) {
                        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageId}:`, error);
                    }
                }
            });

            // –ò—â–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º page-specific —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            const initFunctionName = `init${pageId.charAt(0).toUpperCase() + pageId.slice(1)}Page`;
            if (typeof window[initFunctionName] === 'function') {
                try {
                    window[initFunctionName]();
                    console.log(`‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${initFunctionName}`);
                } catch (error) {
                    console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageId}:`, error);
                }
            }
        }

        /**
         * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
         */
        showLoading() {
            if (this.elements.loading) {
                this.elements.loading.classList.add('active');
                this.elements.loading.style.display = 'flex';
            }

            if (this.elements.content) {
                this.elements.content.style.display = 'none';
            }
        }

        /**
         * –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
         */
        hideLoading() {
            if (this.elements.loading) {
                this.elements.loading.classList.remove('active');
                this.elements.loading.style.display = 'none';
            }

            if (this.elements.content) {
                this.elements.content.style.display = 'block';
            }
        }

        /**
         * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
         */
        showError(pageId, error) {
            const errorHtml = `
                <div class="page-error">
                    <div class="error-icon">‚ùå</div>
                    <h2 class="error-title">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã</h2>
                    <p class="error-message">
                        –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã "${this.getPageTitle(pageId)}".
                    </p>
                    <div class="error-details">
                        <p><strong>ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã:</strong> <code>${pageId}</code></p>
                        <p><strong>–û—à–∏–±–∫–∞:</strong> ${error.message}</p>
                        <p><strong>–í—Ä–µ–º—è:</strong> ${new Date().toLocaleString()}</p>
                    </div>
                    <div class="error-actions">
                        <button class="error-btn" onclick="window.pageLoader?.loadPage('${pageId}')">
                            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                        </button>
                        <button class="error-btn secondary" onclick="window.pageLoader?.loadPage('dashboard')">
                            –ù–∞ –≥–ª–∞–≤–Ω—É—é
                        </button>
                    </div>
                </div>
            `;

            if (this.elements.content) {
                this.elements.content.innerHTML = errorHtml;
                this.elements.content.style.display = 'block';
            }

            this.hideLoading();
        }

        /**
         * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
         */
        getPageTitle(pageId) {
            const titles = {
                'dashboard': '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
                'scanner': '–ú–æ–¥—É–ª—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
                'attack-constructor': '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∞—Ç–∞–∫',
                'network-topology': '–¢–æ–ø–æ–ª–æ–≥–∏—è —Å–µ—Ç–∏',
                'reports': '–û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
                'settings': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã'
            };
            return titles[pageId] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞';
        }

        /**
         * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
         */
        clearCache(pageId = null) {
            if (pageId) {
                this.pageCache.delete(pageId);
                console.log(`üóëÔ∏è –ö—ç—à —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageId} –æ—á–∏—â–µ–Ω`);
            } else {
                this.pageCache.clear();
                console.log('üóëÔ∏è –í–µ—Å—å –∫—ç—à —Å—Ç—Ä–∞–Ω–∏—Ü –æ—á–∏—â–µ–Ω');
            }
        }

        /**
         * –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π
         */
        on(event, callback) {
            if (!this.eventListeners.has(event)) {
                this.eventListeners.set(event, []);
            }
            this.eventListeners.get(event).push(callback);
        }

        off(event, callback) {
            if (this.eventListeners.has(event)) {
                const listeners = this.eventListeners.get(event);
                const index = listeners.indexOf(callback);
                if (index > -1) {
                    listeners.splice(index, 1);
                }
            }
        }

        emit(event, data) {
            if (this.eventListeners.has(event)) {
                this.eventListeners.get(event).forEach(callback => {
                    try {
                        callback(data);
                    } catch (error) {
                        console.error(`–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è ${event}:`, error);
                    }
                });
            }
        }

        /**
         * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
         */
        getStats() {
            return {
                currentPage: this.currentPage,
                cachedPages: Array.from(this.pageCache.keys()),
                loadingPages: Array.from(this.loadingQueue),
                cacheSize: this.pageCache.size
            };
        }

        /**
         * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
         */
        destroy() {
            this.clearCache();
            this.loadingQueue.clear();
            this.eventListeners.clear();

            // –£–¥–∞–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π callback
            if (window.onSidebarNavigate) {
                delete window.onSidebarNavigate;
            }

            console.log('üóëÔ∏è PageLoader —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
        }
    }

    // –≠–∫—Å–ø–æ—Ä—Ç
    window.PageLoader = PageLoader;
    console.log('üìÑ PageLoader –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)');

})();