(function () {
    'use strict';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω IPRoastApp
    if (typeof window.IPRoastApp !== 'undefined') {
        console.log('‚ö†Ô∏è IPRoastApp —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é');
        return;
    }

    class IPRoastApp {
        constructor() {
            this.version = '4.0.0';
            this.buildDate = new Date().toISOString();
            this.state = {
                isInitialized: false,
                currentPage: 'dashboard',
                isLoading: true,
                sidebarCollapsed: false,
                theme: 'dark',
                componentsLoaded: false
            };

            this.components = {
                sidebar: null,
                header: null,
                pageLoader: null,
                componentLoader: null
            };

            this.config = {
                apiBaseUrl: '/api',
                enableDevMode: localStorage.getItem('dev-mode') === 'true',
                autoSave: true,
                refreshInterval: 30000,
                componentPaths: {
                    header: 'components/header.html',
                    sidebar: 'components/sidebar.html'
                }
            };

            console.log(`üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IP Roast Enterprise ${this.version} (–ú–æ–¥—É–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)`);
            // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º init() –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ - –±—É–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–≤–Ω–µ
        }

        /**
         * –ì–ª–∞–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
         * –¢–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ü–û–°–õ–ï –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
         */
        async init() {
            try {
                this.showLoadingScreen();
                this.updateProgress(10, '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —è–¥—Ä–∞...');

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
                if (!this.checkComponentsExist()) {
                    throw new Error('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã HTML –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ DOM. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.');
                }

                this.updateProgress(30, '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º...');
                await this.initCore();

                this.updateProgress(50, '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...');
                await this.initComponents();

                this.updateProgress(70, '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');
                await this.setupUI();

                this.updateProgress(85, '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
                await this.loadInitialData();

                this.updateProgress(95, '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...');
                await this.finializeInit();

                this.updateProgress(100, '–ì–æ—Ç–æ–≤–æ!');

                // –°–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
                setTimeout(() => {
                    this.hideLoadingScreen();
                    this.state.isInitialized = true;
                    this.showSuccessNotification('IP Roast Enterprise —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
                    console.log('‚úÖ IP Roast Enterprise –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã)');
                }, 500);

            } catch (error) {
                console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
                this.handleInitError(error);
            }
        }

        /**
         * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ DOM
         */
        checkComponentsExist() {
            const headerContainer = document.getElementById('header-container');
            const sidebarContainer = document.getElementById('sidebar-container');
            const mainHeader = document.getElementById('main-header');
            const sidebar = document.getElementById('sidebar');

            const exists = {
                headerContainer: !!headerContainer,
                sidebarContainer: !!sidebarContainer,
                mainHeader: !!mainHeader,
                sidebar: !!sidebar,
                headerContent: !!(headerContainer && headerContainer.children.length > 0),
                sidebarContent: !!(sidebarContainer && sidebarContainer.children.length > 0)
            };

            console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ DOM:', exists);

            return exists.headerContainer &&
                exists.sidebarContainer &&
                exists.headerContent &&
                exists.sidebarContent &&
                exists.mainHeader &&
                exists.sidebar;
        }

        /**
         * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º
         */
        async initCore() {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
            this.setupErrorHandlers();

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
            this.setupTheme();

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            this.setupStateManagement();

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
            this.setupHotkeys();

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª–∏–µ–Ω—Ç–∞
            this.setupAPI();

            console.log('üîß –ë–∞–∑–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
        }

        /**
         * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
         * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã HTML —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º JavaScript –º–µ–Ω–µ–¥–∂–µ—Ä—ã
         */
        async initComponents() {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è sidebar –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã
            const sidebarElement = document.getElementById('sidebar');
            if (sidebarElement && window.SidebarManager) {
                try {
                    this.components.sidebar = new window.SidebarManager();

                    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
                    this.components.sidebar.on('collapsed', (collapsed) => {
                        this.state.sidebarCollapsed = collapsed;
                        this.saveState();
                    });

                    this.components.sidebar.on('navigate', (page) => {
                        this.navigateToPage(page);
                    });

                    console.log('‚úÖ SidebarManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SidebarManager:', error);
                }
            } else {
                console.warn('‚ö†Ô∏è SidebarManager –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è header –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã
            const headerElement = document.getElementById('main-header');
            if (headerElement && window.HeaderManager) {
                try {
                    this.components.header = new window.HeaderManager();
                    console.log('‚úÖ HeaderManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ HeaderManager:', error);
                }
            } else {
                console.warn('‚ö†Ô∏è HeaderManager –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
            if (window.PageLoader) {
                try {
                    this.components.pageLoader = new window.PageLoader();

                    this.components.pageLoader.on('pageLoaded', (page) => {
                        this.onPageLoaded(page);
                    });

                    this.components.pageLoader.on('pageError', (error) => {
                        this.onPageError(error);
                    });

                    console.log('‚úÖ PageLoader –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PageLoader:', error);
                }
            } else {
                console.warn('‚ö†Ô∏è PageLoader –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            console.log('üì¶ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
        }

        /**
         * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
         */
        async setupUI() {
            this.setupResponsive();
            this.setupAccessibility();
            this.setupPerformance();
            this.restoreUIState();
            console.log('üé® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        }

        /**
         * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
         */
        async loadInitialData() {
            try {
                await this.loadSystemStatus();
                await this.loadUserPreferences();

                const initialPage = this.getInitialPage();
                await this.navigateToPage(initialPage);

                console.log('üìä –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            } catch (error) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            }
        }

        /**
         * –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
         */
        async finializeInit() {
            this.startPeriodicTasks();
            this.registerServiceWorker();
            this.setupAnalytics();
            console.log('üèÅ –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        }

        /**
         * –ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏
         */
        showLoadingScreen() {
            const loadingScreen = document.getElementById('loading-screen');
            if (loadingScreen) {
                loadingScreen.classList.remove('hidden');
            }
        }

        /**
         * –°–∫—Ä—ã—Ç–∏–µ —ç–∫—Ä–∞–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏
         */
        hideLoadingScreen() {
            const loadingScreen = document.getElementById('loading-screen');
            if (loadingScreen) {
                loadingScreen.classList.add('hidden');
            }
        }

        /**
         * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
         */
        updateProgress(percent, text) {
            const progressFill = document.getElementById('progress-fill');
            const progressText = document.getElementById('progress-text');

            if (progressFill) {
                progressFill.style.width = `${percent}%`;
            }

            if (progressText) {
                progressText.textContent = text;
            }
        }

        /**
         * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
         */
        showSuccessNotification(message) {
            if (this.components.header) {
                this.components.header.addNotification({
                    title: '–£—Å–ø–µ—Ö',
                    message: message,
                    type: 'success'
                });
            }
        }

        /**
         * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
         */
        showErrorNotification(message) {
            if (this.components.header) {
                this.components.header.addNotification({
                    title: '–û—à–∏–±–∫–∞',
                    message: message,
                    type: 'error'
                });
            }
        }

        /**
         * –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
         */
        async navigateToPage(pageId) {
            if (this.state.currentPage === pageId) return;

            console.log(`üìÑ –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${pageId}`);

            try {
                this.state.currentPage = pageId;

                const pageTitle = this.getPageTitle(pageId);
                if (this.components.header) {
                    this.components.header.updatePageTitle(pageTitle);
                }

                if (this.components.pageLoader) {
                    await this.components.pageLoader.loadPage(pageId);
                }

                if (this.components.sidebar) {
                    this.components.sidebar.setActivePage(pageId);
                }

                this.saveState();

                if (window.history && window.history.pushState) {
                    window.history.pushState({ page: pageId }, pageTitle, `#${pageId}`);
                }

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', error);
                this.showErrorNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
            }
        }

        /**
         * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
         */
        getPageTitle(pageId) {
            const titles = {
                'dashboard': '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
                'scanner': '–ú–æ–¥—É–ª—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
                'attack-constructor': '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∞—Ç–∞–∫',
                'network-topology': '–¢–æ–ø–æ–ª–æ–≥–∏—è —Å–µ—Ç–∏',
                'reports': '–û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
                'settings': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã'
            };
            return titles[pageId] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞';
        }

        /**
         * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
         */
        setupErrorHandlers() {
            window.addEventListener('error', (e) => {
                console.error('üí• JavaScript –æ—à–∏–±–∫–∞:', e.error);
                if (this.config.enableDevMode) {
                    this.showErrorNotification(`JS Error: ${e.error.message}`);
                }
            });
        }

        /**
         * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
         */
        setupTheme() {
            const savedTheme = localStorage.getItem('theme') || 'dark';
            this.state.theme = savedTheme;
            document.body.setAttribute('data-theme', savedTheme);
            console.log(`üé® –¢–µ–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${savedTheme}`);
        }

        /**
         * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
         */
        setupHotkeys() {
            document.addEventListener('keydown', (e) => {
                if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
                    e.preventDefault();
                    this.showQuickSearch();
                }

                if ((e.ctrlKey || e.metaKey) && e.key === 'b') {
                    e.preventDefault();
                    if (this.components.sidebar) {
                        this.components.sidebar.toggle();
                    }
                }
            });

            console.log('‚å®Ô∏è –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        }

        /**
         * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
         */
        setupStateManagement() {
            const savedState = this.loadState();
            if (savedState) {
                this.state = { ...this.state, ...savedState };
            }

            if (this.config.autoSave) {
                setInterval(() => {
                    this.saveState();
                }, 30000);
            }

            console.log('üíæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ');
        }

        /**
         * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
         */
        saveState() {
            try {
                const stateToSave = {
                    currentPage: this.state.currentPage,
                    sidebarCollapsed: this.state.sidebarCollapsed,
                    theme: this.state.theme,
                    timestamp: Date.now()
                };

                localStorage.setItem('app-state', JSON.stringify(stateToSave));
            } catch (error) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
            }
        }

        /**
         * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
         */
        loadState() {
            try {
                const saved = localStorage.getItem('app-state');
                return saved ? JSON.parse(saved) : null;
            } catch (error) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
                return null;
            }
        }

        /**
         * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API
         */
        setupAPI() {
            console.log('üåê API –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ');
        }

        /**
         * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
         */
        async loadSystemStatus() {
            await new Promise(resolve => setTimeout(resolve, 500));
            const status = {
                system: 'OK',
                network: 'Connected',
                security: 'Protected'
            };
            console.log('üìä –°–∏—Å—Ç–µ–º–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∂–µ–Ω:', status);
            return status;
        }

        /**
         * –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
         */
        async loadUserPreferences() {
            await new Promise(resolve => setTimeout(resolve, 300));
            const preferences = {
                notifications: true,
                autoRefresh: true,
                compactMode: false
            };
            console.log('üë§ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', preferences);
            return preferences;
        }

        /**
         * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
         */
        getInitialPage() {
            const hash = window.location.hash.substr(1);
            if (hash && this.isValidPage(hash)) {
                return hash;
            }

            const savedState = this.loadState();
            if (savedState && savedState.currentPage && this.isValidPage(savedState.currentPage)) {
                return savedState.currentPage;
            }

            return 'dashboard';
        }

        /**
         * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
         */
        isValidPage(pageId) {
            const validPages = ['dashboard', 'scanner', 'attack-constructor', 'network-topology', 'reports', 'settings'];
            return validPages.includes(pageId);
        }

        /**
         * –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
         */
        startPeriodicTasks() {
            setInterval(async () => {
                try {
                    await this.loadSystemStatus();
                } catch (error) {
                    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞:', error);
                }
            }, 30000);

            console.log('‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã');
        }

        /**
         * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Service Worker
         */
        registerServiceWorker() {
            if ('serviceWorker' in navigator) {
                navigator.serviceWorker.register('/sw.js')
                    .then(registration => {
                        console.log('üîß Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', registration.scope);
                    })
                    .catch(error => {
                        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker:', error);
                    });
            }
        }

        /**
         * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
         */
        setupResponsive() {
            const mediaQuery = window.matchMedia('(max-width: 768px)');
            const handleMediaChange = (e) => {
                if (e.matches) {
                    document.body.classList.add('mobile-mode');
                } else {
                    document.body.classList.remove('mobile-mode');
                }
            };

            mediaQuery.addEventListener('change', handleMediaChange);
            handleMediaChange(mediaQuery);

            console.log('üì± –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
        }

        /**
         * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
         */
        setupAccessibility() {
            console.log('‚ôø Accessibility –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        }

        /**
         * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
         */
        setupPerformance() {
            console.log('‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
        }

        /**
         * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
         */
        setupAnalytics() {
            if (this.config.enableDevMode) {
                console.log('üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ dev —Ä–µ–∂–∏–º–µ');
                return;
            }
            console.log('üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
        }

        /**
         * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è UI
         */
        restoreUIState() {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ sidebar
            if (this.components.sidebar) {
                if (this.state.sidebarCollapsed) {
                    this.components.sidebar.collapse();
                } else {
                    this.components.sidebar.expand();
                }
            }

            // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º header, –µ—Å–ª–∏ sidebar —Å–≤–µ—Ä–Ω—É—Ç
            if (this.state.sidebarCollapsed && this.components.header) {
                if (typeof this.components.header.collapse === 'function') {
                    this.components.header.collapse();
                }
            }
        }

        /**
         * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
         */
        onPageLoaded(pageData) {
            console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', pageData.id);
            if (this.components.header) {
                this.components.header.setLoading(false);
            }
        }

        onPageError(error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
            if (this.components.header) {
                this.components.header.setLoading(false);
            }
            this.showErrorNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É');
        }

        /**
         * –ü–æ–∫–∞–∑ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
         */
        showQuickSearch() {
            console.log('üîç –û—Ç–∫—Ä—ã—Ç–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞');
        }

        /**
         * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
         */
        handleInitError(error) {
            console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);

            const loadingScreen = document.getElementById('loading-screen');
            if (loadingScreen) {
                loadingScreen.innerHTML = `
                    <div class="loading-container">
                        <div class="loading-logo">
                            <div class="logo-icon">‚ùå</div>
                            <div class="logo-text">
                                <h1>–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏</h1>
                                <span>IP Roast Enterprise ${this.version}</span>
                            </div>
                        </div>
                        <div class="error-details">
                            <p><strong>–û—à–∏–±–∫–∞:</strong> ${error.message}</p>
                            <p><strong>–í—Ä–µ–º—è:</strong> ${new Date().toLocaleString()}</p>
                        </div>
                        <div class="error-actions">
                            <button class="error-btn" onclick="location.reload()">
                                –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                            </button>
                        </div>
                    </div>
                `;
            }
        }
    }

    // –≠–∫—Å–ø–æ—Ä—Ç
    window.IPRoastApp = IPRoastApp;
    console.log('‚úÖ IPRoastApp –∫–ª–∞—Å—Å –∑–∞–≥—Ä—É–∂–µ–Ω (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)');

})();