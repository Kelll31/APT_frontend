(function () {
    'use strict';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω SidebarManager
    if (typeof window.SidebarManager !== 'undefined') {
        console.log('‚ö†Ô∏è SidebarManager —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é');
        return;
    }

    class SidebarManager {
        constructor() {
            this.elements = {
                sidebar: null,
                mobileToggle: null,
                collapseToggle: null,
                expandToggle: null,
                overlay: null,
                navItems: null,
                statusItems: null
            };

            this.state = {
                isCollapsed: false,
                isOpen: false,
                isMobile: false,
                isAnimating: false,
                activePage: 'dashboard'
            };

            this.config = {
                mobileBreakpoint: 1024,
                animationDuration: 300,
                persistState: true,
                autoCollapse: false
            };

            this.eventListeners = new Map();
            this.statusUpdateInterval = null;
            this.init();
        }

        /**
         * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è sidebar –º–µ–Ω–µ–¥–∂–µ—Ä–∞
         */
        init() {
            try {
                this.findElements();
                this.setupEventListeners();
                this.loadState();
                this.checkMobileView();
                this.setupSystemStatus();
                this.updateView();
                console.log('‚úÖ SidebarManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SidebarManager:', error);
                this.handleInitError(error);
            }
        }

        /**
         * –ü–æ–∏—Å–∫ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
         */
        findElements() {
            this.elements.sidebar = document.getElementById('sidebar');
            this.elements.mobileToggle = document.getElementById('sidebar-mobile-toggle');
            this.elements.collapseToggle = document.getElementById('sidebar-collapse');
            this.elements.expandToggle = document.getElementById('sidebar-expand');
            this.elements.overlay = document.getElementById('sidebar-overlay');
            this.elements.navItems = document.querySelectorAll('.nav-item');
            this.elements.statusItems = document.querySelectorAll('.status-item');

            if (!this.elements.sidebar) {
                throw new Error('SidebarManager: —ç–ª–µ–º–µ–Ω—Ç sidebar –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            if (!this.elements.navItems || this.elements.navItems.length === 0) {
                console.warn('‚ö†Ô∏è –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            }

            console.log('üîç Sidebar —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã:', {
                sidebar: !!this.elements.sidebar,
                mobileToggle: !!this.elements.mobileToggle,
                collapseToggle: !!this.elements.collapseToggle,
                expandToggle: !!this.elements.expandToggle,
                overlay: !!this.elements.overlay,
                navItems: this.elements.navItems.length,
                statusItems: this.elements.statusItems.length
            });
        }

        /**
         * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
         */
        setupEventListeners() {
            // –ú–æ–±–∏–ª—å–Ω—ã–π toggle
            if (this.elements.mobileToggle) {
                this.elements.mobileToggle.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    console.log('üîò –ö–ª–∏–∫ –ø–æ –º–æ–±–∏–ª—å–Ω–æ–º—É toggle');
                    this.toggle();
                });
            } else {
                console.warn('‚ö†Ô∏è –ú–æ–±–∏–ª—å–Ω—ã–π toggle –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            // –ö–Ω–æ–ø–∫–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
            if (this.elements.collapseToggle) {
                this.elements.collapseToggle.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    console.log('üîò –ö–ª–∏–∫ –ø–æ collapse toggle');
                    if (!this.state.isMobile) {
                        this.collapse();
                    }
                });
            } else {
                console.warn('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            // –ö–Ω–æ–ø–∫–∞ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
            if (this.elements.expandToggle) {
                this.elements.expandToggle.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    console.log('üîò –ö–ª–∏–∫ –ø–æ expand toggle');
                    if (!this.state.isMobile) {
                        this.expand();
                    }
                });
            } else {
                console.warn('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            // Overlay –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
            if (this.elements.overlay) {
                this.elements.overlay.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    console.log('üîò –ö–ª–∏–∫ –ø–æ overlay');
                    this.close();
                });
            }

            // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            this.elements.navItems.forEach((item, index) => {
                const link = item.querySelector('.nav-link');
                if (link) {
                    link.addEventListener('click', (e) => {
                        e.preventDefault();
                        e.stopPropagation();
                        console.log(`üîò –ö–ª–∏–∫ –ø–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ${index}:`, item.dataset.page);
                        this.handleNavClick(item);
                    });
                }
            });

            // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            this.boundHandleResize = this.debounce(() => {
                this.handleResize();
            }, 250);

            window.addEventListener('resize', this.boundHandleResize);

            document.addEventListener('keydown', (e) => {
                this.handleKeydown(e);
            });

            document.addEventListener('click', (e) => {
                this.handleClickOutside(e);
            });

            console.log('‚ö° –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π sidebar –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        }

        /**
         * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
         */
        handleNavClick(navItem) {
            const pageId = navItem.dataset.page;
            if (!pageId) {
                console.warn('‚ö†Ô∏è Page ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ nav item');
                return;
            }

            console.log(`üîò –ö–ª–∏–∫ –ø–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: ${pageId}`);

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            this.setActivePage(pageId);

            // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —ç–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
            // 1. –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π
            this.emit('navigate', pageId);

            // 2. –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ DOM
            const navEvent = new CustomEvent('sidebar-navigate', {
                detail: { page: pageId, timestamp: Date.now() }
            });
            document.dispatchEvent(navEvent);

            // 3. –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ PageLoader –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if (window.pageLoader && typeof window.pageLoader.loadPage === 'function') {
                console.log(`üìû –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ PageLoader –¥–ª—è: ${pageId}`);
                window.pageLoader.loadPage(pageId);
            }

            // 4. –ì–ª–æ–±–∞–ª—å–Ω—ã–π callback –µ—Å–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
            if (window.onSidebarNavigate && typeof window.onSidebarNavigate === 'function') {
                window.onSidebarNavigate(pageId);
            }

            // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
            if (this.state.isMobile && this.state.isOpen) {
                setTimeout(() => this.close(), 150);
            }
        }

        /**
         * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
         */
        setActivePage(pageId) {
            this.state.activePage = pageId;

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            this.elements.navItems.forEach(item => {
                const itemPageId = item.dataset.page;
                if (itemPageId === pageId) {
                    item.classList.add('active');
                } else {
                    item.classList.remove('active');
                }
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.saveState();
            console.log(`‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${pageId}`);
        }

        /**
         * –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
         */
        checkMobileView() {
            const wasMobile = this.state.isMobile;
            this.state.isMobile = window.innerWidth <= this.config.mobileBreakpoint;

            if (this.elements.sidebar) {
                if (this.state.isMobile) {
                    this.elements.sidebar.classList.add('sidebar--mobile');
                } else {
                    this.elements.sidebar.classList.remove('sidebar--mobile');
                }
            }

            // –ï—Å–ª–∏ —Ä–µ–∂–∏–º –∏–∑–º–µ–Ω–∏–ª—Å—è
            if (wasMobile !== this.state.isMobile) {
                this.handleMobileChange();
            }

            console.log(`üì± Mobile —Ä–µ–∂–∏–º: ${this.state.isMobile}`);
        }

        /**
         * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞
         */
        handleMobileChange() {
            if (this.state.isMobile) {
                // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã–π - –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
                this.close();
            } else {
                // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                this.loadState();
                this.updateView();
            }

            this.emit('mobileChanged', this.state.isMobile);
        }

        /**
         * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
         */
        toggle() {
            if (this.state.isAnimating) {
                console.log('‚è≥ –ê–Ω–∏–º–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º toggle');
                return;
            }

            if (this.state.isMobile) {
                this.state.isOpen ? this.close() : this.open();
            } else {
                this.state.isCollapsed ? this.expand() : this.collapse();
            }
        }

        /**
         * –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é (–º–æ–±–∏–ª—å–Ω—ã–µ)
         */
        open() {
            if (!this.state.isMobile || this.state.isOpen || this.state.isAnimating) {
                return;
            }

            console.log('üì± –û—Ç–∫—Ä—ã—Ç–∏–µ sidebar (–º–æ–±–∏–ª—å–Ω—ã–π —Ä–µ–∂–∏–º)');
            this.state.isOpen = true;
            this.state.isAnimating = true;

            if (this.elements.sidebar) {
                this.elements.sidebar.classList.add('sidebar--open');
                this.elements.sidebar.classList.add('sidebar--opening');
            }

            if (this.elements.overlay) {
                this.elements.overlay.classList.add('sidebar__overlay--visible');
            }

            setTimeout(() => {
                this.state.isAnimating = false;
                if (this.elements.sidebar) {
                    this.elements.sidebar.classList.remove('sidebar--opening');
                }
            }, this.config.animationDuration);

            this.emit('opened');
        }

        /**
         * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é (–º–æ–±–∏–ª—å–Ω—ã–µ)
         */
        close() {
            if (!this.state.isMobile || !this.state.isOpen || this.state.isAnimating) {
                return;
            }

            console.log('üì± –ó–∞–∫—Ä—ã—Ç–∏–µ sidebar (–º–æ–±–∏–ª—å–Ω—ã–π —Ä–µ–∂–∏–º)');
            this.state.isOpen = false;
            this.state.isAnimating = true;

            if (this.elements.sidebar) {
                this.elements.sidebar.classList.add('sidebar--closing');
            }

            if (this.elements.overlay) {
                this.elements.overlay.classList.remove('sidebar__overlay--visible');
            }

            setTimeout(() => {
                this.state.isAnimating = false;
                if (this.elements.sidebar) {
                    this.elements.sidebar.classList.remove('sidebar--open');
                    this.elements.sidebar.classList.remove('sidebar--closing');
                }
            }, this.config.animationDuration);

            this.emit('closed');
        }

        /**
         * –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –º–µ–Ω—é (–¥–µ—Å–∫—Ç–æ–ø)
         */
        collapse() {
            if (this.state.isMobile || this.state.isCollapsed) {
                return;
            }

            console.log('üíª –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ sidebar (–¥–µ—Å–∫—Ç–æ–ø–Ω—ã–π —Ä–µ–∂–∏–º)');
            this.state.isCollapsed = true;
            this.elements.sidebar.classList.add('sidebar--collapsed');

            // –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            const main = document.querySelector('.main-content');
            if (main) {
                main.style.marginLeft = '64px';
            }

            this.saveState();
            this.emit('collapsed', true);
        }

        /**
         * –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –º–µ–Ω—é (–¥–µ—Å–∫—Ç–æ–ø)
         */
        expand() {
            if (this.state.isMobile || !this.state.isCollapsed) {
                return;
            }

            console.log('üíª –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ sidebar (–¥–µ—Å–∫—Ç–æ–ø–Ω—ã–π —Ä–µ–∂–∏–º)');
            this.state.isCollapsed = false;
            this.elements.sidebar.classList.remove('sidebar--collapsed');

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            const main = document.querySelector('.main-content');
            if (main) {
                main.style.marginLeft = getComputedStyle(document.documentElement)
                    .getPropertyValue('--sidebar-width') || '';
            }

            this.saveState();
            this.emit('collapsed', false);
        }

        /**
         * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
         */
        updateView() {
            if (!this.elements.sidebar) {
                console.warn('‚ö†Ô∏è Sidebar —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
                return;
            }

            if (this.state.isMobile) {
                // –ú–æ–±–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
                if (this.state.isOpen) {
                    this.elements.sidebar.classList.add('sidebar--open');
                } else {
                    this.elements.sidebar.classList.remove('sidebar--open');
                }
            } else {
                // –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –ª–æ–≥–∏–∫–∞
                if (this.state.isCollapsed) {
                    this.elements.sidebar.classList.add('sidebar--collapsed');
                } else {
                    this.elements.sidebar.classList.remove('sidebar--collapsed');
                }
            }

            console.log('‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ sidebar –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
        }

        /**
         * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
         */
        setupSystemStatus() {
            if (!this.elements.statusItems || this.elements.statusItems.length === 0) {
                console.log('‚ÑπÔ∏è Status items –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å—Ç–∞—Ç—É—Å–∞');
                return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ä–∞–∑—É –∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            this.updateSystemStatus();
            this.statusUpdateInterval = setInterval(() => {
                this.updateSystemStatus();
            }, 30000);

            console.log('‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π —Å—Ç–∞—Ç—É—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        }

        /**
         * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
         */
        updateSystemStatus() {
            if (!this.elements.statusItems) return;

            // –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
            const statusData = {
                '—Å–∏—Å—Ç–µ–º–∞': Math.random() > 0.1 ? 'OK' : 'WARNING',
                'system': Math.random() > 0.1 ? 'OK' : 'WARNING',
                '—Å–µ—Ç—å': Math.random() > 0.05 ? 'Connected' : 'Disconnected',
                'network': Math.random() > 0.05 ? 'Connected' : 'Disconnected',
                '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å': Math.random() > 0.02 ? 'Protected' : 'Alert',
                'security': Math.random() > 0.02 ? 'Protected' : 'Alert'
            };

            this.elements.statusItems.forEach(item => {
                const label = item.querySelector('.status-label');
                const value = item.querySelector('.status-value');

                if (label && value) {
                    const statusType = label.textContent.toLowerCase().trim();
                    const statusValue = statusData[statusType];

                    if (statusValue) {
                        value.textContent = statusValue;

                        // –û–±–Ω–æ–≤–ª—è–µ–º CSS –∫–ª–∞—Å—Å—ã
                        value.className = 'status-value';
                        if (statusValue === 'OK' || statusValue === 'Connected' || statusValue === 'Protected') {
                            value.classList.add('status-healthy');
                        } else if (statusValue === 'WARNING') {
                            value.classList.add('status-warning');
                        } else {
                            value.classList.add('status-error');
                        }
                    }
                }
            });
        }

        /**
         * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
         */
        saveState() {
            if (!this.config.persistState) return;

            try {
                const state = {
                    isCollapsed: this.state.isCollapsed,
                    activePage: this.state.activePage,
                    timestamp: Date.now()
                };

                localStorage.setItem('sidebar-state', JSON.stringify(state));
                console.log('üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ sidebar —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
            } catch (error) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
            }
        }

        /**
         * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
         */
        loadState() {
            if (!this.config.persistState) return;

            try {
                const saved = localStorage.getItem('sidebar-state');
                if (saved) {
                    const state = JSON.parse(saved);
                    this.state.isCollapsed = state.isCollapsed || false;
                    this.state.activePage = state.activePage || 'dashboard';

                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    this.setActivePage(this.state.activePage);
                    console.log('üìÇ –°–æ—Å—Ç–æ—è–Ω–∏–µ sidebar –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', state);
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
            }
        }

        /**
         * –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π
         */
        on(event, callback) {
            if (!this.eventListeners.has(event)) {
                this.eventListeners.set(event, []);
            }
            this.eventListeners.get(event).push(callback);
        }

        off(event, callback) {
            if (this.eventListeners.has(event)) {
                const listeners = this.eventListeners.get(event);
                const index = listeners.indexOf(callback);
                if (index > -1) {
                    listeners.splice(index, 1);
                }
            }
        }

        emit(event, data) {
            if (this.eventListeners.has(event)) {
                this.eventListeners.get(event).forEach(callback => {
                    try {
                        callback(data);
                    } catch (error) {
                        console.error(`–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è ${event}:`, error);
                    }
                });
            }
        }

        /**
         * –£—Ç–∏–ª–∏—Ç–∞ debounce
         */
        debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        /**
         * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
         */
        handleKeydown(e) {
            // ESC –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
            if (e.key === 'Escape' && this.state.isMobile && this.state.isOpen) {
                this.close();
            }

            // Ctrl+B –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –º–µ–Ω—é –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ
            if (e.ctrlKey && e.key === 'b' && !this.state.isMobile) {
                e.preventDefault();
                this.toggle();
            }
        }

        /**
         * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –≤–Ω–µ sidebar
         */
        handleClickOutside(e) {
            if (this.state.isMobile &&
                this.state.isOpen &&
                this.elements.sidebar &&
                !this.elements.sidebar.contains(e.target) &&
                !this.elements.mobileToggle?.contains(e.target)) {
                this.close();
            }
        }

        /**
         * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
         */
        handleResize() {
            this.checkMobileView();
            this.emit('resize', {
                width: window.innerWidth,
                height: window.innerHeight,
                isMobile: this.state.isMobile
            });
        }

        /**
         * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
         */
        handleInitError(error) {
            console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ SidebarManager:', error);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            if (window.ipRoastApp && window.ipRoastApp.showErrorNotification) {
                window.ipRoastApp.showErrorNotification('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é');
            }

            // –ü–æ–ø—ã—Ç–∫–∞ –±–∞–∑–æ–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            this.fallbackInit();
        }

        /**
         * –ë–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
         */
        fallbackInit() {
            console.log('üö® –ó–∞–ø—É—Å–∫ fallback –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
            try {
                // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
                this.elements.sidebar = document.getElementById('sidebar');
                if (this.elements.sidebar) {
                    console.log('‚úÖ Fallback: –æ—Å–Ω–æ–≤–Ω–æ–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω');
                }
            } catch (error) {
                console.error('‚ùå Fallback –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å:', error);
            }
        }

        /**
         * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ sidebar –º–µ–Ω–µ–¥–∂–µ—Ä–∞
         */
        destroy() {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            if (this.statusUpdateInterval) {
                clearInterval(this.statusUpdateInterval);
                this.statusUpdateInterval = null;
            }

            // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            if (this.boundHandleResize) {
                window.removeEventListener('resize', this.boundHandleResize);
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.saveState();

            // –û—á–∏—â–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
            this.eventListeners.clear();

            console.log('üóëÔ∏è SidebarManager —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
        }
    }

    // –≠–∫—Å–ø–æ—Ä—Ç
    window.SidebarManager = SidebarManager;
    console.log('‚úÖ SidebarManager –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω');

})();