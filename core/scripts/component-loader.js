/**
 * ComponentLoader.js - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∑–∞–≥—Ä—É–∑—á–∏–∫ HTML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 * IP Roast Enterprise 4.0
 */

class ComponentLoader {
    constructor() {
        this.cache = new Map();
        this.loadingPromises = new Map();
        this.config = {
            timeout: 10000,
            retryCount: 3,
            retryDelay: 1000
        };
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    async loadComponent(path, containerId, options = {}) {
        const cacheKey = `${path}:${containerId}`;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        if (this.loadingPromises.has(cacheKey)) {
            return this.loadingPromises.get(cacheKey);
        }

        const loadPromise = this._loadComponentInternal(path, containerId, options);
        this.loadingPromises.set(cacheKey, loadPromise);

        try {
            const result = await loadPromise;
            this.loadingPromises.delete(cacheKey);
            return result;
        } catch (error) {
            this.loadingPromises.delete(cacheKey);
            throw error;
        }
    }

    /**
     * –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    async _loadComponentInternal(path, containerId, options) {
        const { useCache = true, transform = null } = options;

        try {
            let html;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if (useCache && this.cache.has(path)) {
                html = this.cache.get(path);
                console.log(`üì¶ Component loaded from cache: ${path}`);
            } else {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
                html = await this._fetchWithRetry(path);

                if (useCache) {
                    this.cache.set(path, html);
                }
                console.log(`üåê Component loaded from server: ${path}`);
            }

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
            if (transform && typeof transform === 'function') {
                html = transform(html);
            }

            // –í—Å—Ç–∞–≤–ª—è–µ–º –≤ DOM
            const container = document.getElementById(containerId);
            if (!container) {
                throw new Error(`Container with id "${containerId}" not found`);
            }

            container.innerHTML = html;

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç—ã –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
            await this._initializeComponentScripts(container);

            console.log(`‚úÖ Component successfully loaded: ${path} -> ${containerId}`);
            return { path, containerId, html };

        } catch (error) {
            console.error(`‚ùå Error loading component ${path}:`, error);
            throw error;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
     */
    async _fetchWithRetry(path) {
        let lastError;

        for (let i = 0; i < this.config.retryCount; i++) {
            try {
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), this.config.timeout);

                const response = await fetch(path, {
                    signal: controller.signal,
                    headers: {
                        'Accept': 'text/html',
                        'Cache-Control': 'no-cache'
                    }
                });

                clearTimeout(timeoutId);

                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }

                return await response.text();

            } catch (error) {
                lastError = error;
                console.warn(`‚ö†Ô∏è Attempt ${i + 1} failed for ${path}:`, error.message);

                if (i < this.config.retryCount - 1) {
                    await new Promise(resolve => setTimeout(resolve, this.config.retryDelay));
                }
            }
        }

        throw lastError;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤ –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
     */
    async _initializeComponentScripts(container) {
        // –ù–∞—Ö–æ–¥–∏–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º inline —Å–∫—Ä–∏–ø—Ç—ã
        const scripts = container.querySelectorAll('script');

        for (const script of scripts) {
            if (script.src) {
                // –í–Ω–µ—à–Ω–∏–π —Å–∫—Ä–∏–ø—Ç
                await this._loadExternalScript(script.src);
            } else if (script.textContent.trim()) {
                // Inline —Å–∫—Ä–∏–ø—Ç
                try {
                    new Function(script.textContent)();
                } catch (error) {
                    console.warn('‚ö†Ô∏è Error executing inline script:', error);
                }
            }
        }

        // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        container.dispatchEvent(new CustomEvent('componentReady', {
            detail: { container }
        }));
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
     */
    _loadExternalScript(src) {
        return new Promise((resolve, reject) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —É–∂–µ —Å–∫—Ä–∏–ø—Ç
            if (document.querySelector(`script[src="${src}"]`)) {
                resolve();
                return;
            }

            const script = document.createElement('script');
            script.src = src;
            script.onload = resolve;
            script.onerror = () => reject(new Error(`Failed to load script: ${src}`));
            document.head.appendChild(script);
        });
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
     */
    async loadComponents(components) {
        const promises = components.map(comp => 
            this.loadComponent(comp.path, comp.container, comp.options || {})
        );

        try {
            const results = await Promise.allSettled(promises);

            const successful = results.filter(r => r.status === 'fulfilled');
            const failed = results.filter(r => r.status === 'rejected');

            console.log(`üì¶ Components loaded: ${successful.length}/${components.length} successful`);

            if (failed.length > 0) {
                console.warn('‚ö†Ô∏è Some components failed to load:', 
                    failed.map(f => f.reason.message)
                );
            }

            return {
                successful: successful.map(r => r.value),
                failed: failed.map(r => r.reason)
            };

        } catch (error) {
            console.error('‚ùå Critical error loading components:', error);
            throw error;
        }
    }

    /**
     * –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
     */
    async preloadComponents(paths) {
        const promises = paths.map(async path => {
            try {
                const html = await this._fetchWithRetry(path);
                this.cache.set(path, html);
                console.log(`üì¶ Preloaded: ${path}`);
            } catch (error) {
                console.warn(`‚ö†Ô∏è Preload failed for ${path}:`, error.message);
            }
        });

        await Promise.allSettled(promises);
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
     */
    clearCache(path = null) {
        if (path) {
            this.cache.delete(path);
            console.log(`üóëÔ∏è Cache cleared for: ${path}`);
        } else {
            this.cache.clear();
            console.log('üóëÔ∏è All cache cleared');
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    getStats() {
        return {
            cacheSize: this.cache.size,
            cachedComponents: Array.from(this.cache.keys()),
            loadingInProgress: this.loadingPromises.size
        };
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç
window.ComponentLoader = ComponentLoader;

console.log('üîß ComponentLoader loaded');
