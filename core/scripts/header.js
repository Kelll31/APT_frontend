/**
 * core/scripts/header.js
 * HeaderManager ‚Äî –û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂er header –¥–ª—è IP Roast Enterprise 4.0
 * 
 * –ó–∞–≤–∏—Å–∏—Ç –æ—Ç:
 * - window.ThemeManager (–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä)
 * - window.NotificationSystem (–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä)
 */
(function () {
    'use strict';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω HeaderManager
    if (typeof window.HeaderManager !== 'undefined') {
        console.log('‚ö†Ô∏è HeaderManager —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é');
        return;
    }

    class HeaderManager {
        constructor() {
            // –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã header
            this.elements = {
                header: document.getElementById('main-header'),
                pageTitle: document.getElementById('page-title'),
                breadcrumb: document.getElementById('breadcrumb'),
                notificationsBtn: document.getElementById('notifications-btn'),
                notificationsPopup: document.getElementById('notifications-popup'),
                fullscreenBtn: document.getElementById('fullscreen-btn'),
                userBtn: document.getElementById('user-btn'),
                userMenu: document.getElementById('user-menu'),
                themeToggleBtn: document.getElementById('theme-toggle-btn')
            };

            // –°–æ—Å—Ç–æ—è–Ω–∏–µ header
            this.state = {
                isFullscreen: false,
                isUserMenuOpen: false
            };

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            this.initializeSystems();
            this.init();
        }

        /**
         * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º
         */
        initializeSystems() {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ThemeManager
            if (window.ThemeManager && typeof window.ThemeManager === 'function') {
                try {
                    this.themeManager = new window.ThemeManager();
                    console.log('‚úÖ ThemeManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ HeaderManager');
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ThemeManager:', error);
                    this.themeManager = null;
                }
            } else {
                console.warn('‚ö†Ô∏è ThemeManager –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É');
                this.themeManager = this.createThemeManagerStub();
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å NotificationSystem
            if (window.NotificationSystem && typeof window.NotificationSystem === 'function') {
                try {
                    this.notifications = new window.NotificationSystem();
                    console.log('‚úÖ NotificationSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ HeaderManager');
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è NotificationSystem:', error);
                    this.notifications = null;
                }
            } else {
                console.warn('‚ö†Ô∏è NotificationSystem –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É');
                this.notifications = this.createNotificationSystemStub();
            }
        }

        /**
         * –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è ThemeManager
         */
        createThemeManagerStub() {
            return {
                toggleTheme: () => {
                    console.warn('‚ö†Ô∏è ThemeManager –∑–∞–≥–ª—É—à–∫–∞: toggleTheme –≤—ã–∑–≤–∞–Ω');
                    // –ü—Ä–æ—Å—Ç–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
                    const root = document.documentElement;
                    const currentTheme = root.getAttribute('data-theme') || 'light';
                    const newTheme = currentTheme === 'light' ? 'dark' : 'light';
                    root.setAttribute('data-theme', newTheme);
                    root.style.colorScheme = newTheme;

                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
                    const btn = document.getElementById('theme-toggle-btn');
                    if (btn) {
                        btn.textContent = newTheme === 'light' ? 'üåô' : '‚òÄÔ∏è';
                    }
                },
                getCurrentTheme: () => document.documentElement.getAttribute('data-theme') || 'light',
                setTheme: (theme) => {
                    document.documentElement.setAttribute('data-theme', theme);
                    document.documentElement.style.colorScheme = theme;
                }
            };
        }

        /**
         * –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è NotificationSystem
         */
        createNotificationSystemStub() {
            return {
                show: (message, type = 'info') => {
                    console.warn('‚ö†Ô∏è NotificationSystem –∑–∞–≥–ª—É—à–∫–∞:', message, type);
                    // –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ alert (–≤—Ä–µ–º–µ–Ω–Ω–æ)
                    if (type === 'error') {
                        alert(`–û—à–∏–±–∫–∞: ${message}`);
                    }
                    return Date.now().toString();
                },
                success: (message) => this.show(message, 'success'),
                error: (message) => this.show(message, 'error'),
                warning: (message) => this.show(message, 'warning'),
                info: (message) => this.show(message, 'info'),
                getLast: () => [],
                delete: () => { },
                clear: () => { },
                markAsRead: () => { },
                getUnreadCount: () => 0
            };
        }

        /**
         * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HeaderManager
         */
        init() {
            console.log('üöÄ HeaderManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...');

            if (!this.elements.header) {
                console.error('HeaderManager: —ç–ª–µ–º–µ–Ω—Ç #main-header –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            this.setupEventListeners();
            this.setupFullscreen();
            this.updateNotificationBadge();

            console.log('‚úÖ HeaderManager –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }

        /**
         * –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥ addNotification –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å IPRoastApp
         */
        addNotification(options) {
            if (!this.notifications) {
                console.warn('‚ö†Ô∏è NotificationSystem –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                return null;
            }

            const { title, message, type = 'info' } = options;

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –µ—Å–ª–∏ –µ—Å—Ç—å
            const fullMessage = title ? `${title}: ${message}` : message;

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ NotificationSystem
            return this.notifications.show(fullMessage, type, {
                title: title,
                closable: true,
                duration: type === 'error' ? 8000 : 5000
            });
        }

        /**
         * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
         */
        updatePageTitle(title) {
            if (this.elements.pageTitle) {
                this.elements.pageTitle.textContent = title;
                console.log(`üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±–Ω–æ–≤–ª–µ–Ω: ${title}`);
            }
        }

        /**
         * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
         */
        setLoading(isLoading) {
            if (this.elements.header) {
                if (isLoading) {
                    this.elements.header.classList.add('loading');
                } else {
                    this.elements.header.classList.remove('loading');
                }
            }
        }

        /**
         * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
         */
        setupEventListeners() {
            // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
            this.elements.themeToggleBtn?.addEventListener('click', e => {
                e.preventDefault();
                if (this.themeManager) {
                    this.themeManager.toggleTheme();
                }
            });

            // Dropdown —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            this.elements.notificationsBtn?.addEventListener('click', e => {
                e.preventDefault();
                this.toggleNotificationsPopup();
            });

            // Fullscreen
            this.elements.fullscreenBtn?.addEventListener('click', e => {
                e.preventDefault();
                this.toggleFullscreen();
            });

            // User menu
            this.elements.userBtn?.addEventListener('click', e => {
                e.preventDefault();
                this.toggleUserMenu();
            });

            // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ
            document.addEventListener('click', e => this.handleOutsideClick(e));

            // Escape
            document.addEventListener('keydown', e => {
                if (e.key === 'Escape') {
                    this.closeNotificationsPopup();
                    if (this.state.isUserMenuOpen) this.toggleUserMenu();
                }
            });

            console.log('‚ö° –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π header –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        }

        /**
         * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ dropdown —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
         */
        toggleNotificationsPopup() {
            const btn = this.elements.notificationsBtn;
            const popup = this.elements.notificationsPopup;
            if (!btn || !popup || !this.notifications) return;

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            const list = this.notifications.getLast(10);

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            const itemsHTML = list.length
                ? list.map(item => {
                    // –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É –∏–∑ NotificationSystem
                    const iconHtml = typeof this.notifications.getIcon === 'function'
                        ? this.notifications.getIcon(item.type)
                        : '';

                    const time = new Date(item.timestamp).toLocaleTimeString();

                    return `
                <div class="notification-item" data-id="${item.id}">
                    <div class="notification-icon">${iconHtml}</div>
                    <div class="notification-content">
                        <div class="notification-title">${item.title || ''}</div>
                        <div class="notification-message">${item.message}</div>
                        <div class="notification-timestamp">${time}</div>
                    </div>
                </div>
            `;
                }).join('')
                : `<div class="notification-empty">–ù–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</div>`;

            // –í—Å—Ç–∞–≤–ª—è–µ–º –≤ popup
            popup.innerHTML = `
        <div class="notifications-header">
            <span>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</span>
            <button class="notifications-clear-btn">–û—á–∏—Å—Ç–∏—Ç—å</button>
        </div>
        <div class="notifications-list">
            ${itemsHTML}
        </div>
    `;

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–ª–∏ —Å–∫—Ä—ã–≤–∞–µ–º popup
            const isVisible = popup.classList.toggle('visible');

            // –ï—Å–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, –Ω–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–Ω—É—Ç—Ä–∏ popup
            if (isVisible) {
                // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                popup.querySelector('.notifications-clear-btn')
                    .addEventListener('click', e => {
                        e.stopPropagation();
                        this.notifications.clear();
                        popup.querySelector('.notifications-list').innerHTML = `<div class="notification-empty">–ù–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</div>`;
                    });

                // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ popup
                document.addEventListener('click', this.handleOutsideClick.bind(this));

            } else {
                document.removeEventListener('click', this.handleOutsideClick.bind(this));
            }
        }


        /**
         * –ó–∞–∫—Ä—ã—Ç–∏–µ popup —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
         */
        closeNotificationsPopup() {
            if (this.elements.notificationsPopup) {
                this.elements.notificationsPopup.classList.remove('active');
            }
        }

        /**
         * –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
         */
        deleteNotification(id) {
            if (this.notifications) {
                this.notifications.delete(id);
                this.updateNotificationBadge();
                this.toggleNotificationsPopup(); // –û–±–Ω–æ–≤–ª—è–µ–º popup
            }
        }

        /**
         * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
         */
        clearAllNotifications() {
            if (this.notifications) {
                this.notifications.clear();
                this.updateNotificationBadge();
                this.closeNotificationsPopup();
            }
        }

        /**
         * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ fullscreen —Ä–µ–∂–∏–º–∞
         */
        toggleFullscreen() {
            if (!document.fullscreenElement) {
                document.documentElement.requestFullscreen().then(() => {
                    this.state.isFullscreen = true;
                    this.updateFullscreenButton();
                }).catch(err => {
                    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ fullscreen:', err);
                });
            } else {
                document.exitFullscreen().then(() => {
                    this.state.isFullscreen = false;
                    this.updateFullscreenButton();
                }).catch(err => {
                    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ fullscreen:', err);
                });
            }
        }

        /**
         * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ fullscreen
         */
        setupFullscreen() {
            document.addEventListener('fullscreenchange', () => {
                this.state.isFullscreen = !!document.fullscreenElement;
                this.updateFullscreenButton();
            });
        }

        /**
         * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ fullscreen
         */
        updateFullscreenButton() {
            if (this.elements.fullscreenBtn) {
                const icon = this.state.isFullscreen ? '‚õ∂' : '‚õ∂';
                this.elements.fullscreenBtn.innerHTML = `<span class="btn-icon">${icon}</span>`;
                this.elements.fullscreenBtn.title = this.state.isFullscreen ? '–í—ã–π—Ç–∏ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞' : '–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º';
            }
        }

        /**
         * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ user menu
         */
        toggleUserMenu() {
            this.state.isUserMenuOpen = !this.state.isUserMenuOpen;

            if (this.elements.userBtn) {
                this.elements.userBtn.setAttribute('aria-expanded', this.state.isUserMenuOpen.toString());
            }

            if (this.elements.userMenu) {
                if (this.state.isUserMenuOpen) {
                    this.elements.userMenu.classList.add('active');
                } else {
                    this.elements.userMenu.classList.remove('active');
                }
            }
        }

        /**
         * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–π–¥–∂–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
         */
        updateNotificationBadge() {
            if (!this.elements.notificationsBtn || !this.notifications) return;

            const count = this.notifications.getUnreadCount();
            let badge = this.elements.notificationsBtn.querySelector('.notification-badge');

            if (count > 0) {
                if (!badge) {
                    badge = document.createElement('span');
                    badge.className = 'notification-badge';
                    this.elements.notificationsBtn.appendChild(badge);
                }
                badge.textContent = count > 99 ? '99+' : count.toString();
            } else if (badge) {
                badge.remove();
            }
        }

        /**
         * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –≤–Ω–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
         */
        handleOutsideClick(e) {
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º notifications popup
            if (this.elements.notificationsPopup &&
                this.elements.notificationsPopup.classList.contains('active') &&
                !this.elements.notificationsBtn?.contains(e.target) &&
                !this.elements.notificationsPopup.contains(e.target)) {
                this.closeNotificationsPopup();
            }

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º user menu
            if (this.state.isUserMenuOpen &&
                !this.elements.userBtn?.contains(e.target) &&
                !this.elements.userMenu?.contains(e.target)) {
                this.toggleUserMenu();
            }
        }

        /**
         * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
         */
        getNotificationIcon(type) {
            const icons = {
                'success': '‚úÖ',
                'error': '‚ùå',
                'warning': '‚ö†Ô∏è',
                'info': '‚ÑπÔ∏è'
            };
            return icons[type] || icons.info;
        }

        /**
         * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
         */
        formatTime(timestamp) {
            const now = new Date();
            const time = new Date(timestamp);
            const diff = now - time;

            if (diff < 60000) { // –º–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã
                return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
            } else if (diff < 3600000) { // –º–µ–Ω–µ–µ —á–∞—Å–∞
                return `${Math.floor(diff / 60000)} –º–∏–Ω –Ω–∞–∑–∞–¥`;
            } else if (diff < 86400000) { // –º–µ–Ω–µ–µ –¥–Ω—è
                return `${Math.floor(diff / 3600000)} —á –Ω–∞–∑–∞–¥`;
            } else {
                return time.toLocaleDateString();
            }
        }

        /**
         * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ HeaderManager
         */
        destroy() {
            // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∏ —Å–ª—É—à–∞—Ç–µ–ª–∏
            console.log('üóëÔ∏è HeaderManager —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
        }
    }

    // –≠–∫—Å–ø–æ—Ä—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
    window.HeaderManager = HeaderManager;
    console.log('‚úÖ HeaderManager –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å addNotification)');
})();