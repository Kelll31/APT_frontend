/**
 * Header.js - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º header –∏ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
 * IP Roast Enterprise 4.0
 */

class HeaderManager {
    constructor() {
        this.elements = {
            header: null,
            pageTitle: null,
            breadcrumb: null,
            notificationsBtn: null,
            fullscreenBtn: null,
            userBtn: null,
            userMenu: null
        };

        this.state = {
            isFullscreen: false,
            notificationsCount: 0,
            isUserMenuOpen: false
        };

        this.notifications = [];
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è header –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    init() {
        this.findElements();
        this.setupEventListeners();
        this.updateNotificationBadge();
        this.setupFullscreen();
        this.startPeriodicUpdates();

        console.log('‚úÖ Header –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –ü–æ–∏—Å–∫ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    findElements() {
        // –ù–µ –∏—â–µ–º —á–µ—Ä–µ–∑ header-container, –Ω–∞–ø—Ä—è–º—É—é –∏—â–µ–º ID-—à–Ω–∏–∫–∏
        this.elements.header = document.getElementById('main-header');
        this.elements.pageTitle = document.getElementById('page-title');
        this.elements.breadcrumb = document.getElementById('breadcrumb');
        this.elements.notificationsBtn = document.getElementById('notifications-btn');
        this.elements.fullscreenBtn = document.getElementById('fullscreen-btn');
        this.elements.userBtn = document.getElementById('user-btn');
        this.elements.userMenu = document.getElementById('user-menu');

        if (!this.elements.header) {
            console.error('‚ùå HeaderManager: —ç–ª–µ–º–µ–Ω—Ç #main-header –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        console.log('üîç Header —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (this.elements.notificationsBtn) {
            this.elements.notificationsBtn.addEventListener('click', (e) => {
                e.preventDefault();
                this.toggleNotifications();
            });
        }

        // –ö–Ω–æ–ø–∫–∞ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        if (this.elements.fullscreenBtn) {
            this.elements.fullscreenBtn.addEventListener('click', (e) => {
                e.preventDefault();
                this.toggleFullscreen();
            });
        }

        // –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (this.elements.userBtn) {
            this.elements.userBtn.addEventListener('click', (e) => {
                e.preventDefault();
                this.toggleUserMenu();
            });
        }

        // –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        document.addEventListener('fullscreenchange', () => {
            this.handleFullscreenChange();
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ
        document.addEventListener('click', (e) => {
            this.handleClickOutside(e);
        });

        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —à–æ—Ä—Ç–∞–∫—Ç—ã
        document.addEventListener('keydown', (e) => {
            this.handleKeydown(e);
        });

        console.log('‚ö° Header –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    updatePageTitle(title, subtitle = null) {
        if (this.elements.pageTitle) {
            this.elements.pageTitle.textContent = title;
            document.title = `${title} - IP Roast Enterprise`;
        }

        this.updateBreadcrumb(title, subtitle);
        console.log(`üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω: ${title}`);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ breadcrumb –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    updateBreadcrumb(current, parent = null) {
        if (!this.elements.breadcrumb) return;

        const breadcrumbItems = [];

        // –ì–ª–∞–≤–Ω–∞—è –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤–∞—è
        breadcrumbItems.push({
            text: '–ì–ª–∞–≤–Ω–∞—è',
            active: false,
            href: '#dashboard'
        });

        // –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        if (parent) {
            breadcrumbItems.push({
                text: parent,
                active: false,
                href: '#'
            });
        }

        // –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        breadcrumbItems.push({
            text: current,
            active: true,
            href: null
        });

        // –°–æ–∑–¥–∞–µ–º HTML
        const breadcrumbHTML = breadcrumbItems.map((item, index) => {
            const isLast = index === breadcrumbItems.length - 1;
            const itemHTML = item.active ?
                `<span class="breadcrumb-item active">${item.text}</span>` :
                `<a href="${item.href}" class="breadcrumb-item">${item.text}</a>`;

            const separatorHTML = isLast ? '' : '<span class="breadcrumb-separator">/</span>';

            return itemHTML + separatorHTML;
        }).join('');

        this.elements.breadcrumb.innerHTML = breadcrumbHTML;
    }

    /**
     * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
     */
    addNotification(notification) {
        const id = Date.now().toString();
        const newNotification = {
            id,
            title: notification.title,
            message: notification.message,
            type: notification.type || 'info',
            timestamp: new Date(),
            read: false
        };

        this.notifications.unshift(newNotification);

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (this.notifications.length > 50) {
            this.notifications = this.notifications.slice(0, 50);
        }

        this.updateNotificationBadge();
        this.showToast(newNotification);

        console.log('üîî –î–æ–±–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', newNotification.title);
    }

    /**
     * –ü–æ–∫–∞–∑ toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    showToast(notification) {
        const toast = this.createToastElement(notification);
        const container = this.getToastContainer();

        container.appendChild(toast);

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        requestAnimationFrame(() => {
            toast.classList.add('show');
        });

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        setTimeout(() => {
            this.hideToast(toast);
        }, 5000);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ toast
     */
    createToastElement(notification) {
        const toast = document.createElement('div');
        toast.className = `toast ${notification.type}`;
        toast.dataset.id = notification.id;

        const icons = {
            success: '‚úÖ',
            error: '‚ùå',
            warning: '‚ö†Ô∏è',
            info: '‚ÑπÔ∏è'
        };

        toast.innerHTML = `
      <div class="toast-icon">${icons[notification.type] || icons.info}</div>
      <div class="toast-content">
        <div class="toast-title">${notification.title}</div>
        <div class="toast-message">${notification.message}</div>
      </div>
      <button class="toast-close" aria-label="–ó–∞–∫—Ä—ã—Ç—å">√ó</button>
    `;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        const closeBtn = toast.querySelector('.toast-close');
        closeBtn.addEventListener('click', () => {
            this.hideToast(toast);
        });

        return toast;
    }

    /**
     * –°–∫—Ä—ã—Ç–∏–µ toast
     */
    hideToast(toast) {
        toast.classList.remove('show');
        setTimeout(() => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
        }, 300);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è toast
     */
    getToastContainer() {
        let container = document.querySelector('.toast-container');
        if (!container) {
            container = document.createElement('div');
            container.className = 'toast-container';
            document.body.appendChild(container);
        }
        return container;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–π–¥–∂–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    updateNotificationBadge() {
        const unreadCount = this.notifications.filter(n => !n.read).length;
        this.state.notificationsCount = unreadCount;

        if (this.elements.notificationsBtn) {
            const badge = this.elements.notificationsBtn.querySelector('.notification-badge');
            if (badge) {
                if (unreadCount > 0) {
                    badge.textContent = unreadCount > 99 ? '99+' : unreadCount.toString();
                    badge.style.display = 'flex';
                } else {
                    badge.style.display = 'none';
                }
            }
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    toggleNotifications() {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–ª–∏ –≤—ã–¥–≤–∏–∂–Ω—É—é –ø–∞–Ω–µ–ª—å —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        console.log('üîî –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');

        // –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
        this.notifications.forEach(n => n.read = true);
        this.updateNotificationBadge();

        // –ü—Ä–∏–º–µ—Ä: —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        this.showNotificationsModal();
    }

    /**
     * –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
     */
    showNotificationsModal() {
        const modal = document.createElement('div');
        modal.className = 'notifications-modal';
        modal.innerHTML = `
      <div class="modal-overlay">
        <div class="modal-content">
          <div class="modal-header">
            <h3>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
            <button class="modal-close">√ó</button>
          </div>
          <div class="modal-body">
            ${this.renderNotificationsList()}
          </div>
        </div>
      </div>
    `;

        document.body.appendChild(modal);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        const closeBtn = modal.querySelector('.modal-close');
        const overlay = modal.querySelector('.modal-overlay');

        closeBtn.addEventListener('click', () => this.closeModal(modal));
        overlay.addEventListener('click', (e) => {
            if (e.target === overlay) this.closeModal(modal);
        });

        requestAnimationFrame(() => {
            modal.classList.add('show');
        });
    }

    /**
     * –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    renderNotificationsList() {
        if (this.notifications.length === 0) {
            return '<div class="empty-notifications">–ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</div>';
        }

        return this.notifications.slice(0, 10).map(notification => `
      <div class="notification-item ${notification.type}">
        <div class="notification-header">
          <span class="notification-title">${notification.title}</span>
          <span class="notification-time">${this.formatTime(notification.timestamp)}</span>
        </div>
        <div class="notification-message">${notification.message}</div>
      </div>
    `).join('');
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
     */
    formatTime(timestamp) {
        const now = new Date();
        const diff = now - timestamp;
        const minutes = Math.floor(diff / 60000);

        if (minutes < 1) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
        if (minutes < 60) return `${minutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;

        const hours = Math.floor(minutes / 60);
        if (hours < 24) return `${hours} —á –Ω–∞–∑–∞–¥`;

        const days = Math.floor(hours / 24);
        return `${days} –¥–Ω –Ω–∞–∑–∞–¥`;
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    closeModal(modal) {
        modal.classList.remove('show');
        setTimeout(() => {
            if (modal.parentNode) {
                modal.parentNode.removeChild(modal);
            }
        }, 300);
    }

    /**
     * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º
     */
    toggleFullscreen() {
        if (!document.fullscreenElement) {
            document.documentElement.requestFullscreen().catch(err => {
                console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º:', err);
            });
        } else {
            document.exitFullscreen().catch(err => {
                console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞:', err);
            });
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
     */
    setupFullscreen() {
        if (!document.fullscreenEnabled) {
            if (this.elements.fullscreenBtn) {
                this.elements.fullscreenBtn.style.display = 'none';
            }
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
     */
    handleFullscreenChange() {
        this.state.isFullscreen = !!document.fullscreenElement;

        if (this.elements.fullscreenBtn) {
            const icon = this.elements.fullscreenBtn.querySelector('.btn-icon');
            if (icon) {
                icon.textContent = this.state.isFullscreen ? '‚õ∂' : '‚õ∂';
            }
        }

        console.log('üñ•Ô∏è –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º:', this.state.isFullscreen);
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    toggleUserMenu() {
        this.state.isUserMenuOpen = !this.state.isUserMenuOpen;

        if (this.elements.userBtn) {
            this.elements.userBtn.setAttribute('aria-expanded', this.state.isUserMenuOpen.toString());
        }

        if (this.state.isUserMenuOpen) {
            this.showUserMenu();
        } else {
            this.hideUserMenu();
        }
    }

    /**
     * –ü–æ–∫–∞–∑ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    showUserMenu() {
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
        this.hideUserMenu();

        const menu = document.createElement('div');
        menu.className = 'user-dropdown-menu';
        menu.innerHTML = `
      <div class="user-menu-item">
        <span class="menu-icon">üë§</span>
        <span class="menu-text">–ü—Ä–æ—Ñ–∏–ª—å</span>
      </div>
      <div class="user-menu-item">
        <span class="menu-icon">‚öôÔ∏è</span>
        <span class="menu-text">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</span>
      </div>
      <div class="user-menu-item">
        <span class="menu-icon">üåô</span>
        <span class="menu-text">–¢–µ–º–Ω–∞—è —Ç–µ–º–∞</span>
      </div>
      <div class="user-menu-divider"></div>
      <div class="user-menu-item">
        <span class="menu-icon">üö™</span>
        <span class="menu-text">–í—ã—Ö–æ–¥</span>
      </div>
    `;

        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –º–µ–Ω—é
        const userBtn = this.elements.userBtn;
        const rect = userBtn.getBoundingClientRect();
        menu.style.position = 'fixed';
        menu.style.top = `${rect.bottom + 8}px`;
        menu.style.right = `${window.innerWidth - rect.right}px`;
        menu.style.zIndex = '9999';

        document.body.appendChild(menu);

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        requestAnimationFrame(() => {
            menu.classList.add('show');
        });

        this.elements.userMenu = menu;
    }

    /**
     * –°–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    hideUserMenu() {
        if (this.elements.userMenu) {
            this.elements.userMenu.remove();
            this.elements.userMenu = null;
        }
        this.state.isUserMenuOpen = false;

        if (this.elements.userBtn) {
            this.elements.userBtn.setAttribute('aria-expanded', 'false');
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –≤–Ω–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    handleClickOutside(e) {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (this.state.isUserMenuOpen &&
            !this.elements.userBtn?.contains(e.target) &&
            !this.elements.userMenu?.contains(e.target)) {
            this.hideUserMenu();
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
     */
    handleKeydown(e) {
        // F11 - –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        if (e.key === 'F11') {
            e.preventDefault();
            this.toggleFullscreen();
        }

        // Escape - –∑–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é
        if (e.key === 'Escape') {
            if (this.state.isUserMenuOpen) {
                this.hideUserMenu();
            }
        }
    }

    /**
     * –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    startPeriodicUpdates() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        setInterval(() => {
            const modal = document.querySelector('.notifications-modal');
            if (modal) {
                const body = modal.querySelector('.modal-body');
                if (body) {
                    body.innerHTML = this.renderNotificationsList();
                }
            }
        }, 60000);
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
     */
    setLoading(isLoading) {
        if (this.elements.header) {
            if (isLoading) {
                this.elements.header.classList.add('loading');
            } else {
                this.elements.header.classList.remove('loading');
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è header
     */
    getState() {
        return {
            ...this.state,
            notificationsCount: this.notifications.filter(n => !n.read).length
        };
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ header –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    destroy() {
        // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        document.removeEventListener('fullscreenchange', this.handleFullscreenChange);
        document.removeEventListener('click', this.handleClickOutside);
        document.removeEventListener('keydown', this.handleKeydown);

        // –û—á–∏—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        this.hideUserMenu();

        console.log('üóëÔ∏è Header –º–µ–Ω–µ–¥–∂–µ—Ä —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç
window.HeaderManager = HeaderManager;

// –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    if (!window.headerManager) {
        window.headerManager = new HeaderManager();
    }
});