{
    "root": true,
    "env": {
        "browser": true,
        "es2022": true,
        "node": true,
        "jest": true,
        "cypress/globals": true
    },
    "extends": [
        "eslint:recommended",
        "@typescript-eslint/recommended",
        "@typescript-eslint/recommended-requiring-type-checking",
        "plugin:react/recommended",
        "plugin:react/jsx-runtime",
        "plugin:react-hooks/recommended",
        "plugin:jsx-a11y/recommended",
        "plugin:import/recommended",
        "plugin:import/typescript",
        "plugin:security/recommended",
        "plugin:sonarjs/recommended",
        "plugin:unicorn/recommended",
        "plugin:promise/recommended",
        "plugin:@typescript-eslint/strict",
        "plugin:testing-library/react",
        "plugin:jest-dom/recommended",
        "plugin:cypress/recommended",
        "prettier"
    ],
    "plugins": [
        "@typescript-eslint",
        "react",
        "react-hooks",
        "jsx-a11y",
        "import",
        "security",
        "sonarjs",
        "unicorn",
        "promise",
        "testing-library",
        "jest-dom",
        "cypress",
        "prefer-arrow",
        "unused-imports",
        "simple-import-sort",
        "sort-keys-fix",
        "sort-destructure-keys"
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "ecmaVersion": 2022,
        "sourceType": "module",
        "ecmaFeatures": {
            "jsx": true
        },
        "project": [
            "./tsconfig.json",
            "./tsconfig.node.json"
        ],
        "tsconfigRootDir": "."
    },
    "settings": {
        "react": {
            "version": "detect"
        },
        "import/resolver": {
            "typescript": {
                "alwaysTryTypes": true,
                "project": "./tsconfig.json"
            },
            "node": {
                "extensions": [
                    ".js",
                    ".jsx",
                    ".ts",
                    ".tsx",
                    ".json"
                ]
            }
        },
        "import/extensions": [
            ".js",
            ".jsx",
            ".ts",
            ".tsx"
        ],
        "import/parsers": {
            "@typescript-eslint/parser": [
                ".ts",
                ".tsx"
            ]
        }
    },
    "rules": {
        // ===== TYPESCRIPT RULES =====
        "@typescript-eslint/no-unused-vars": [
            "error",
            {
                "argsIgnorePattern": "^_",
                "varsIgnorePattern": "^_",
                "caughtErrorsIgnorePattern": "^_"
            }
        ],
        "@typescript-eslint/no-explicit-any": "warn",
        "@typescript-eslint/no-non-null-assertion": "warn",
        "@typescript-eslint/prefer-nullish-coalescing": "error",
        "@typescript-eslint/prefer-optional-chain": "error",
        "@typescript-eslint/strict-boolean-expressions": [
            "error",
            {
                "allowString": false,
                "allowNumber": false,
                "allowNullableObject": false,
                "allowNullableBoolean": false,
                "allowNullableString": false,
                "allowNullableNumber": false,
                "allowAny": false
            }
        ],
        "@typescript-eslint/prefer-readonly": "error",
        "@typescript-eslint/prefer-readonly-parameter-types": "off",
        "@typescript-eslint/explicit-function-return-type": [
            "warn",
            {
                "allowExpressions": true,
                "allowTypedFunctionExpressions": true,
                "allowHigherOrderFunctions": true
            }
        ],
        "@typescript-eslint/explicit-module-boundary-types": "warn",
        "@typescript-eslint/no-unnecessary-type-assertion": "error",
        "@typescript-eslint/no-unsafe-assignment": "error",
        "@typescript-eslint/no-unsafe-call": "error",
        "@typescript-eslint/no-unsafe-member-access": "error",
        "@typescript-eslint/no-unsafe-return": "error",
        "@typescript-eslint/restrict-template-expressions": "error",
        "@typescript-eslint/consistent-type-definitions": [
            "error",
            "interface"
        ],
        "@typescript-eslint/consistent-type-imports": [
            "error",
            {
                "prefer": "type-imports",
                "disallowTypeAnnotations": false
            }
        ],
        "@typescript-eslint/consistent-type-exports": "error",
        "@typescript-eslint/method-signature-style": [
            "error",
            "property"
        ],
        "@typescript-eslint/naming-convention": [
            "error",
            {
                "selector": "variableLike",
                "format": [
                    "camelCase",
                    "PascalCase",
                    "UPPER_CASE"
                ]
            },
            {
                "selector": "typeLike",
                "format": [
                    "PascalCase"
                ]
            },
            {
                "selector": "interface",
                "format": [
                    "PascalCase"
                ],
                "prefix": [
                    "I"
                ],
                "filter": {
                    "regex": "^(?!Props$|^State$)",
                    "match": true
                }
            },
            {
                "selector": "enum",
                "format": [
                    "PascalCase"
                ],
                "suffix": [
                    "Enum"
                ]
            }
        ],
        "@typescript-eslint/no-magic-numbers": [
            "warn",
            {
                "ignore": [
                    -1,
                    0,
                    1,
                    2
                ],
                "ignoreArrayIndexes": true,
                "ignoreDefaultValues": true,
                "ignoreClassFieldInitialValues": true
            }
        ],
        "@typescript-eslint/prefer-enum-initializers": "error",
        "@typescript-eslint/prefer-literal-enum-member": "error",
        "@typescript-eslint/promise-function-async": "error",
        "@typescript-eslint/require-array-sort-compare": "error",
        "@typescript-eslint/switch-exhaustiveness-check": "error",
        // ===== REACT RULES =====
        "react/react-in-jsx-scope": "off",
        "react/prop-types": "off",
        "react/display-name": "warn",
        "react/no-array-index-key": "error",
        "react/no-danger": "error",
        "react/no-deprecated": "error",
        "react/no-direct-mutation-state": "error",
        "react/no-unused-prop-types": "error",
        "react/no-unused-state": "error",
        "react/prefer-stateless-function": "error",
        "react/self-closing-comp": "error",
        "react/sort-comp": "error",
        "react/jsx-boolean-value": [
            "error",
            "never"
        ],
        "react/jsx-closing-bracket-location": "error",
        "react/jsx-closing-tag-location": "error",
        "react/jsx-curly-spacing": [
            "error",
            "never"
        ],
        "react/jsx-fragments": [
            "error",
            "syntax"
        ],
        "react/jsx-no-bind": [
            "error",
            {
                "allowArrowFunctions": true,
                "allowBind": false,
                "allowFunctions": false
            }
        ],
        "react/jsx-no-duplicate-props": "error",
        "react/jsx-no-target-blank": "error",
        "react/jsx-no-undef": "error",
        "react/jsx-pascal-case": "error",
        "react/jsx-props-no-spreading": [
            "warn",
            {
                "html": "enforce",
                "custom": "ignore",
                "explicitSpread": "ignore"
            }
        ],
        "react/jsx-sort-props": [
            "error",
            {
                "callbacksLast": true,
                "shorthandFirst": true,
                "ignoreCase": true
            }
        ],
        "react/jsx-uses-react": "off",
        "react/jsx-uses-vars": "error",
        "react/jsx-wrap-multilines": [
            "error",
            {
                "declaration": "parens-new-line",
                "assignment": "parens-new-line",
                "return": "parens-new-line",
                "arrow": "parens-new-line",
                "condition": "parens-new-line",
                "logical": "parens-new-line",
                "prop": "parens-new-line"
            }
        ],
        // ===== REACT HOOKS RULES =====
        "react-hooks/rules-of-hooks": "error",
        "react-hooks/exhaustive-deps": "warn",
        // ===== ACCESSIBILITY RULES =====
        "jsx-a11y/anchor-is-valid": "error",
        "jsx-a11y/alt-text": "error",
        "jsx-a11y/aria-role": "error",
        "jsx-a11y/click-events-have-key-events": "error",
        "jsx-a11y/label-has-associated-control": "error",
        "jsx-a11y/no-autofocus": "warn",
        "jsx-a11y/no-static-element-interactions": "error",
        // ===== IMPORT RULES =====
        "import/order": [
            "error",
            {
                "groups": [
                    "builtin",
                    "external",
                    "internal",
                    "parent",
                    "sibling",
                    "index",
                    "object",
                    "type"
                ],
                "pathGroups": [
                    {
                        "pattern": "react",
                        "group": "external",
                        "position": "before"
                    },
                    {
                        "pattern": "@/**",
                        "group": "internal"
                    }
                ],
                "pathGroupsExcludedImportTypes": [
                    "react"
                ],
                "newlines-between": "always",
                "alphabetize": {
                    "order": "asc",
                    "caseInsensitive": true
                }
            }
        ],
        "import/no-unresolved": "error",
        "import/no-cycle": "error",
        "import/no-unused-modules": "warn",
        "import/no-deprecated": "warn",
        "import/no-extraneous-dependencies": [
            "error",
            {
                "devDependencies": [
                    "**/*.test.*",
                    "**/*.spec.*",
                    "**/__tests__/**",
                    "**/cypress/**",
                    "**/vite.config.*",
                    "**/vitest.config.*",
                    "**/tailwind.config.*"
                ]
            }
        ],
        "import/prefer-default-export": "off",
        "import/no-default-export": "off",
        // ===== SECURITY RULES =====
        "security/detect-object-injection": "warn",
        "security/detect-non-literal-regexp": "warn",
        "security/detect-unsafe-regex": "error",
        "security/detect-buffer-noassert": "error",
        "security/detect-child-process": "error",
        "security/detect-disable-mustache-escape": "error",
        "security/detect-eval-with-expression": "error",
        "security/detect-no-csrf-before-method-override": "error",
        "security/detect-non-literal-fs-filename": "warn",
        "security/detect-non-literal-require": "warn",
        "security/detect-possible-timing-attacks": "warn",
        "security/detect-pseudoRandomBytes": "error",
        // ===== SONARJS RULES =====
        "sonarjs/cognitive-complexity": [
            "error",
            15
        ],
        "sonarjs/max-switch-cases": [
            "error",
            10
        ],
        "sonarjs/no-duplicate-string": [
            "error",
            3
        ],
        "sonarjs/no-identical-functions": "error",
        "sonarjs/no-redundant-boolean": "error",
        "sonarjs/no-unused-collection": "error",
        "sonarjs/prefer-immediate-return": "error",
        "sonarjs/prefer-object-literal": "error",
        "sonarjs/prefer-single-boolean-return": "error",
        // ===== UNICORN RULES =====
        "unicorn/prevent-abbreviations": [
            "error",
            {
                "replacements": {
                    "props": false,
                    "ref": false,
                    "params": false,
                    "prev": false,
                    "e": false,
                    "evt": false,
                    "err": false,
                    "req": false,
                    "res": false,
                    "ctx": false,
                    "arg": false,
                    "args": false
                }
            }
        ],
        "unicorn/filename-case": [
            "error",
            {
                "cases": {
                    "camelCase": true,
                    "pascalCase": true
                }
            }
        ],
        "unicorn/prefer-module": "error",
        "unicorn/prefer-node-protocol": "error",
        "unicorn/prefer-top-level-await": "error",
        "unicorn/no-array-reduce": "off",
        "unicorn/no-null": "off",
        "unicorn/consistent-destructuring": "error",
        "unicorn/prefer-switch": "error",
        "unicorn/prefer-ternary": "error",
        // ===== PROMISE RULES =====
        "promise/always-return": "error",
        "promise/no-return-wrap": "error",
        "promise/param-names": "error",
        "promise/catch-or-return": "error",
        "promise/no-nesting": "warn",
        "promise/no-promise-in-callback": "warn",
        "promise/no-callback-in-promise": "warn",
        "promise/avoid-new": "off",
        "promise/no-new-statics": "error",
        "promise/no-return-in-finally": "warn",
        "promise/valid-params": "warn",
        // ===== GENERAL RULES =====
        "no-console": [
            "warn",
            {
                "allow": [
                    "warn",
                    "error"
                ]
            }
        ],
        "no-debugger": "error",
        "no-alert": "error",
        "no-var": "error",
        "prefer-const": "error",
        "prefer-arrow-callback": "error",
        "arrow-body-style": [
            "error",
            "as-needed"
        ],
        "object-shorthand": "error",
        "prefer-template": "error",
        "template-curly-spacing": "error",
        "no-useless-concat": "error",
        "no-useless-escape": "error",
        "no-useless-return": "error",
        "no-nested-ternary": "error",
        "no-unneeded-ternary": "error",
        "no-duplicate-imports": "error",
        "sort-imports": "off",
        "eqeqeq": [
            "error",
            "always"
        ],
        "curly": [
            "error",
            "all"
        ],
        "brace-style": [
            "error",
            "1tbs"
        ],
        "comma-dangle": [
            "error",
            "never"
        ],
        "comma-spacing": [
            "error",
            {
                "before": false,
                "after": true
            }
        ],
        "comma-style": [
            "error",
            "last"
        ],
        "computed-property-spacing": [
            "error",
            "never"
        ],
        "func-call-spacing": [
            "error",
            "never"
        ],
        "key-spacing": [
            "error",
            {
                "beforeColon": false,
                "afterColon": true
            }
        ],
        "keyword-spacing": [
            "error",
            {
                "before": true,
                "after": true
            }
        ],
        "line-comment-position": [
            "error",
            {
                "position": "above"
            }
        ],
        "lines-around-comment": [
            "error",
            {
                "beforeBlockComment": true,
                "beforeLineComment": true,
                "allowBlockStart": true,
                "allowClassStart": true,
                "allowObjectStart": true,
                "allowArrayStart": true
            }
        ],
        "max-depth": [
            "error",
            4
        ],
        "max-len": [
            "error",
            {
                "code": 120,
                "tabWidth": 2,
                "ignoreUrls": true,
                "ignoreStrings": true,
                "ignoreTemplateLiterals": true,
                "ignoreRegExpLiterals": true
            }
        ],
        "max-lines": [
            "error",
            {
                "max": 500,
                "skipBlankLines": true,
                "skipComments": true
            }
        ],
        "max-lines-per-function": [
            "error",
            {
                "max": 100,
                "skipBlankLines": true,
                "skipComments": true
            }
        ],
        "max-nested-callbacks": [
            "error",
            3
        ],
        "max-params": [
            "error",
            5
        ],
        "max-statements": [
            "error",
            20
        ],
        "new-cap": "error",
        "new-parens": "error",
        "no-array-constructor": "error",
        "no-bitwise": "error",
        "no-continue": "error",
        "no-inline-comments": "error",
        "no-lonely-if": "error",
        "no-mixed-operators": "error",
        "no-multi-assign": "error",
        "no-negated-condition": "error",
        "no-new-object": "error",
        "no-plusplus": [
            "error",
            {
                "allowForLoopAfterthoughts": true
            }
        ],
        "no-tabs": "error",
        "no-ternary": "off",
        "no-trailing-spaces": "error",
        "no-underscore-dangle": "error",
        "no-whitespace-before-property": "error",
        "nonblock-statement-body-position": [
            "error",
            "beside"
        ],
        "object-curly-newline": [
            "error",
            {
                "ObjectExpression": {
                    "multiline": true,
                    "consistent": true
                },
                "ObjectPattern": {
                    "multiline": true,
                    "consistent": true
                },
                "ImportDeclaration": {
                    "multiline": true,
                    "consistent": true
                },
                "ExportDeclaration": {
                    "multiline": true,
                    "consistent": true
                }
            }
        ],
        "object-curly-spacing": [
            "error",
            "always"
        ],
        "object-property-newline": [
            "error",
            {
                "allowAllPropertiesOnSameLine": true
            }
        ],
        "one-var": [
            "error",
            "never"
        ],
        "operator-assignment": [
            "error",
            "always"
        ],
        "operator-linebreak": [
            "error",
            "before"
        ],
        "padded-blocks": [
            "error",
            "never"
        ],
        "prefer-object-spread": "error",
        "quote-props": [
            "error",
            "as-needed"
        ],
        "quotes": [
            "error",
            "single",
            {
                "avoidEscape": true
            }
        ],
        "semi": [
            "error",
            "always"
        ],
        "semi-spacing": [
            "error",
            {
                "before": false,
                "after": true
            }
        ],
        "semi-style": [
            "error",
            "last"
        ],
        "space-before-blocks": "error",
        "space-before-function-paren": [
            "error",
            {
                "anonymous": "always",
                "named": "never",
                "asyncArrow": "always"
            }
        ],
        "space-in-parens": [
            "error",
            "never"
        ],
        "space-infix-ops": "error",
        "space-unary-ops": "error",
        "spaced-comment": [
            "error",
            "always"
        ],
        "switch-colon-spacing": "error",
        "unicode-bom": [
            "error",
            "never"
        ],
        // ===== PLUGIN RULES =====
        "prefer-arrow/prefer-arrow-functions": [
            "error",
            {
                "disallowPrototype": true,
                "singleReturnOnly": false,
                "classPropertiesAllowed": false
            }
        ],
        "unused-imports/no-unused-imports": "error",
        "unused-imports/no-unused-vars": [
            "warn",
            {
                "vars": "all",
                "varsIgnorePattern": "^_",
                "args": "after-used",
                "argsIgnorePattern": "^_"
            }
        ],
        "simple-import-sort/imports": "error",
        "simple-import-sort/exports": "error",
        "sort-keys-fix/sort-keys-fix": "warn",
        "sort-destructure-keys/sort-destructure-keys": [
            "error",
            {
                "caseSensitive": false
            }
        ]
    },
    "overrides": [
        {
            "files": [
                "*.js",
                "*.jsx"
            ],
            "rules": {
                "@typescript-eslint/explicit-function-return-type": "off",
                "@typescript-eslint/explicit-module-boundary-types": "off"
            }
        },
        {
            "files": [
                "**/*.test.*",
                "**/*.spec.*",
                "**/__tests__/**/*"
            ],
            "env": {
                "jest": true
            },
            "rules": {
                "@typescript-eslint/no-magic-numbers": "off",
                "@typescript-eslint/no-unsafe-assignment": "off",
                "@typescript-eslint/no-unsafe-call": "off",
                "@typescript-eslint/no-unsafe-member-access": "off",
                "@typescript-eslint/no-explicit-any": "off",
                "sonarjs/no-duplicate-string": "off",
                "max-lines-per-function": "off",
                "max-statements": "off"
            }
        },
        {
            "files": [
                "cypress/**/*"
            ],
            "rules": {
                "@typescript-eslint/no-unsafe-assignment": "off",
                "@typescript-eslint/no-unsafe-call": "off",
                "@typescript-eslint/no-unsafe-member-access": "off"
            }
        },
        {
            "files": [
                "vite.config.*",
                "vitest.config.*",
                "tailwind.config.*"
            ],
            "rules": {
                "import/no-default-export": "off"
            }
        },
        {
            "files": [
                "src/types/**/*"
            ],
            "rules": {
                "@typescript-eslint/consistent-type-definitions": [
                    "error",
                    "type"
                ]
            }
        }
    ],
    "ignorePatterns": [
        "dist",
        "build",
        "node_modules",
        "coverage",
        "*.min.js",
        "public",
        ".next",
        ".nuxt",
        ".vite",
        "storybook-static"
    ]
}