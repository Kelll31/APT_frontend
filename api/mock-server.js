/**
 * Mock Server –¥–ª—è IP Roast Frontend
 * –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç API –∑–∞–ø—Ä–æ—Å—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤
 */

(function () {
    'use strict';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ –Ω–∞ localhost
    if (typeof window === 'undefined' ||
        (!window.location.hostname.includes('localhost') &&
            !window.location.hostname.includes('127.0.0.1'))) {
        return;
    }

    console.log('üîß Mock Server –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π fetch
    const originalFetch = window.fetch;

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ JSON —Ñ–∞–π–ª–æ–≤
    async function loadMockData(url) {
        try {
            const response = await originalFetch(url);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return await response.json();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–∫ –¥–∞–Ω–Ω—ã—Ö:', url, error);
            return null;
        }
    }

    // –ú–∞–ø–∏–Ω–≥ API endpoints –∫ JSON —Ñ–∞–π–ª–∞–º
    const endpointMap = {
        '/api/analytics/dashboard': '/mocks/api/analytics/dashboard.json',
        '/api/analytics/activity': '/mocks/api/analytics/activity.json',
        '/api/analytics/threats': '/mocks/api/analytics/threats.json',
        '/api/analytics/topology': '/mocks/api/analytics/topology.json',
        '/api/devices': '/mocks/api/devices/index.json',
        '/api/scans': '/mocks/api/scans/index.json',
        '/api/vulnerabilities': '/mocks/api/vulnerabilities/index.json',
        '/api/system/status': '/mocks/api/system/status.json',
        '/api/system/settings': '/mocks/api/system/settings.json',
        '/api/reports': '/mocks/api/reports/index.json'
    };

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ fetch
    window.fetch = async function (input, init = {}) {
        const url = typeof input === 'string' ? input : input.url;
        const method = init.method || 'GET';

        console.log(`üåê –ó–∞–ø—Ä–æ—Å: ${method} ${url}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å
        if (url.startsWith('/api/')) {
            // –£–±–∏—Ä–∞–µ–º query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –º–∞–ø–µ
            const baseUrl = url.split('?')[0];
            const mockFile = endpointMap[baseUrl];

            if (mockFile) {
                console.log(`üìÑ –ú–æ–∫ –æ—Ç–≤–µ—Ç –∏–∑: ${mockFile}`);

                const mockData = await loadMockData(mockFile);
                if (mockData) {
                    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏
                    await new Promise(resolve => setTimeout(resolve, 100));

                    return new Response(JSON.stringify(mockData), {
                        status: 200,
                        statusText: 'OK',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                }
            }

            console.warn(`‚ö†Ô∏è –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è: ${url}`);
        }

        // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π fetch
        return originalFetch.call(this, input, init);
    };

    console.log('‚úÖ Mock Server –∞–∫—Ç–∏–≤–µ–Ω');
})();
