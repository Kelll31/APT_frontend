/**
 * IP Roast Enterprise 4.0 - Main Application Controller
 * –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
 * –í–µ—Ä—Å–∏—è: Enterprise 4.0.0
 */

// Import core utilities
import { IPRoastAPI } from './shared/utils/api.js';
import { NOTIFICATION_TYPES, THEMES, DEFAULT_UI_SETTINGS, ANIMATION_DURATION } from './shared/utils/constants.js';
import { formatDate, timeAgo, debounce, Storage, generateUUID, addClass, removeClass, toggleClass } from './shared/utils/helpers.js';

// Import shared components
import { NavigationComponent } from './shared/components/navigation.js';
import { Modal, ConfirmModal } from './shared/components/modals.js';
import { Button, Spinner } from './shared/components/common.js';

// Import module controllers
import { DashboardController } from './dashboard/dashboard.js';

/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å Enterprise –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è IP Roast
 */
class IPRoastEnterpriseApp {
    constructor() {
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        this.version = '4.0.0';
        this.buildDate = '2024-12-15';
        this.edition = 'Enterprise';

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.state = {
            isInitialized: false,
            currentTab: 'dashboard',
            isLoading: true,
            sidebarCollapsed: false,

            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user: {
                name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                role: 'Security Analyst',
                permissions: ['admin', 'scan', 'report', 'attack', 'settings'],
                avatar: null
            },

            // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            connectionStatus: 'connected',
            lastActivity: new Date(),

            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notifications: [],
            unreadCount: 0
        };

        // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –º–æ–¥—É–ª–µ–π
        this.modules = new Map();
        this.loadedModules = new Set();

        // –¢–∞–π–º–µ—Ä—ã –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        this.intervals = new Map();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.settings = {
            theme: THEMES.DARK,
            autoRefresh: true,
            refreshInterval: 30000,
            enableNotifications: true,
            enableWebSocket: true,
            enableSounds: false,
            maxNotifications: 50,
            language: 'ru',
            timezone: 'Europe/Moscow',
            ...Storage.get('ipRoastSettings', {})
        };

        // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã UI
        this.components = {
            navigation: null,
            sidebar: null,
            modals: new Map(),
            notifications: null
        };

        // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        this.hotkeys = new Map([
            ['Ctrl+1', () => this.switchTab('dashboard')],
            ['Ctrl+2', () => this.switchTab('scanner')],
            ['Ctrl+3', () => this.switchTab('attack-constructor')],
            ['Ctrl+4', () => this.switchTab('network-topology')],
            ['Ctrl+5', () => this.switchTab('reports')],
            ['Ctrl+6', () => this.switchTab('settings')],
            ['Ctrl+Shift+R', () => this.refreshCurrentModule()],
            ['Ctrl+/', () => this.showHelpDialog()],
            ['Escape', () => this.closeModals()]
        ]);

        console.log(`üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IP Roast ${this.edition} ${this.version}`);
        this.init();
    }

    /**
     * –ì–ª–∞–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    async init() {
        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
            this.updateLoadingProgress(5, '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —è–¥—Ä–∞...');

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
            await this.initializeCore();
            this.updateLoadingProgress(15, '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            await this.setupUI();
            this.updateLoadingProgress(25, '–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π...');

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
            await this.initializeModules();
            this.updateLoadingProgress(60, '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...');

            // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            await this.applyUserSettings();
            this.updateLoadingProgress(80, '–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...');

            // –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            await this.startServices();
            this.updateLoadingProgress(95, '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏...');

            // –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
            await this.finalizeBoot();
            this.updateLoadingProgress(100, '–ì–æ—Ç–æ–≤–æ!');

            // –°–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
            setTimeout(() => {
                this.hideLoadingScreen();
                this.state.isInitialized = true;
                this.showNotification('IP Roast Enterprise —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω', NOTIFICATION_TYPES.SUCCESS);
                console.log('‚úÖ IP Roast Enterprise –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }, 800);

        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.handleCriticalError(error);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
     */
    async initializeCore() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        this.initializeNotificationSystem();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
        this.setupErrorHandlers();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å–æ–±—ã—Ç–∏–π
        this.setupEventSystem();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
        this.setupHotkeys();

        console.log('üîß –Ø–¥—Ä–æ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    async setupUI() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        this.components.navigation = new NavigationComponent({
            container: '#nav-menu',
            onNavigate: (tab) => this.switchTab(tab)
        });

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ sidebar
        this.setupSidebar();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ header —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        this.setupHeader();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∏—Å–∫–∞
        this.setupSearch();

        console.log('üé® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
     */
    async initializeModules() {
        try {
            // 1. Dashboard (–æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å, –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É)
            console.log('üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Dashboard...');
            const dashboardController = new DashboardController({
                container: '#dashboard-container .tab-content-inner',
                autoRefresh: this.settings.autoRefresh,
                refreshInterval: this.settings.refreshInterval,
                enableWebSocket: this.settings.enableWebSocket
            });
            this.modules.set('dashboard', dashboardController);
            this.loadedModules.add('dashboard');

            // 2. –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é, –Ω–æ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
            await this.prepareModuleStubs();

            console.log('üì¶ –ú–æ–¥—É–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≥–ª—É—à–µ–∫ –º–æ–¥—É–ª–µ–π
     */
    async prepareModuleStubs() {
        const moduleStubs = [
            'scanner',
            'attack-constructor',
            'network-topology',
            'reports',
            'settings'
        ];

        moduleStubs.forEach(moduleId => {
            const container = document.querySelector(`#${moduleId}-container .tab-content-inner`);
            if (container && container.querySelector('.module-placeholder')) {
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫ placeholder
                const placeholder = container.querySelector('.module-placeholder');
                placeholder.style.cursor = 'pointer';
                placeholder.addEventListener('click', () => {
                    this.loadModule(moduleId);
                });
            }
        });
    }

    /**
     * –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è
     */
    async loadModule(moduleId) {
        if (this.loadedModules.has(moduleId)) {
            return this.modules.get(moduleId);
        }

        const container = document.querySelector(`#${moduleId}-container .tab-content-inner`);
        if (!container) return null;

        try {
            // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏–Ω–Ω–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            this.showModuleLoading(container);

            let moduleController = null;

            switch (moduleId) {
                case 'scanner':
                    const { ScannerController } = await import('./scanner/scanner.js');
                    moduleController = new ScannerController({
                        container: `#${moduleId}-container .tab-content-inner`
                    });
                    break;

                case 'attack-constructor':
                    const { AttackModuleConstructor } = await import('./attack-constructor/AttackModuleConstructor.js');
                    moduleController = new AttackModuleConstructor({
                        container: `#${moduleId}-container .tab-content-inner`
                    });
                    break;

                case 'network-topology':
                    await this.loadNetworkTopologyModule(container);
                    break;

                case 'reports':
                    const { ReportsController } = await import('./reports/reports.js');
                    moduleController = new ReportsController({
                        container: `#${moduleId}-container .tab-content-inner`
                    });
                    break;

                case 'settings':
                    const { SettingsController } = await import('./settings/settings.js');
                    moduleController = new SettingsController(
                        `#${moduleId}-container .tab-content-inner`
                    );
                    break;
            }

            if (moduleController) {
                this.modules.set(moduleId, moduleController);
                this.loadedModules.add(moduleId);
                console.log(`‚úÖ –ú–æ–¥—É–ª—å ${moduleId} –∑–∞–≥—Ä—É–∂–µ–Ω`);

                this.showNotification(
                    `–ú–æ–¥—É–ª—å "${this.getModuleTitle(moduleId)}" –∑–∞–≥—Ä—É–∂–µ–Ω`,
                    NOTIFICATION_TYPES.INFO
                );
            }

            return moduleController;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è ${moduleId}:`, error);
            this.showModuleError(container, error.message);
            throw error;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è —Ç–æ–ø–æ–ª–æ–≥–∏–∏ —Å–µ—Ç–∏
     */
    async loadNetworkTopologyModule(container) {
        container.innerHTML = `
            <div class="network-topology-module">
                <div class="topology-header">
                    <h2>
                        <i class="fas fa-project-diagram"></i>
                        –¢–æ–ø–æ–ª–æ–≥–∏—è —Å–µ—Ç–∏
                    </h2>
                    <div class="topology-controls">
                        <button class="btn btn-primary" onclick="window.ipRoastApp.refreshTopology()">
                            <i class="fas fa-sync-alt"></i>
                            –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç—É
                        </button>
                    </div>
                </div>
                
                <div class="topology-filters">
                    <div class="filter-group">
                        <label>–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</label>
                        <select class="filter-select">
                            <option value="all">–í—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</option>
                            <option value="router">–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä—ã</option>
                            <option value="switch">–ö–æ–º–º—É—Ç–∞—Ç–æ—Ä—ã</option>
                            <option value="server">–°–µ—Ä–≤–µ—Ä—ã</option>
                            <option value="workstation">–†–∞–±–æ—á–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏</option>
                        </select>
                    </div>
                    
                    <div class="filter-group">
                        <label>–°—Ç–∞—Ç—É—Å:</label>
                        <select class="filter-select">
                            <option value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
                            <option value="active">–ê–∫—Ç–∏–≤–Ω—ã–µ</option>
                            <option value="inactive">–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ</option>
                        </select>
                    </div>
                </div>
                
                <div class="topology-content">
                    <div class="network-map" id="network-map">
                        <div class="map-placeholder">
                            <i class="fas fa-sitemap"></i>
                            <h3>–ö–∞—Ä—Ç–∞ —Å–µ—Ç–∏</h3>
                            <p>–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ø–æ–ª–æ–≥–∏–∏ —Å–µ—Ç–∏ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤</p>
                            <button class="btn btn-secondary" onclick="window.ipRoastApp.startTopologyDiscovery()">
                                –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ
                            </button>
                        </div>
                    </div>
                    
                    <div class="device-list" id="device-list">
                        <h3>–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</h3>
                        <div class="devices-grid">
                            <div class="device-card">
                                <div class="device-icon">
                                    <i class="fas fa-server"></i>
                                </div>
                                <div class="device-info">
                                    <div class="device-name">Router-01</div>
                                    <div class="device-ip">192.168.1.1</div>
                                </div>
                                <div class="device-status active">–ê–∫—Ç–∏–≤–µ–Ω</div>
                            </div>
                            
                            <div class="device-card">
                                <div class="device-icon">
                                    <i class="fas fa-desktop"></i>
                                </div>
                                <div class="device-info">
                                    <div class="device-name">Workstation-01</div>
                                    <div class="device-ip">192.168.1.100</div>
                                </div>
                                <div class="device-status active">–ê–∫—Ç–∏–≤–µ–Ω</div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="topology-stats">
                    <div class="stat-card">
                        <div class="stat-value">12</div>
                        <div class="stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤</div>
                    </div>
                    
                    <div class="stat-card">
                        <div class="stat-value">3</div>
                        <div class="stat-label">–ü–æ–¥—Å–µ—Ç–µ–π</div>
                    </div>
                    
                    <div class="stat-card">
                        <div class="stat-value">98%</div>
                        <div class="stat-label">–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ç–∏</div>
                    </div>
                </div>
            </div>
        `;
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏
     */
    async switchTab(tabId) {
        if (this.state.currentTab === tabId) return;

        console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É: ${tabId}`);

        // –°–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        const currentTab = document.querySelector('.tab-content.active');
        if (currentTab) {
            removeClass(currentTab, 'active');
        }

        // –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        document.querySelectorAll('.nav-item').forEach(item => {
            removeClass(item, 'active');
        });

        const navItem = document.querySelector(`[data-tab="${tabId}"]`);
        if (navItem) {
            addClass(navItem, 'active');
        }

        // –ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        const newTab = document.querySelector(`#${tabId}-container`);
        if (newTab) {
            addClass(newTab, 'active');

            // –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
            if (!this.loadedModules.has(tabId)) {
                await this.loadModule(tabId);
            }
        }

        this.state.currentTab = tabId;

        // –û–±–Ω–æ–≤–∏—Ç—å title —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.title = `${this.getModuleTitle(tabId)} - IP Roast Enterprise`;

        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
        this.updateUrlHash(tabId);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ sidebar
     */
    setupSidebar() {
        const sidebarToggle = document.getElementById('sidebar-toggle');
        const sidebar = document.getElementById('app-sidebar');

        if (sidebarToggle) {
            sidebarToggle.addEventListener('click', () => {
                this.toggleSidebar();
            });
        }

        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ sidebar
        const savedState = Storage.get('sidebarCollapsed', false);
        if (savedState) {
            this.state.sidebarCollapsed = true;
            addClass(sidebar, 'collapsed');
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ sidebar
     */
    toggleSidebar() {
        const sidebar = document.getElementById('app-sidebar');
        const app = document.getElementById('app');

        this.state.sidebarCollapsed = !this.state.sidebarCollapsed;

        if (this.state.sidebarCollapsed) {
            addClass(sidebar, 'collapsed');
            addClass(app, 'sidebar-collapsed');
        } else {
            removeClass(sidebar, 'collapsed');
            removeClass(app, 'sidebar-collapsed');
        }

        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        Storage.set('sidebarCollapsed', this.state.sidebarCollapsed);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ header —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    setupHeader() {
        // Theme toggle
        const themeToggle = document.getElementById('theme-toggle');
        if (themeToggle) {
            themeToggle.addEventListener('click', () => {
                this.toggleTheme();
            });
        }

        // User menu
        const userAvatar = document.getElementById('user-avatar');
        const userDropdown = document.getElementById('user-dropdown');

        if (userAvatar && userDropdown) {
            userAvatar.addEventListener('click', (e) => {
                e.stopPropagation();
                toggleClass(userDropdown, 'show');
            });

            // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –º–µ–Ω—é
            document.addEventListener('click', () => {
                removeClass(userDropdown, 'show');
            });

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –º–µ–Ω—é
            userDropdown.addEventListener('click', (e) => {
                const action = e.target.closest('[data-action]')?.dataset.action;
                if (action) {
                    this.handleUserAction(action);
                }
            });
        }

        // Notification bell
        const notificationBell = document.getElementById('notification-bell');
        if (notificationBell) {
            notificationBell.addEventListener('click', () => {
                this.toggleNotificationPanel();
            });
        }

        // Connection status
        this.updateConnectionStatus();
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∏—Å–∫–∞
     */
    setupSearch() {
        const searchInput = document.querySelector('.search-input');
        const searchSuggestions = document.getElementById('search-suggestions');

        if (searchInput) {
            searchInput.addEventListener('input', debounce(async (e) => {
                const query = e.target.value.trim();
                if (query.length > 2) {
                    await this.performSearch(query);
                } else {
                    searchSuggestions.style.display = 'none';
                }
            }, 300));

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter
            searchInput.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') {
                    this.executeSearch(searchInput.value);
                }
            });
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
     */
    async performSearch(query) {
        try {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API –ø–æ–∏—Å–∫–∞
            const suggestions = [
                { type: 'ip', value: '192.168.1.1', label: 'Router-01' },
                { type: 'device', value: 'server-01', label: 'Server-01 (Ubuntu)' },
                { type: 'cve', value: 'CVE-2023-1234', label: 'Critical RCE vulnerability' }
            ];

            this.showSearchSuggestions(suggestions);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
        }
    }

    /**
     * –ü–æ–∫–∞–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–∏—Å–∫–∞
     */
    showSearchSuggestions(suggestions) {
        const searchSuggestions = document.getElementById('search-suggestions');

        if (suggestions.length === 0) {
            searchSuggestions.style.display = 'none';
            return;
        }

        const suggestionsHTML = suggestions.map(item => `
            <div class="search-suggestion" data-type="${item.type}" data-value="${item.value}">
                <i class="fas fa-${this.getSearchIcon(item.type)}"></i>
                <span class="suggestion-label">${item.label}</span>
                <span class="suggestion-value">${item.value}</span>
            </div>
        `).join('');

        searchSuggestions.innerHTML = suggestionsHTML;
        searchSuggestions.style.display = 'block';

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é
        searchSuggestions.addEventListener('click', (e) => {
            const suggestion = e.target.closest('.search-suggestion');
            if (suggestion) {
                this.selectSearchSuggestion(suggestion.dataset.type, suggestion.dataset.value);
            }
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
     */
    getSearchIcon(type) {
        const icons = {
            'ip': 'globe',
            'device': 'server',
            'cve': 'exclamation-triangle',
            'port': 'door-open',
            'user': 'user'
        };
        return icons[type] || 'search';
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
     */
    toggleTheme() {
        const themes = [THEMES.DARK, THEMES.LIGHT, THEMES.CYBERPUNK];
        const currentIndex = themes.indexOf(this.settings.theme);
        const nextIndex = (currentIndex + 1) % themes.length;
        const newTheme = themes[nextIndex];

        this.setTheme(newTheme);
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–º—ã
     */
    setTheme(theme) {
        this.settings.theme = theme;
        document.documentElement.setAttribute('data-theme', theme);

        // –û–±–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É
        const themeToggle = document.getElementById('theme-toggle');
        if (themeToggle) {
            const icon = themeToggle.querySelector('i');
            const themeIcons = {
                [THEMES.LIGHT]: 'fas fa-sun',
                [THEMES.DARK]: 'fas fa-moon',
                [THEMES.CYBERPUNK]: 'fas fa-magic'
            };
            icon.className = themeIcons[theme] || 'fas fa-palette';
        }

        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        this.saveSettings();

        this.showNotification(`–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ "${theme}"`, NOTIFICATION_TYPES.INFO);
    }

    /**
     * –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    initializeNotificationSystem() {
        // –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        let container = document.getElementById('notifications-container');
        if (!container) {
            container = document.createElement('div');
            container.id = 'notifications-container';
            container.className = 'notifications-container';
            document.body.appendChild(container);
        }

        this.components.notifications = container;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    showNotification(message, type = NOTIFICATION_TYPES.INFO, duration = 5000) {
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <i class="notification-icon fas ${this.getNotificationIcon(type)}"></i>
                <div class="notification-body">
                    <div class="notification-message">${message}</div>
                    <div class="notification-time">${formatDate(new Date(), 'HH:mm:ss')}</div>
                </div>
                <button class="notification-close" title="–ó–∞–∫—Ä—ã—Ç—å">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        `;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        const closeBtn = notification.querySelector('.notification-close');
        closeBtn.addEventListener('click', () => {
            this.removeNotification(notification);
        });

        // –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        this.components.notifications.appendChild(notification);

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => addClass(notification, 'show'), 10);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        if (duration > 0) {
            setTimeout(() => {
                this.removeNotification(notification);
            }, duration);
        }

        // –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.state.notifications.unshift({
            id: generateUUID(),
            message,
            type,
            timestamp: new Date(),
            read: false
        });

        // –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫
        this.updateNotificationCounter();

        // –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        this.limitNotifications();
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    removeNotification(notificationElement) {
        addClass(notificationElement, 'removing');
        setTimeout(() => {
            if (notificationElement.parentNode) {
                notificationElement.parentNode.removeChild(notificationElement);
            }
        }, ANIMATION_DURATION.NORMAL);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    getNotificationIcon(type) {
        const icons = {
            [NOTIFICATION_TYPES.SUCCESS]: 'fa-check-circle',
            [NOTIFICATION_TYPES.ERROR]: 'fa-exclamation-circle',
            [NOTIFICATION_TYPES.WARNING]: 'fa-exclamation-triangle',
            [NOTIFICATION_TYPES.INFO]: 'fa-info-circle'
        };
        return icons[type] || icons[NOTIFICATION_TYPES.INFO];
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
     */
    setupHotkeys() {
        document.addEventListener('keydown', (e) => {
            const key = this.getHotkeyString(e);
            const handler = this.hotkeys.get(key);

            if (handler) {
                e.preventDefault();
                handler();
            }
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≥–æ—Ä—è—á–µ–π –∫–ª–∞–≤–∏—à–∏
     */
    getHotkeyString(e) {
        const parts = [];
        if (e.ctrlKey) parts.push('Ctrl');
        if (e.shiftKey) parts.push('Shift');
        if (e.altKey) parts.push('Alt');
        parts.push(e.key);
        return parts.join('+');
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    async applyUserSettings() {
        // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–º—É
        this.setTheme(this.settings.theme);

        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ sidebar
        if (this.settings.sidebarCollapsed) {
            this.toggleSidebar();
        }

        // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if (this.settings.autoRefresh) {
            this.startAutoRefresh();
        }

        console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
    }

    /**
     * –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
     */
    async startServices() {
        // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.startConnectionMonitoring();

        // –ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        this.startActivityTracking();

        // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
        this.startPeriodicTasks();

        console.log('‚ö° –§–æ–Ω–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã');
    }

    /**
     * –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
     */
    async finalizeBoot() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ URL —Ö—ç—à–∞
        this.handleUrlHash();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        if (this.settings.enableWebSocket) {
            // WebSocket –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –≤ dashboard –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await this.loadInitialData();

        console.log('üéØ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async loadInitialData() {
        try {
            // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const profile = await IPRoastAPI.auth.getProfile();
            if (profile && profile.success) {
                this.state.user = { ...this.state.user, ...profile.data };
                this.updateUserDisplay();
            }

            // –ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            const status = await IPRoastAPI.system.getSystemStatus();
            if (status && status.success) {
                this.updateSystemStatus(status.data);
            }

        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', error);
            // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
        }
    }

    /**
     * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
     */
    updateLoadingProgress(percent, text) {
        const progressBar = document.getElementById('loading-progress-bar');
        const progressText = document.getElementById('loading-progress-text');

        if (progressBar) {
            progressBar.style.width = `${percent}%`;
        }

        if (progressText) {
            progressText.textContent = text;
        }
    }

    hideLoadingScreen() {
        const loadingScreen = document.getElementById('loading-screen');
        const app = document.getElementById('app');

        if (loadingScreen) {
            addClass(loadingScreen, 'hidden');
            setTimeout(() => {
                loadingScreen.style.display = 'none';
            }, 500);
        }

        if (app) {
            app.style.display = 'flex';
        }
    }

    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
     */
    getModuleTitle(moduleId) {
        const titles = {
            'dashboard': '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
            'scanner': '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏',
            'attack-constructor': '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∞—Ç–∞–∫',
            'network-topology': '–¢–æ–ø–æ–ª–æ–≥–∏—è —Å–µ—Ç–∏',
            'reports': '–û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
            'settings': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã'
        };
        return titles[moduleId] || moduleId;
    }

    showModuleLoading(container) {
        container.innerHTML = `
            <div class="module-loading">
                <div class="loading-spinner">
                    <div class="spinner-ring"></div>
                </div>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è...</p>
            </div>
        `;
    }

    showModuleError(container, message) {
        container.innerHTML = `
            <div class="module-error">
                <i class="fas fa-exclamation-triangle"></i>
                <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è</h3>
                <p>${message}</p>
                <button class="btn btn-primary" onclick="location.reload()">
                    –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                </button>
            </div>
        `;
    }

    handleCriticalError(error) {
        const loadingScreen = document.getElementById('loading-screen');
        if (loadingScreen) {
            loadingScreen.innerHTML = `
                <div class="loading-content">
                    <div class="error-icon">
                        <i class="fas fa-exclamation-triangle"></i>
                    </div>
                    <h2>–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</h2>
                    <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å IP Roast Enterprise</p>
                    <div class="error-details">
                        <code>${error.message}</code>
                    </div>
                    <button onclick="location.reload()" class="btn btn-primary">
                        –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    </button>
                </div>
                <div class="loading-footer">
                    <span>–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</span>
                </div>
            `;
        }
    }

    updateUrlHash(tab) {
        if (history.pushState) {
            history.pushState(null, null, `#${tab}`);
        }
    }

    handleUrlHash() {
        const hash = window.location.hash.substr(1);
        if (hash && document.querySelector(`#${hash}-container`)) {
            this.switchTab(hash);
        }
    }

    saveSettings() {
        Storage.set('ipRoastSettings', this.settings);
    }

    // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã
    startAutoRefresh() { console.log('üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ'); }
    startConnectionMonitoring() { console.log('üì∂ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω'); }
    startActivityTracking() { console.log('üë§ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω–æ'); }
    startPeriodicTasks() { console.log('‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã'); }
    updateUserDisplay() { console.log('üë§ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ'); }
    updateSystemStatus(status) { console.log('üí° –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω:', status); }
    updateConnectionStatus() { console.log('üì∂ –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω'); }
    updateNotificationCounter() { console.log('üîî –°—á–µ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω'); }
    limitNotifications() { console.log('üìù –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏–º–µ–Ω–µ–Ω–æ'); }
    toggleNotificationPanel() { console.log('üîî –ü–∞–Ω–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞'); }
    handleUserAction(action) { console.log('üë§ –î–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', action); }
    selectSearchSuggestion(type, value) { console.log('üîç –í—ã–±—Ä–∞–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:', type, value); }
    executeSearch(query) { console.log('üîç –í—ã–ø–æ–ª–Ω–µ–Ω –ø–æ–∏—Å–∫:', query); }
    refreshCurrentModule() { console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥—É–ª—è'); }
    showHelpDialog() { console.log('‚ùì –ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏'); }
    closeModals() { console.log('‚ùå –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω'); }
    refreshTopology() { console.log('üó∫Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ø–æ–ª–æ–≥–∏–∏'); }
    startTopologyDiscovery() { console.log('üîç –ó–∞–ø—É—Å–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ç–æ–ø–æ–ª–æ–≥–∏–∏'); }
    setupEventSystem() { console.log('üì° –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'); }
    setupErrorHandlers() { console.log('‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'); }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', () => {
    window.ipRoastApp = new IPRoastEnterpriseApp();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { IPRoastEnterpriseApp };
