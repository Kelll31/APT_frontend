/**
 * IP Roast Enterprise 4.0 - Fixed Main Application
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —è–¥—Ä–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
 * –í–µ—Ä—Å–∏—è: Enterprise 4.0 (Fixed)
 */

// –ò–º–ø–æ—Ä—Ç—ã
import {
    APP_INFO,
    THEMES,
    NOTIFICATION_TYPES,
    DEFAULT_UI_SETTINGS,
    ANIMATION_DURATION,
    STORAGE_KEYS,
    UI_STATES,
    SUCCESS_MESSAGES,
    ERROR_MESSAGES,
    WEBSOCKET_EVENTS,
    CONNECTION_STATUS,
    Z_INDEX
} from './shared/utils/constants.js';

import {
    EventEmitter,
    logger,
    Storage,
    formatDate,
    timeAgo,
    debounce,
    generateUUID,
    addClass,
    removeClass,
    toggleClass,
    delay,
    AppError,
    createError,
    handleError
} from './shared/utils/helpers.js';

import { IPRoastAPI } from './shared/utils/api.js';

// –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import { NavigationComponent } from './shared/components/navigation.js';
import { Modal, ConfirmModal } from './shared/components/modals.js';
import { Button, Spinner } from './shared/components/common.js';

// –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –º–æ–¥—É–ª–µ–π
import { DashboardController } from './dashboard/dashboard.js';

/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å Enterprise –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è IP Roast
 */
class IPRoastEnterpriseApp extends EventEmitter {
    constructor() {
        super();

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        this.version = APP_INFO.VERSION;
        this.buildDate = APP_INFO.BUILD_DATE;
        this.edition = 'Enterprise';

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.state = {
            isInitialized: false,
            currentTab: 'dashboard',
            isLoading: true,
            sidebarCollapsed: false,
            connectionStatus: CONNECTION_STATUS.DISCONNECTED,

            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user: {
                name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                role: 'Security Analyst',
                permissions: ['admin', 'scan', 'report', 'attack', 'settings'],
                avatar: null
            },

            // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            lastActivity: new Date(),

            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notifications: [],
            unreadCount: 0,

            // –ú–æ–¥—É–ª–∏
            loadedModules: new Set(['dashboard']),
            moduleErrors: new Map()
        };

        // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –º–æ–¥—É–ª–µ–π
        this.modules = new Map();

        // –¢–∞–π–º–µ—Ä—ã –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        this.intervals = new Map();
        this.timeouts = new Map();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.settings = {
            ...DEFAULT_UI_SETTINGS,
            ...Storage.get(STORAGE_KEYS.SETTINGS, {})
        };

        // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã UI
        this.components = {
            navigation: null,
            sidebar: null,
            modals: new Map(),
            notifications: null
        };

        // WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        this.websocket = null;
        this.websocketReconnectAttempts = 0;

        // API –∫–ª–∏–µ–Ω—Ç
        this.api = IPRoastAPI;

        // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        this.hotkeys = new Map([
            ['ctrl+1', () => this.switchTab('dashboard')],
            ['ctrl+2', () => this.switchTab('scanner')],
            ['ctrl+3', () => this.switchTab('attack-constructor')],
            ['ctrl+4', () => this.switchTab('network-topology')],
            ['ctrl+5', () => this.switchTab('reports')],
            ['ctrl+6', () => this.switchTab('settings')],
            ['ctrl+shift+r', () => this.refreshCurrentModule()],
            ['ctrl+/', () => this.showHelpDialog()],
            ['escape', () => this.closeModals()]
        ]);

        logger.info(`üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IP Roast ${this.edition} ${this.version}`);
        this.init();
    }

    /**
     * –ì–ª–∞–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    async init() {
        try {
            this.updateLoadingProgress(5, '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —è–¥—Ä–∞...');
            await this.initializeCore();

            this.updateLoadingProgress(15, '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');
            await this.setupUI();

            this.updateLoadingProgress(25, '–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π...');
            await this.initializeModules();

            this.updateLoadingProgress(60, '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
            await this.applyUserSettings();

            this.updateLoadingProgress(80, '–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...');
            await this.startServices();

            this.updateLoadingProgress(95, '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏...');
            await this.finalizeBoot();

            this.updateLoadingProgress(100, '–ì–æ—Ç–æ–≤–æ!');

            // –°–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
            setTimeout(() => {
                this.hideLoadingScreen();
                this.state.isInitialized = true;
                this.showNotification(SUCCESS_MESSAGES.APP_INITIALIZED, NOTIFICATION_TYPES.SUCCESS);
                this.emit('initialized');
                logger.info('‚úÖ IP Roast Enterprise –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }, 800);

        } catch (error) {
            logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.handleCriticalError(error);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
     */
    async initializeCore() {
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            this.initializeNotificationSystem();

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
            this.setupErrorHandlers();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å–æ–±—ã—Ç–∏–π
            this.setupEventSystem();

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
            this.setupHotkeys();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket
            this.initializeWebSocket();

            logger.info('üîß –Ø–¥—Ä–æ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        } catch (error) {
            throw createError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —è–¥—Ä–∞: ' + error.message, 500, 'CORE_INIT_ERROR');
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    async setupUI() {
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            this.setupNavigation();

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ sidebar
            this.setupSidebar();

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ header —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            this.setupHeader();

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∏—Å–∫–∞
            this.setupSearch();

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
            this.setupModals();

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ dashboard
            setTimeout(() => {
                this.switchTab('dashboard');
            }, 100);

            logger.info('üé® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        } catch (error) {
            throw createError('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UI: ' + error.message, 500, 'UI_SETUP_ERROR');
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
     */
    async initializeModules() {
        try {
            // 1. Dashboard (–æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å, –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É)
            logger.info('üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Dashboard...');
            const dashboardController = new DashboardController({
                container: '#dashboard-container .tab-content-inner',
                autoRefresh: this.settings.autoRefresh,
                refreshInterval: this.settings.refreshInterval,
                enableWebSocket: this.settings.enableWebSocket
            });

            this.modules.set('dashboard', dashboardController);
            this.state.loadedModules.add('dashboard');

            // 2. –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é, –Ω–æ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
            await this.prepareModuleStubs();

            logger.info('üì¶ –ú–æ–¥—É–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
        } catch (error) {
            throw createError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π: ' + error.message, 500, 'MODULE_INIT_ERROR');
        }
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≥–ª—É—à–µ–∫ –º–æ–¥—É–ª–µ–π
     */
    async prepareModuleStubs() {
        const modules = ['scanner', 'attack-constructor', 'network-topology', 'reports', 'settings'];
        modules.forEach(id => {
            const container = document.querySelector(`#${id}-container .tab-content-inner`);
            if (container) {
                container.innerHTML = `
              <div class="module-placeholder">
                <button data-module="${id}">–ó–∞–≥—Ä—É–∑–∏—Ç—å ${this.getModuleTitle(id)}</button>
              </div>
            `;
                container.querySelector('button').addEventListener('click', () => {
                    this.loadStaticModule(id, container);
                });
            }
        });
    }

    /**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–¥—É–ª—è –∏–∑ pages/
 */
    async loadStaticModule(moduleId, buttonElement = null) {
        logger.info(`üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–¥—É–ª—è: ${moduleId}`);

        const container = document.querySelector(`#${moduleId}-container .tab-content-inner`);
        if (!container) {
            logger.error(`–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–æ–¥—É–ª—è ${moduleId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return;
        }

        try {
            // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            if (buttonElement) {
                buttonElement.disabled = true;
                buttonElement.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –ó–∞–≥—Ä—É–∑–∫–∞...';
            }

            container.innerHTML = `
            <div class="module-loading">
                <div class="loading-spinner"></div>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è ${this.getModuleTitle(moduleId)}...</p>
            </div>
        `;

            // –ó–∞–≥—Ä—É–∂–∞–µ–º HTML –∏–∑ –ø–∞–ø–∫–∏ pages/
            const response = await fetch(`pages/${moduleId}.html`);

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const html = await response.text();

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
            await delay(300);

            // –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            container.innerHTML = html;

            // –û—Ç–º–µ—á–∞–µ–º –º–æ–¥—É–ª—å –∫–∞–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π
            this.state.loadedModules.add(moduleId);

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–æ–¥—É–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
            this.initializeModuleFunctionality(moduleId);

            // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            this.showNotification(
                `–ú–æ–¥—É–ª—å "${this.getModuleTitle(moduleId)}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω`,
                NOTIFICATION_TYPES.SUCCESS
            );

            logger.info(`‚úÖ –ú–æ–¥—É–ª—å ${moduleId} –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ pages/${moduleId}.html`);

        } catch (error) {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è ${moduleId}:`, error);

            // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
            container.innerHTML = `
            <div class="module-error">
                <i class="fas fa-exclamation-triangle"></i>
                <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è</h3>
                <p>${error.message}</p>
                <button class="btn btn--primary retry-btn" onclick="window.ipRoastApp.loadStaticModule('${moduleId}')">
                    <i class="fas fa-redo"></i>
                    –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </button>
            </div>
        `;

            // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            this.showNotification(
                `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è: ${error.message}`,
                NOTIFICATION_TYPES.ERROR
            );

        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            if (buttonElement) {
                buttonElement.disabled = false;
                buttonElement.innerHTML = '<i class="fas fa-play"></i> –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å';
            }
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è
     */
    initializeModuleFunctionality(moduleId) {
        // –î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è
        switch (moduleId) {
            case 'scanner':
                this.initializeScannerModule();
                break;
            case 'attack-constructor':
                this.initializeAttackConstructorModule();
                break;
            case 'network-topology':
                this.initializeTopologyModule();
                break;
            case 'reports':
                this.initializeReportsModule();
                break;
            case 'settings':
                this.initializeSettingsModule();
                break;
        }
    }

    /**
     * –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è
     */
    async loadModule(moduleId) {
        if (this.state.loadedModules.has(moduleId)) {
            return this.modules.get(moduleId);
        }

        const container = document.querySelector(`#${moduleId}-container .tab-content-inner`);
        if (!container) {
            logger.warn(`Container for module ${moduleId} not found`);
            return null;
        }

        try {
            // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏–Ω–Ω–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            this.showModuleLoading(container);

            let moduleController = null;

            switch (moduleId) {
                case 'scanner':
                    const { ScannerController } = await import('./scanner/scanner.js');
                    moduleController = new ScannerController({
                        container: `#${moduleId}-container .tab-content-inner`
                    });
                    break;

                case 'attack-constructor':
                    const { AttackModuleConstructor } = await import('./attack-constructor/AttackModuleConstructor.js');
                    moduleController = new AttackModuleConstructor({
                        container: `#${moduleId}-container .tab-content-inner`
                    });
                    break;

                case 'network-topology':
                    await this.loadNetworkTopologyModule(container);
                    break;

                case 'reports':
                    const { ReportsController } = await import('./reports/reports.js');
                    moduleController = new ReportsController({
                        container: `#${moduleId}-container .tab-content-inner`
                    });
                    break;

                case 'settings':
                    const { SettingsController } = await import('./settings/settings.js');
                    moduleController = new SettingsController(
                        `#${moduleId}-container .tab-content-inner`
                    );
                    break;

                default:
                    throw new Error(`Unknown module: ${moduleId}`);
            }

            if (moduleController) {
                this.modules.set(moduleId, moduleController);
                this.state.loadedModules.add(moduleId);
                this.state.moduleErrors.delete(moduleId);

                logger.info(`‚úÖ –ú–æ–¥—É–ª—å ${moduleId} –∑–∞–≥—Ä—É–∂–µ–Ω`);
                this.showNotification(
                    `–ú–æ–¥—É–ª—å "${this.getModuleTitle(moduleId)}" –∑–∞–≥—Ä—É–∂–µ–Ω`,
                    NOTIFICATION_TYPES.INFO
                );

                this.emit('moduleLoaded', { moduleId, moduleController });
            }

            return moduleController;

        } catch (error) {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è ${moduleId}:`, error);
            this.state.moduleErrors.set(moduleId, error);
            this.showModuleError(container, error.message);
            this.showNotification(
                ERROR_MESSAGES.MODULE_LOAD_ERROR + `: ${moduleId}`,
                NOTIFICATION_TYPES.ERROR
            );
            throw error;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è —Ç–æ–ø–æ–ª–æ–≥–∏–∏ —Å–µ—Ç–∏
     */
    async loadNetworkTopologyModule(container) {
        container.innerHTML = `
            <div class="topology-loading">
                <div class="topology-loading__content">
                    <h3>üåê –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ø–æ–ª–æ–≥–∏–∏ —Å–µ—Ç–∏</h3>
                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è...</p>
                    <div class="spinner-lg"></div>
                </div>
            </div>
        `;

        // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        await delay(1000);

        const { TopologyViewer } = await import('./network-topology/topology-viewer.js');
        const topologyViewer = new TopologyViewer(container);
        return topologyViewer;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏–Ω–Ω–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è
     */
    showModuleLoading(container) {
        container.innerHTML = `
            <div class="module-loading">
                <div class="module-loading__content">
                    <div class="spinner-lg"></div>
                    <h3>–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è...</h3>
                    <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ</p>
                </div>
            </div>
        `;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è
     */
    showModuleError(container, message) {
        container.innerHTML = `
            <div class="module-error">
                <div class="module-error__content">
                    <i class="fas fa-exclamation-triangle"></i>
                    <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è</h3>
                    <p>${message}</p>
                    <button class="btn btn--primary" onclick="location.reload()">
                        –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    </button>
                </div>
            </div>
        `;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    getModuleTitle(moduleId) {
        const titles = {
            'dashboard': '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
            'scanner': '–ú–æ–¥—É–ª—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
            'attack-constructor': '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∞—Ç–∞–∫',
            'network-topology': '–¢–æ–ø–æ–ª–æ–≥–∏—è —Å–µ—Ç–∏',
            'reports': '–û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
            'settings': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã'
        };
        return titles[moduleId] || moduleId;
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    async applyUserSettings() {
        try {
            // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
            this.applyTheme(this.settings.theme);

            // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞
            this.setLanguage(this.settings.language);

            // –°–æ—Å—Ç–æ—è–Ω–∏–µ sidebar
            if (this.settings.sidebarCollapsed) {
                this.collapseSidebar();
            }

            // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
            const savedTab = Storage.get(STORAGE_KEYS.CURRENT_TAB, 'dashboard');
            this.switchTab(savedTab);

            logger.info('‚öôÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
        } catch (error) {
            logger.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
     */
    async startServices() {
        try {
            // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if (this.settings.autoRefresh) {
                this.startAutoRefresh();
            }

            // –ó–∞–ø—É—Å–∫ WebSocket
            if (this.settings.enableWebSocket) {
                this.connectWebSocket();
            }

            // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            this.startActivityMonitoring();

            // –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            this.startNotificationSystem();

            logger.info('üîÑ –§–æ–Ω–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã');
        } catch (error) {
            logger.warn('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤:', error);
        }
    }

    /**
     * –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
     */
    async finalizeBoot() {
        try {
            // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π
            if (this.settings.enableAnimations) {
                document.body.classList.add('animations-enabled');
            }

            // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            this.cleanupOldData();

            // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Service Worker
            if ('serviceWorker' in navigator) {
                navigator.serviceWorker.register('/sw.js').catch(error => {
                    logger.warn('SW registration failed:', error);
                });
            }

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            this.emit('ready');
            logger.info('üéØ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        } catch (error) {
            logger.warn('–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    initializeNotificationSystem() {
        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (!document.querySelector('.notification-container')) {
            const container = document.createElement('div');
            container.className = 'notification-container';
            container.style.cssText = `
                position: fixed;
                top: 80px;
                right: 24px;
                z-index: ${Z_INDEX.TOAST};
                display: flex;
                flex-direction: column;
                gap: 12px;
                max-width: 400px;
            `;
            document.body.appendChild(container);
            this.components.notifications = container;
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
     */
    setupErrorHandlers() {
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ JavaScript
        window.addEventListener('error', (event) => {
            logger.error('Global error:', event.error);
            this.handleError(event.error, 'Global Error');
        });

        // –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–∏—Å—ã
        window.addEventListener('unhandledrejection', (event) => {
            logger.error('Unhandled promise rejection:', event.reason);
            this.handleError(event.reason, 'Unhandled Promise');
            event.preventDefault();
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Å–æ–±—ã—Ç–∏–π
     */
    setupEventSystem() {
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.on('error', (error) => {
            this.showNotification(error.message, NOTIFICATION_TYPES.ERROR);
        });

        this.on('warning', (message) => {
            this.showNotification(message, NOTIFICATION_TYPES.WARNING);
        });

        this.on('success', (message) => {
            this.showNotification(message, NOTIFICATION_TYPES.SUCCESS);
        });

        this.on('info', (message) => {
            this.showNotification(message, NOTIFICATION_TYPES.INFO);
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
     */
    setupHotkeys() {
        if (!this.settings.enableHotkeys) return;

        document.addEventListener('keydown', (event) => {
            const key = [];
            if (event.ctrlKey) key.push('ctrl');
            if (event.shiftKey) key.push('shift');
            if (event.altKey) key.push('alt');
            key.push(event.key.toLowerCase());

            const combo = key.join('+');
            const handler = this.hotkeys.get(combo);

            if (handler) {
                event.preventDefault();
                handler();
            }
        });
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket
     */
    initializeWebSocket() {
        if (!this.settings.enableWebSocket) return;

        try {
            const wsUrl = `${window.location.protocol === 'https:' ? 'wss:' : 'ws:'}//${window.location.host}/ws`;
            this.websocket = new WebSocket(wsUrl);

            this.websocket.onopen = () => {
                logger.info('üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
                this.state.connectionStatus = CONNECTION_STATUS.CONNECTED;
                this.websocketReconnectAttempts = 0;
                this.emit('websocketConnected');
                this.updateConnectionStatus();
            };

            this.websocket.onmessage = (event) => {
                try {
                    const data = JSON.parse(event.data);
                    this.handleWebSocketMessage(data);
                } catch (error) {
                    logger.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                }
            };

            this.websocket.onclose = () => {
                logger.warn('üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
                this.state.connectionStatus = CONNECTION_STATUS.DISCONNECTED;
                this.emit('websocketDisconnected');
                this.updateConnectionStatus();
                this.scheduleWebSocketReconnect();
            };

            this.websocket.onerror = (error) => {
                logger.error('üîå –û—à–∏–±–∫–∞ WebSocket:', error);
                this.state.connectionStatus = CONNECTION_STATUS.ERROR;
                this.emit('websocketError', error);
                this.updateConnectionStatus();
            };

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket:', error);
        }
    }

    /**
     * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket
     */
    connectWebSocket() {
        if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {
            return;
        }

        this.state.connectionStatus = CONNECTION_STATUS.CONNECTING;
        this.updateConnectionStatus();
        this.initializeWebSocket();
    }

    /**
     * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket
     */
    scheduleWebSocketReconnect() {
        if (this.websocketReconnectAttempts >= 10) {
            logger.error('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket –ø—Ä–µ–≤—ã—à–µ–Ω–æ');
            return;
        }

        this.websocketReconnectAttempts++;
        const delay = Math.min(1000 * Math.pow(2, this.websocketReconnectAttempts), 30000);

        setTimeout(() => {
            if (this.settings.enableWebSocket) {
                logger.info(`–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket #${this.websocketReconnectAttempts}`);
                this.state.connectionStatus = CONNECTION_STATUS.RECONNECTING;
                this.updateConnectionStatus();
                this.connectWebSocket();
            }
        }, delay);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    handleWebSocketMessage(data) {
        const { type, payload } = data;

        switch (type) {
            case WEBSOCKET_EVENTS.SCAN_UPDATE:
                this.emit('scanUpdate', payload);
                break;

            case WEBSOCKET_EVENTS.DEVICE_DISCOVERED:
                this.emit('deviceDiscovered', payload);
                this.showNotification(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${payload.ip}`, NOTIFICATION_TYPES.INFO);
                break;

            case WEBSOCKET_EVENTS.VULNERABILITY_FOUND:
                this.emit('vulnerabilityFound', payload);
                this.showNotification(`–ù–∞–π–¥–µ–Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç—å: ${payload.title}`, NOTIFICATION_TYPES.WARNING);
                break;

            case WEBSOCKET_EVENTS.SYSTEM_ALERT:
                this.emit('systemAlert', payload);
                this.showNotification(payload.message, NOTIFICATION_TYPES.ERROR);
                break;

            default:
                logger.debug('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', type);
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ sidebar
     */
    setupSidebar() {
        const sidebar = document.querySelector('.sidebar');
        const toggleBtn = document.querySelector('.sidebar-toggle');

        if (toggleBtn) {
            toggleBtn.addEventListener('click', () => {
                this.toggleSidebar();
            });
        }

        // –ê–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
        if (window.innerWidth <= 768) {
            this.collapseSidebar();
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ header —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    setupHeader() {
        // –ö–Ω–æ–ø–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const notificationBtn = document.querySelector('.notification-btn');
        if (notificationBtn) {
            notificationBtn.addEventListener('click', () => {
                this.toggleNotificationPanel();
            });
        }

        // –ö–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã —Ç–µ–º—ã
        const themeBtn = document.querySelector('.theme-btn');
        if (themeBtn) {
            themeBtn.addEventListener('click', () => {
                this.toggleTheme();
            });
        }

        // –ö–Ω–æ–ø–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userBtn = document.querySelector('.user-btn');
        if (userBtn) {
            userBtn.addEventListener('click', () => {
                this.showUserMenu();
            });
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∏—Å–∫–∞
     */
    setupSearch() {
        const searchInput = document.querySelector('.search-input');
        if (searchInput) {
            const debouncedSearch = debounce((query) => {
                this.performSearch(query);
            }, 300);

            searchInput.addEventListener('input', (e) => {
                debouncedSearch(e.target.value);
            });
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
     */
    setupModals() {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–æ–≤ –ø–æ ESC
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.closeModals();
            }
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–æ–≤ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('modal')) {
                this.closeModals();
            }
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    setupNavigation() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
        document.querySelectorAll('.nav-item[data-tab]').forEach(item => {
            item.addEventListener('click', (e) => {
                e.preventDefault();
                const tabId = item.dataset.tab;
                this.switchTab(tabId);
            });
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π
        document.querySelectorAll('.module-load-btn[data-module]').forEach(button => {
            button.addEventListener('click', async (e) => {
                const moduleId = button.dataset.module;
                await this.loadStaticModule(moduleId, button);
            });
        });

        logger.info('üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
     */

    switchTab(tabId) {
        logger.info(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ç–∞–±: ${tabId}`);

        // –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã —É –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        document.querySelectorAll('.nav-item').forEach(item => {
            removeClass(item, 'active');
        });

        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Ç–∞–±–æ–≤
        document.querySelectorAll('.tab-container').forEach(container => {
            removeClass(container, 'active');
            container.style.display = 'none';
        });

        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞–± –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const activeNavItem = document.querySelector(`.nav-item[data-tab="${tabId}"]`);
        if (activeNavItem) {
            addClass(activeNavItem, 'active');
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        const targetContainer = document.getElementById(`${tabId}-container`);
        if (targetContainer) {
            addClass(targetContainer, 'active');
            targetContainer.style.display = 'block';

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ dashboard –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏
            if (tabId === 'dashboard' && !this.state.loadedModules.has('dashboard')) {
                this.loadDashboardContent();
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.state.currentTab = tabId;
        this.emit('tabChanged', { tabId });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        Storage.set(STORAGE_KEYS.CURRENT_TAB, tabId);
    }

    /**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ dashboard
 */
    async loadDashboardContent() {
        const container = document.querySelector('#dashboard-container .tab-content-inner');
        if (!container) return;

        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º dashboard –∏–∑ pages/ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥—É–ª—å dashboard
            const response = await fetch('pages/dashboard.html');

            if (response.ok) {
                const html = await response.text();
                container.innerHTML = html;
            } else {
                // Fallback –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–º—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
                container.innerHTML = `
                <div class="dashboard-content">
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-icon"><i class="fas fa-network-wired"></i></div>
                            <div class="stat-info">
                                <h3>–ê–∫—Ç–∏–≤–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</h3>
                                <div class="stat-value">247</div>
                            </div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-icon"><i class="fas fa-exclamation-triangle"></i></div>
                            <div class="stat-info">
                                <h3>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏</h3>
                                <div class="stat-value">12</div>
                            </div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-icon"><i class="fas fa-shield-alt"></i></div>
                            <div class="stat-info">
                                <h3>–ó–∞—â–∏—â–µ–Ω–Ω—ã–µ —Ö–æ—Å—Ç—ã</h3>
                                <div class="stat-value">235</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="dashboard-widgets">
                        <div class="widget-grid">
                            <div class="widget">
                                <h3>–°—Ç–∞—Ç—É—Å —Å–µ—Ç–∏</h3>
                                <p>–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ</p>
                            </div>
                            <div class="widget">
                                <h3>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è</h3>
                                <p>–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</p>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            }

            this.state.loadedModules.add('dashboard');
            logger.info('‚úÖ Dashboard –∑–∞–≥—Ä—É–∂–µ–Ω');

        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ dashboard:', error);
            container.innerHTML = `
            <div class="module-error">
                <i class="fas fa-exclamation-triangle"></i>
                <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h3>
                <p>${error.message}</p>
            </div>
        `;
        }
    }


    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ sidebar
     */
    toggleSidebar() {
        this.state.sidebarCollapsed = !this.state.sidebarCollapsed;

        const sidebar = document.querySelector('.sidebar');
        if (sidebar) {
            toggleClass(sidebar, 'collapsed');
        }

        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.settings.sidebarCollapsed = this.state.sidebarCollapsed;
        Storage.set(STORAGE_KEYS.SETTINGS, this.settings);

        this.emit('sidebarToggled', this.state.sidebarCollapsed);
    }

    /**
     * –°–≤–µ—Ä–Ω—É—Ç—å sidebar
     */
    collapseSidebar() {
        this.state.sidebarCollapsed = true;
        const sidebar = document.querySelector('.sidebar');
        if (sidebar) {
            addClass(sidebar, 'collapsed');
        }
    }

    /**
     * –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å sidebar
     */
    expandSidebar() {
        this.state.sidebarCollapsed = false;
        const sidebar = document.querySelector('.sidebar');
        if (sidebar) {
            removeClass(sidebar, 'collapsed');
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    showNotification(message, type = NOTIFICATION_TYPES.INFO, duration = 5000) {
        const container = this.components.notifications;
        if (!container) return;

        const notification = document.createElement('div');
        const id = generateUUID();
        notification.className = `notification notification-${type}`;
        notification.dataset.id = id;

        notification.innerHTML = `
            <div class="notification-icon">
                <i class="fas ${this.getNotificationIcon(type)}"></i>
            </div>
            <div class="notification-content">
                <div class="notification-message">${message}</div>
                <div class="notification-time">${formatDate(new Date(), 'HH:mm:ss')}</div>
            </div>
            <button class="notification-close" type="button">
                <i class="fas fa-times"></i>
            </button>
        `;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        const closeBtn = notification.querySelector('.notification-close');
        closeBtn.addEventListener('click', () => {
            this.hideNotification(id);
        });

        // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        container.appendChild(notification);
        setTimeout(() => addClass(notification, 'notification-show'), 10);

        // –ê–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏–µ
        if (duration > 0) {
            this.timeouts.set(id, setTimeout(() => {
                this.hideNotification(id);
            }, duration));
        }

        // –î–æ–±–∞–≤–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é
        this.state.notifications.unshift({
            id,
            message,
            type,
            timestamp: new Date(),
            read: false
        });

        // –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if (this.state.notifications.length > this.settings.maxNotifications) {
            this.state.notifications = this.state.notifications.slice(0, this.settings.maxNotifications);
        }

        this.state.unreadCount++;
        this.updateNotificationBadge();

        this.emit('notificationShown', { id, message, type });
    }

    /**
     * –°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    hideNotification(id) {
        const notification = document.querySelector(`[data-id="${id}"]`);
        if (notification) {
            removeClass(notification, 'notification-show');
            addClass(notification, 'notification-hide');
            setTimeout(() => notification.remove(), 300);
        }

        // –û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä
        if (this.timeouts.has(id)) {
            clearTimeout(this.timeouts.get(id));
            this.timeouts.delete(id);
        }

        this.emit('notificationHidden', { id });
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    getNotificationIcon(type) {
        const icons = {
            [NOTIFICATION_TYPES.SUCCESS]: 'fa-check-circle',
            [NOTIFICATION_TYPES.ERROR]: 'fa-exclamation-circle',
            [NOTIFICATION_TYPES.WARNING]: 'fa-exclamation-triangle',
            [NOTIFICATION_TYPES.INFO]: 'fa-info-circle'
        };
        return icons[type] || icons[NOTIFICATION_TYPES.INFO];
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    updateNotificationBadge() {
        const badge = document.querySelector('.notification-badge');
        if (badge) {
            if (this.state.unreadCount > 0) {
                badge.textContent = this.state.unreadCount > 99 ? '99+' : this.state.unreadCount;
                badge.style.display = 'flex';
            } else {
                badge.style.display = 'none';
            }
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
     */
    toggleTheme() {
        const currentTheme = this.settings.theme;
        const newTheme = currentTheme === THEMES.LIGHT ? THEMES.DARK : THEMES.LIGHT;
        this.applyTheme(newTheme);
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
     */
    applyTheme(theme) {
        this.settings.theme = theme;
        document.documentElement.setAttribute('data-theme', theme);

        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        Storage.set(STORAGE_KEYS.SETTINGS, this.settings);
        Storage.set(STORAGE_KEYS.THEME, theme);

        this.emit('themeChanged', theme);
        logger.debug(`–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${theme}`);
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞
     */
    setLanguage(language) {
        this.settings.language = language;
        document.documentElement.lang = language;

        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        Storage.set(STORAGE_KEYS.SETTINGS, this.settings);
        Storage.set(STORAGE_KEYS.LANGUAGE, language);

        this.emit('languageChanged', language);
        logger.debug(`–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${language}`);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     */
    updateConnectionStatus() {
        const statusElement = document.querySelector('.connection-status');
        const indicatorElement = document.querySelector('.status-indicator');
        const textElement = document.querySelector('.status-text');

        if (statusElement && indicatorElement && textElement) {
            // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            indicatorElement.className = `status-indicator status-${this.state.connectionStatus}`;

            // –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç
            const statusTexts = {
                [CONNECTION_STATUS.CONNECTED]: '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ',
                [CONNECTION_STATUS.DISCONNECTED]: '–û—Ç–∫–ª—é—á–µ–Ω–æ',
                [CONNECTION_STATUS.CONNECTING]: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...',
                [CONNECTION_STATUS.RECONNECTING]: '–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...',
                [CONNECTION_STATUS.ERROR]: '–û—à–∏–±–∫–∞'
            };

            textElement.textContent = statusTexts[this.state.connectionStatus] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    updateLoadingProgress(percent, message) {
        const bar = document.querySelector('.loading-progress-bar');
        const text = document.querySelector('.loading-text');
        if (bar) {
            bar.style.width = `${Math.min(Math.max(percent, 0), 100)}%`;
        }
        if (text && message) {
            text.textContent = message;
        }
    }

    /**
     * –°–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
     */
    hideLoadingScreen() {
        const screen = document.getElementById('loading-screen');
        if (!screen) return;
        screen.classList.add('loading-screen--hidden');
        setTimeout(() => {
            if (screen.parentNode) {
                screen.parentNode.removeChild(screen);
            }
        }, 300);
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    startAutoRefresh() {
        if (this.intervals.has('autoRefresh')) return;

        const interval = setInterval(() => {
            this.refreshCurrentModule();
        }, this.settings.refreshInterval);

        this.intervals.set('autoRefresh', interval);
        logger.debug('–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ');
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    stopAutoRefresh() {
        if (this.intervals.has('autoRefresh')) {
            clearInterval(this.intervals.get('autoRefresh'));
            this.intervals.delete('autoRefresh');
            logger.debug('–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥—É–ª—è
     */
    refreshCurrentModule() {
        const currentModule = this.modules.get(this.state.currentTab);
        if (currentModule && typeof currentModule.refresh === 'function') {
            currentModule.refresh();
            logger.debug(`–ú–æ–¥—É–ª—å ${this.state.currentTab} –æ–±–Ω–æ–≤–ª–µ–Ω`);
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    startActivityMonitoring() {
        const events = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart'];

        const updateActivity = debounce(() => {
            this.state.lastActivity = new Date();
        }, 1000);

        events.forEach(event => {
            document.addEventListener(event, updateActivity, true);
        });
    }

    /**
     * –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    startNotificationSystem() {
        // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (this.settings.enableNotifications && 'Notification' in window) {
            if (Notification.permission === 'default') {
                Notification.requestPermission();
            }
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    cleanupOldData() {
        // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const cutoffDate = new Date(Date.now() - 24 * 60 * 60 * 1000); // 24 —á–∞—Å–∞
        this.state.notifications = this.state.notifications.filter(
            notification => notification.timestamp > cutoffDate
        );

        // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ API
        if (this.api && typeof this.api.clearCache === 'function') {
            this.api.clearCache();
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
     */
    handleCriticalError(error) {
        logger.fatal('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);

        // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –æ—à–∏–±–∫–∏
        document.body.innerHTML = `
            <div class="critical-error">
                <div class="critical-error__content">
                    <h1>‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞</h1>
                    <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å IP Roast Enterprise</p>
                    <pre>${error.message}</pre>
                    <button onclick="location.reload()" class="btn btn--primary">
                        –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                    </button>
                </div>
            </div>
        `;

        this.emit('criticalError', error);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
     */
    handleError(error, context = 'Unknown') {
        const appError = handleError(error, context);
        logger.error(`Error in ${context}:`, appError);
        this.emit('error', appError);
        return appError;
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
     */
    performSearch(query) {
        if (!query.trim()) return;

        logger.debug(`–ü–æ–∏—Å–∫: ${query}`);
        this.emit('search', { query });

        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –ø–æ–º–æ—â–∏
     */
    showHelpDialog() {
        const modal = new Modal('help-modal', {
            title: '–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏',
            content: this.getHelpContent()
        });

        modal.addButton('–ó–∞–∫—Ä—ã—Ç—å', 'secondary', () => modal.close());
        modal.open();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–º–æ—â–∏
     */
    getHelpContent() {
        const shortcuts = [
            ['Ctrl+1', '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è'],
            ['Ctrl+2', '–ú–æ–¥—É–ª—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è'],
            ['Ctrl+3', '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∞—Ç–∞–∫'],
            ['Ctrl+4', '–¢–æ–ø–æ–ª–æ–≥–∏—è —Å–µ—Ç–∏'],
            ['Ctrl+5', '–û—Ç—á–µ—Ç—ã'],
            ['Ctrl+6', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'],
            ['Ctrl+Shift+R', '–û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª—å'],
            ['Ctrl+/', '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å'],
            ['Escape', '–ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞']
        ];

        return `
            <div class="help-shortcuts">
                ${shortcuts.map(([key, desc]) => `
                    <div class="shortcut-item">
                        <kbd>${key}</kbd>
                        <span>${desc}</span>
                    </div>
                `).join('')}
            </div>
        `;
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
     */
    closeModals() {
        document.querySelectorAll('.modal--open').forEach(modal => {
            removeClass(modal, 'modal--open');
        });
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    toggleNotificationPanel() {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–∞–Ω–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        logger.debug('Toggle notification panel');
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    showUserMenu() {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.debug('Show user menu');
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    destroy() {
        // –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        this.intervals.forEach(interval => clearInterval(interval));
        this.intervals.clear();

        // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤
        this.timeouts.forEach(timeout => clearTimeout(timeout));
        this.timeouts.clear();

        // –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket
        if (this.websocket) {
            this.websocket.close();
        }

        // –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π
        this.modules.forEach(module => {
            if (typeof module.destroy === 'function') {
                module.destroy();
            }
        });
        this.modules.clear();

        // –û—á–∏—Å—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
        this.removeAllListeners();

        logger.info('üóëÔ∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–æ');
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    window.ipRoastApp = new IPRoastEnterpriseApp();

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (import.meta.env.DEV) {
        window.IPRoast = {
            app: window.ipRoastApp,
            logger,
            Storage,
            IPRoastAPI
        };
    }
});


// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–¥—É–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
export default IPRoastEnterpriseApp;