/**
 * IP Roast Frontend - Overview Widget
 * –í–∏–¥–∂–µ—Ç –æ–±–∑–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 * –í–µ—Ä—Å–∏—è: Enterprise 1.0
 */

import { formatNumber, formatFileSize, formatDate, timeAgo, addClass, removeClass, generateUUID, deepClone } from '../shared/utils/helpers.js';
import { RISK_LEVELS, SCAN_STATUS, DEVICE_STATUS, ANIMATION_DURATION, NOTIFICATION_TYPES, THEMES } from '../shared/utils/constants.js';
import { IPRoastAPI } from '../shared/utils/api.js';

/**
 * –í–∏–¥–∂–µ—Ç –æ–±–∑–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞
 */
export class OverviewWidget {
    constructor(options = {}) {
        this.options = {
            container: null,
            autoUpdate: true,
            updateInterval: 30000,
            showAnimations: true,
            showTrends: true,
            maxChartPoints: 50,
            onStatsUpdate: null,
            onError: null,
            ...options
        };

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞
        this.state = {
            isInitialized: false,
            isLoading: false,
            lastUpdate: null,
            stats: {},
            trends: {},
            historicalData: {
                scans: [],
                devices: [],
                vulnerabilities: [],
                threats: []
            }
        };

        // –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –∏ —Ç–∞–π–º–µ—Ä—ã
        this.intervals = new Map();
        this.animations = new Map();

        // –ì—Ä–∞—Ñ–∏–∫–∏
        this.charts = new Map();

        // ID –≤–∏–¥–∂–µ—Ç–∞
        this.widgetId = generateUUID();

        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–∂–µ—Ç–∞
     */
    async init() {
        try {
            if (!this.options.container) {
                throw new Error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω');
            }

            await this.createWidgetStructure();
            await this.initializeCharts();
            await this.loadInitialData();
            this.setupEventHandlers();

            if (this.options.autoUpdate) {
                this.startAutoUpdate();
            }

            this.state.isInitialized = true;
            console.log('Overview widget –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Overview widget:', error);
            if (this.options.onError) {
                this.options.onError(error);
            }
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–∏–¥–∂–µ—Ç–∞
     */
    async createWidgetStructure() {
        const container = this.options.container;
        container.innerHTML = `
            <div class="dashboard-overview" id="overview-${this.widgetId}">
                <!-- KPI –ö–∞—Ä—Ç–æ—á–∫–∏ -->
                <div class="kpi-card" id="kpi-devices">
                    <div class="kpi-header">
                        <h3 class="kpi-title">–°–µ—Ç–µ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</h3>
                        <div class="kpi-icon network">
                            <i class="fas fa-desktop"></i>
                        </div>
                    </div>
                    <div class="kpi-content">
                        <div class="kpi-value">0</div>
                        <div class="kpi-label">–£—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Å–µ—Ç–∏</div>
                        <div class="kpi-description">–ê–∫—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</div>
                    </div>
                    <div class="kpi-footer">
                        <div class="kpi-trend neutral">
                            <span class="trend-arrow">‚Üí</span>
                            <span>0%</span>
                        </div>
                        <div class="kpi-period">24—á</div>
                    </div>
                </div>

                <div class="kpi-card" id="kpi-scans">
                    <div class="kpi-header">
                        <h3 class="kpi-title">–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</h3>
                        <div class="kpi-icon performance">
                            <i class="fas fa-search"></i>
                        </div>
                    </div>
                    <div class="kpi-content">
                        <div class="kpi-value">0</div>
                        <div class="kpi-label">–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π</div>
                        <div class="kpi-description">–í—ã–ø–æ–ª–Ω—è—é—â–∏–µ—Å—è –ø—Ä–æ—Ü–µ—Å—Å—ã</div>
                    </div>
                    <div class="kpi-footer">
                        <div class="kpi-trend neutral">
                            <span class="trend-arrow">‚Üí</span>
                            <span>0%</span>
                        </div>
                        <div class="kpi-period">24—á</div>
                    </div>
                </div>

                <div class="kpi-card" id="kpi-vulnerabilities">
                    <div class="kpi-header">
                        <h3 class="kpi-title">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏</h3>
                        <div class="kpi-icon security">
                            <i class="fas fa-exclamation-triangle"></i>
                        </div>
                    </div>
                    <div class="kpi-content">
                        <div class="kpi-value">0</div>
                        <div class="kpi-label">–£—è–∑–≤–∏–º–æ—Å—Ç–µ–π</div>
                        <div class="kpi-description">–¢—Ä–µ–±—É—é—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è</div>
                    </div>
                    <div class="kpi-footer">
                        <div class="kpi-trend neutral">
                            <span class="trend-arrow">‚Üí</span>
                            <span>0%</span>
                        </div>
                        <div class="kpi-period">24—á</div>
                    </div>
                </div>

                <div class="kpi-card" id="kpi-security">
                    <div class="kpi-header">
                        <h3 class="kpi-title">–£—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</h3>
                        <div class="kpi-icon security">
                            <i class="fas fa-shield-alt"></i>
                        </div>
                    </div>
                    <div class="kpi-content">
                        <div class="kpi-value">100%</div>
                        <div class="kpi-label">–û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å</div>
                        <div class="kpi-description">–û—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π</div>
                    </div>
                    <div class="kpi-footer">
                        <div class="kpi-trend neutral">
                            <span class="trend-arrow">‚Üí</span>
                            <span>0%</span>
                        </div>
                        <div class="kpi-period">24—á</div>
                    </div>
                </div>
            </div>

            <!-- –ì—Ä–∞—Ñ–∏–∫–∏ -->
            <div class="overview-charts">
                <div class="chart-section">
                    <h3>–ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</h3>
                    <div id="activity-chart" class="chart-container">
                        <div class="chart-loading">
                            <div class="chart-spinner"></div>
                            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
                        </div>
                    </div>
                </div>

                <div class="chart-section">
                    <h3>–¢—Ä–µ–Ω–¥—ã</h3>
                    <div id="trends-chart" class="chart-container">
                        <div class="chart-loading">
                            <div class="chart-spinner"></div>
                            <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤...</p>
                        </div>
                    </div>
                </div>

                <div class="chart-section">
                    <h3>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π</h3>
                    <div id="distribution-chart" class="chart-container">
                        <div class="chart-loading">
                            <div class="chart-spinner"></div>
                            <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è...</p>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
     */
    async initializeCharts() {
        console.log('üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤');
        // –ì—Ä–∞—Ñ–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async loadInitialData() {
        try {
            this.state.isLoading = true;
            await this.loadStats();
            await this.loadHistoricalData();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö Overview widget:', error);
            if (this.options.onError) {
                this.options.onError(error);
            }
        } finally {
            this.state.isLoading = false;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    async loadStats() {
        try {
            const response = await IPRoastAPI.analytics.getDashboardStats();
            const stats = response.data || response;

            this.state.stats = stats;
            this.state.lastUpdate = new Date();

            await this.updateStats(stats);

            if (this.options.onStatsUpdate) {
                this.options.onStatsUpdate(stats);
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            throw error;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    async updateStats(stats) {
        try {
            console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', stats);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
            if (!stats || typeof stats !== 'object') {
                console.warn('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
                stats = this.getDefaultStats();
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º KPI –∫–∞—Ä—Ç–æ—á–∫–∏
            this.updateKPICards(stats);

            // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
            await this.updateCharts(stats);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.state.stats = stats;
            this.state.lastUpdate = new Date();

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            throw error;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ KPI –∫–∞—Ä—Ç–æ—á–µ–∫
     */
    updateKPICards(stats) {
        try {
            console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ KPI –∫–∞—Ä—Ç–æ—á–µ–∫:', stats);

            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å fallback –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            const devices = stats.devices || { total: 0, active: 0, inactive: 0 };
            const scans = stats.scans || { total: 0, running: 0, completed: 0 };
            const vulnerabilities = stats.vulnerabilities || { total: 0, critical: 0, high: 0, medium: 0, low: 0 };
            const trends = stats.trends || {};

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            this.updateKPICard('devices', {
                value: devices.total,
                label: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Å–µ—Ç–∏',
                trend: trends.devices_trend || '0%',
                icon: 'fas fa-desktop',
                type: 'network'
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
            this.updateKPICard('scans', {
                value: scans.running,
                label: '–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π',
                trend: trends.scans_trend || '0%',
                icon: 'fas fa-search',
                type: 'performance'
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
            this.updateKPICard('vulnerabilities', {
                value: vulnerabilities.critical,
                label: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π',
                trend: trends.vulnerabilities_trend || '0%',
                icon: 'fas fa-exclamation-triangle',
                type: 'security'
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –æ–±—â–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            const securityScore = this.calculateSecurityScore(vulnerabilities);
            this.updateKPICard('security', {
                value: securityScore + '%',
                label: '–£—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
                trend: '0%',
                icon: 'fas fa-shield-alt',
                type: 'security'
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è KPI –∫–∞—Ä—Ç–æ—á–µ–∫:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π KPI –∫–∞—Ä—Ç–æ—á–∫–∏
     */
    updateKPICard(cardId, data) {
        try {
            const card = document.querySelector(`#kpi-${cardId}`);
            if (!card) {
                console.warn(`KPI –∫–∞—Ä—Ç–æ—á–∫–∞ ${cardId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            const valueElement = card.querySelector('.kpi-value');
            if (valueElement) {
                valueElement.textContent = data.value;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–µ–π–±–ª
            const labelElement = card.querySelector('.kpi-label');
            if (labelElement) {
                labelElement.textContent = data.label;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥
            const trendElement = card.querySelector('.kpi-trend');
            if (trendElement && data.trend) {
                trendElement.textContent = data.trend;
                trendElement.className = `kpi-trend ${this.getTrendClass(data.trend)}`;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É
            const iconElement = card.querySelector('.kpi-icon i');
            if (iconElement && data.icon) {
                iconElement.className = data.icon;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø –∫–∞—Ä—Ç–æ—á–∫–∏
            if (data.type) {
                const iconContainer = card.querySelector('.kpi-icon');
                if (iconContainer) {
                    iconContainer.className = `kpi-icon ${data.type}`;
                }
            }

        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è KPI –∫–∞—Ä—Ç–æ—á–∫–∏ ${cardId}:`, error);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ç—Ä–µ–Ω–¥–∞
     */
    getTrendClass(trend) {
        if (!trend || trend === '0%') return 'neutral';
        if (trend.startsWith('+')) return 'positive';
        if (trend.startsWith('-')) return 'negative';
        return 'neutral';
    }

    /**
     * –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
     */
    calculateSecurityScore(vulnerabilities) {
        if (!vulnerabilities) return 100;

        const { critical = 0, high = 0, medium = 0, low = 0, total = 0 } = vulnerabilities;

        if (total === 0) return 100;

        // –í–µ—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        const weights = { critical: 10, high: 5, medium: 2, low: 1 };
        const maxPossibleScore = total * weights.critical;
        const actualScore = (critical * weights.critical) + (high * weights.high) +
            (medium * weights.medium) + (low * weights.low);

        const securityScore = Math.max(0, 100 - Math.round((actualScore / maxPossibleScore) * 100));
        return securityScore;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    getDefaultStats() {
        return {
            devices: {
                total: 0,
                active: 0,
                inactive: 0
            },
            scans: {
                total: 0,
                running: 0,
                completed: 0
            },
            vulnerabilities: {
                total: 0,
                critical: 0,
                high: 0,
                medium: 0,
                low: 0
            },
            activity: [],
            trends: {}
        };
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async loadHistoricalData() {
        try {
            // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            const activityResponse = await IPRoastAPI.analytics.getActivityFeed({ limit: 5 });
            const activityData = activityResponse.data || activityResponse || [];

            this.state.historicalData.activity = activityData;

            // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
            await this.updateCharts(this.state.stats || {});

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
     */
    updateCharts(stats) {
        try {
            console.log('üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤:', stats);

            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
            const activityData = (stats && stats.activity) ? stats.activity : [];
            const trendsData = (stats && stats.trends) ? stats.trends : {};
            const vulnerabilitiesData = (stats && stats.vulnerabilities) ? stats.vulnerabilities : {};

            Promise.allSettled([
                this.updateActivityChart(activityData),
                this.updateTrendsChart(trendsData),
                this.updateDistributionChart(vulnerabilitiesData)
            ]).then(results => {
                results.forEach((result, index) => {
                    if (result.status === 'rejected') {
                        console.warn(`–ì—Ä–∞—Ñ–∏–∫ ${index} –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å:`, result.reason);
                    }
                });
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    updateActivityChart(activityData) {
        try {
            console.log('üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', activityData);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
            if (!activityData || !Array.isArray(activityData)) {
                console.warn('–î–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
                activityData = [];
            }

            const chartContainer = document.querySelector('#activity-chart');
            if (!chartContainer) {
                console.warn('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            if (activityData.length === 0) {
                chartContainer.innerHTML = `
                    <div class="chart-empty">
                        <i class="fas fa-chart-line"></i>
                        <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
                    </div>
                `;
                return;
            }

            // –ü—Ä–æ—Å—Ç–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            const activityHTML = activityData.map(item => `
                <div class="activity-item">
                    <span class="activity-time">${formatDate(item.timestamp || new Date())}</span>
                    <span class="activity-type">${item.type || 'event'}</span>
                    <span class="activity-count">${item.count || 0}</span>
                </div>
            `).join('');

            chartContainer.innerHTML = `
                <div class="activity-container">
                    ${activityHTML}
                </div>
            `;

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
            this.showChartError('activity-chart', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤
     */
    updateTrendsChart(trendsData) {
        try {
            console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤:', trendsData);

            const chartContainer = document.querySelector('#trends-chart');
            if (!chartContainer) {
                console.warn('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            if (!trendsData || Object.keys(trendsData).length === 0) {
                chartContainer.innerHTML = `
                    <div class="chart-empty">
                        <i class="fas fa-chart-bar"></i>
                        <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤</p>
                    </div>
                `;
                return;
            }

            // –ü—Ä–æ—Å—Ç–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–Ω–¥–æ–≤
            const trendsHTML = Object.entries(trendsData).map(([key, value]) => `
                <div class="trend-item">
                    <span class="trend-label">${this.getTrendLabel(key)}</span>
                    <span class="trend-value ${this.getTrendClass(value)}">${value}</span>
                </div>
            `).join('');

            chartContainer.innerHTML = `
                <div class="trends-container">
                    ${trendsHTML}
                </div>
            `;

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤:', error);
            this.showChartError('trends-chart', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤');
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
     */
    getTrendLabel(key) {
        const labels = {
            'devices_trend': '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞',
            'scans_trend': '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
            'vulnerabilities_trend': '–£—è–∑–≤–∏–º–æ—Å—Ç–∏',
            'threats_trend': '–£–≥—Ä–æ–∑—ã'
        };
        return labels[key] || key;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
     */
    updateDistributionChart(vulnerabilitiesData) {
        try {
            console.log('üç∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:', vulnerabilitiesData);

            const chartContainer = document.querySelector('#distribution-chart');
            if (!chartContainer) {
                console.warn('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            if (!vulnerabilitiesData || vulnerabilitiesData.total === 0) {
                chartContainer.innerHTML = `
                    <div class="chart-empty">
                        <i class="fas fa-chart-pie"></i>
                        <p>–ù–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
                    </div>
                `;
                return;
            }

            // –ü—Ä–æ—Å—Ç–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            const { critical = 0, high = 0, medium = 0, low = 0, total = 0 } = vulnerabilitiesData;

            const distributionHTML = `
                <div class="distribution-container">
                    <div class="distribution-item critical">
                        <span class="distribution-label">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ</span>
                        <span class="distribution-value">${critical}</span>
                        <div class="distribution-bar">
                            <div class="distribution-fill" style="width: ${total > 0 ? (critical / total * 100) : 0}%"></div>
                        </div>
                    </div>
                    <div class="distribution-item high">
                        <span class="distribution-label">–í—ã—Å–æ–∫–∏–µ</span>
                        <span class="distribution-value">${high}</span>
                        <div class="distribution-bar">
                            <div class="distribution-fill" style="width: ${total > 0 ? (high / total * 100) : 0}%"></div>
                        </div>
                    </div>
                    <div class="distribution-item medium">
                        <span class="distribution-label">–°—Ä–µ–¥–Ω–∏–µ</span>
                        <span class="distribution-value">${medium}</span>
                        <div class="distribution-bar">
                            <div class="distribution-fill" style="width: ${total > 0 ? (medium / total * 100) : 0}%"></div>
                        </div>
                    </div>
                    <div class="distribution-item low">
                        <span class="distribution-label">–ù–∏–∑–∫–∏–µ</span>
                        <span class="distribution-value">${low}</span>
                        <div class="distribution-bar">
                            <div class="distribution-fill" style="width: ${total > 0 ? (low / total * 100) : 0}%"></div>
                        </div>
                    </div>
                </div>
            `;

            chartContainer.innerHTML = distributionHTML;

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:', error);
            this.showChartError('distribution-chart', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è');
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –≥—Ä–∞—Ñ–∏–∫–∞
     */
    showChartError(chartId, message) {
        const chartContainer = document.getElementById(chartId);
        if (chartContainer) {
            chartContainer.innerHTML = `
                <div class="chart-error">
                    <i class="fas fa-exclamation-triangle"></i>
                    <p>${message}</p>
                    <button class="btn btn-sm btn-secondary" onclick="location.reload()">
                        –û–±–Ω–æ–≤–∏—Ç—å
                    </button>
                </div>
            `;
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventHandlers() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    startAutoUpdate() {
        if (this.intervals.has('autoUpdate')) return;

        const interval = setInterval(async () => {
            try {
                await this.loadStats();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
            }
        }, this.options.updateInterval);

        this.intervals.set('autoUpdate', interval);
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    stopAutoUpdate() {
        if (this.intervals.has('autoUpdate')) {
            clearInterval(this.intervals.get('autoUpdate'));
            this.intervals.delete('autoUpdate');
        }
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞
     */
    destroy() {
        this.stopAutoUpdate();
        this.intervals.forEach(interval => clearInterval(interval));
        this.intervals.clear();
        this.state.isInitialized = false;
    }
}
